(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["chunks/node_modules_tedious_lib_9b3a369f._.js", {

"[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
const SHIFT_LEFT_32 = (1 << 16) * (1 << 16);
const SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
const UNKNOWN_PLP_LEN = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
    0xfe,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff
]);
const ZERO_LENGTH_BUFFER = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(0);
/**
  A Buffer-like class that tracks position.

  As values are written, the position advances by the size of the written data.
  When writing, automatically allocates new buffers if there's not enough space.
 */ class WritableTrackingBuffer {
    constructor(initialSize, encoding, doubleSizeGrowth){
        this.initialSize = initialSize;
        this.encoding = encoding || 'ucs2';
        this.doubleSizeGrowth = doubleSizeGrowth || false;
        this.buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(this.initialSize, 0);
        this.compositeBuffer = ZERO_LENGTH_BUFFER;
        this.position = 0;
    }
    get data() {
        this.newBuffer(0);
        return this.compositeBuffer;
    }
    copyFrom(buffer) {
        const length = buffer.length;
        this.makeRoomFor(length);
        buffer.copy(this.buffer, this.position);
        this.position += length;
    }
    makeRoomFor(requiredLength) {
        if (this.buffer.length - this.position < requiredLength) {
            if (this.doubleSizeGrowth) {
                let size = Math.max(128, this.buffer.length * 2);
                while(size < requiredLength){
                    size *= 2;
                }
                this.newBuffer(size);
            } else {
                this.newBuffer(requiredLength);
            }
        }
    }
    newBuffer(size) {
        const buffer = this.buffer.slice(0, this.position);
        this.compositeBuffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].concat([
            this.compositeBuffer,
            buffer
        ]);
        this.buffer = size === 0 ? ZERO_LENGTH_BUFFER : __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(size, 0);
        this.position = 0;
    }
    writeUInt8(value) {
        const length = 1;
        this.makeRoomFor(length);
        this.buffer.writeUInt8(value, this.position);
        this.position += length;
    }
    writeUInt16LE(value) {
        const length = 2;
        this.makeRoomFor(length);
        this.buffer.writeUInt16LE(value, this.position);
        this.position += length;
    }
    writeUShort(value) {
        this.writeUInt16LE(value);
    }
    writeUInt16BE(value) {
        const length = 2;
        this.makeRoomFor(length);
        this.buffer.writeUInt16BE(value, this.position);
        this.position += length;
    }
    writeUInt24LE(value) {
        const length = 3;
        this.makeRoomFor(length);
        this.buffer[this.position + 2] = value >>> 16 & 0xff;
        this.buffer[this.position + 1] = value >>> 8 & 0xff;
        this.buffer[this.position] = value & 0xff;
        this.position += length;
    }
    writeUInt32LE(value) {
        const length = 4;
        this.makeRoomFor(length);
        this.buffer.writeUInt32LE(value, this.position);
        this.position += length;
    }
    writeBigInt64LE(value) {
        const length = 8;
        this.makeRoomFor(length);
        this.buffer.writeBigInt64LE(value, this.position);
        this.position += length;
    }
    writeInt64LE(value) {
        this.writeBigInt64LE(BigInt(value));
    }
    writeUInt64LE(value) {
        this.writeBigUInt64LE(BigInt(value));
    }
    writeBigUInt64LE(value) {
        const length = 8;
        this.makeRoomFor(length);
        this.buffer.writeBigUInt64LE(value, this.position);
        this.position += length;
    }
    writeUInt32BE(value) {
        const length = 4;
        this.makeRoomFor(length);
        this.buffer.writeUInt32BE(value, this.position);
        this.position += length;
    }
    writeUInt40LE(value) {
        // inspired by https://github.com/dpw/node-buffer-more-ints
        this.writeInt32LE(value & -1);
        this.writeUInt8(Math.floor(value * SHIFT_RIGHT_32));
    }
    writeInt8(value) {
        const length = 1;
        this.makeRoomFor(length);
        this.buffer.writeInt8(value, this.position);
        this.position += length;
    }
    writeInt16LE(value) {
        const length = 2;
        this.makeRoomFor(length);
        this.buffer.writeInt16LE(value, this.position);
        this.position += length;
    }
    writeInt16BE(value) {
        const length = 2;
        this.makeRoomFor(length);
        this.buffer.writeInt16BE(value, this.position);
        this.position += length;
    }
    writeInt32LE(value) {
        const length = 4;
        this.makeRoomFor(length);
        this.buffer.writeInt32LE(value, this.position);
        this.position += length;
    }
    writeInt32BE(value) {
        const length = 4;
        this.makeRoomFor(length);
        this.buffer.writeInt32BE(value, this.position);
        this.position += length;
    }
    writeFloatLE(value) {
        const length = 4;
        this.makeRoomFor(length);
        this.buffer.writeFloatLE(value, this.position);
        this.position += length;
    }
    writeDoubleLE(value) {
        const length = 8;
        this.makeRoomFor(length);
        this.buffer.writeDoubleLE(value, this.position);
        this.position += length;
    }
    writeString(value, encoding) {
        if (encoding == null) {
            encoding = this.encoding;
        }
        const length = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].byteLength(value, encoding);
        this.makeRoomFor(length);
        // $FlowFixMe https://github.com/facebook/flow/pull/5398
        this.buffer.write(value, this.position, encoding);
        this.position += length;
    }
    writeBVarchar(value, encoding) {
        this.writeUInt8(value.length);
        this.writeString(value, encoding);
    }
    writeUsVarchar(value, encoding) {
        this.writeUInt16LE(value.length);
        this.writeString(value, encoding);
    }
    // TODO: Figure out what types are passed in other than `Buffer`
    writeUsVarbyte(value, encoding) {
        if (encoding == null) {
            encoding = this.encoding;
        }
        let length;
        if (value instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
            length = value.length;
        } else {
            value = value.toString();
            length = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].byteLength(value, encoding);
        }
        this.writeUInt16LE(length);
        if (value instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
            this.writeBuffer(value);
        } else {
            this.makeRoomFor(length);
            // $FlowFixMe https://github.com/facebook/flow/pull/5398
            this.buffer.write(value, this.position, encoding);
            this.position += length;
        }
    }
    writePLPBody(value, encoding) {
        if (encoding == null) {
            encoding = this.encoding;
        }
        let length;
        if (value instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
            length = value.length;
        } else {
            value = value.toString();
            length = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].byteLength(value, encoding);
        }
        // Length of all chunks.
        // this.writeUInt64LE(length);
        // unknown seems to work better here - might revisit later.
        this.writeBuffer(UNKNOWN_PLP_LEN);
        // In the UNKNOWN_PLP_LEN case, the data is represented as a series of zero or more chunks.
        if (length > 0) {
            // One chunk.
            this.writeUInt32LE(length);
            if (value instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
                this.writeBuffer(value);
            } else {
                this.makeRoomFor(length);
                this.buffer.write(value, this.position, encoding);
                this.position += length;
            }
        }
        // PLP_TERMINATOR (no more chunks).
        this.writeUInt32LE(0);
    }
    writeBuffer(value) {
        const length = value.length;
        this.makeRoomFor(length);
        value.copy(this.buffer, this.position);
        this.position += length;
    }
    writeMoney(value) {
        this.writeInt32LE(Math.floor(value * SHIFT_RIGHT_32));
        this.writeInt32LE(value & -1);
    }
}
var _default = exports.default = WritableTrackingBuffer;
module.exports = WritableTrackingBuffer; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/bulk-load.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _events = __turbopack_context__.r("[externals]/node:events [external] (node:events, cjs)");
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
var _stream = __turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)");
var _token = __turbopack_context__.r("[project]/node_modules/tedious/lib/token/token.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @private
 */ const FLAGS = {
    nullable: 1 << 0,
    caseSen: 1 << 1,
    updateableReadWrite: 1 << 2,
    updateableUnknown: 1 << 3,
    identity: 1 << 4,
    computed: 1 << 5,
    // introduced in TDS 7.2
    fixedLenCLRType: 1 << 8,
    // introduced in TDS 7.2
    sparseColumnSet: 1 << 10,
    // introduced in TDS 7.3.B
    hidden: 1 << 13,
    // introduced in TDS 7.2
    key: 1 << 14,
    // introduced in TDS 7.2
    nullableUnknown: 1 << 15 // introduced in TDS 7.2
};
/**
 * @private
 */ const DONE_STATUS = {
    FINAL: 0x00,
    MORE: 0x1,
    ERROR: 0x2,
    INXACT: 0x4,
    COUNT: 0x10,
    ATTN: 0x20,
    SRVERROR: 0x100
};
/**
 * @private
 */ const rowTokenBuffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
    _token.TYPE.ROW
]);
const textPointerAndTimestampBuffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
    // TextPointer length
    0x10,
    // TextPointer
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // Timestamp
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
]);
const textPointerNullBuffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
    0x00
]);
// A transform that converts rows to packets.
class RowTransform extends _stream.Transform {
    /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ constructor(bulkLoad){
        super({
            writableObjectMode: true
        });
        this.bulkLoad = bulkLoad;
        this.mainOptions = bulkLoad.options;
        this.columns = bulkLoad.columns;
        this.columnMetadataWritten = false;
    }
    /**
   * @private
   */ _transform(row, _encoding, callback) {
        if (!this.columnMetadataWritten) {
            this.push(this.bulkLoad.getColMetaData());
            this.columnMetadataWritten = true;
        }
        this.push(rowTokenBuffer);
        for(let i = 0; i < this.columns.length; i++){
            const c = this.columns[i];
            let value = Array.isArray(row) ? row[i] : row[c.objName];
            if (!this.bulkLoad.firstRowWritten) {
                try {
                    value = c.type.validate(value, c.collation);
                } catch (error) {
                    return callback(error);
                }
            }
            const parameter = {
                length: c.length,
                scale: c.scale,
                precision: c.precision,
                value: value
            };
            if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {
                if (value == null) {
                    this.push(textPointerNullBuffer);
                    continue;
                }
                this.push(textPointerAndTimestampBuffer);
            }
            try {
                this.push(c.type.generateParameterLength(parameter, this.mainOptions));
                for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)){
                    this.push(chunk);
                }
            } catch (error) {
                return callback(error);
            }
        }
        process.nextTick(callback);
    }
    /**
   * @private
   */ _flush(callback) {
        this.push(this.bulkLoad.createDoneToken());
        process.nextTick(callback);
    }
}
/**
 * A BulkLoad instance is used to perform a bulk insert.
 *
 * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.
 *
 * Example of BulkLoad Usages:
 *
 * ```js
 * // optional BulkLoad options
 * const options = { keepNulls: true };
 *
 * // instantiate - provide the table where you'll be inserting to, options and a callback
 * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {
 *   console.log('inserted %d rows', rowCount);
 * });
 *
 * // setup your columns - always indicate whether the column is nullable
 * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });
 * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });
 *
 * // execute
 * connection.execBulkLoad(bulkLoad, [
 *   { myInt: 7, myString: 'hello' },
 *   { myInt: 23, myString: 'world' }
 * ]);
 * ```
 */ class BulkLoad extends _events.EventEmitter {
    /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ constructor(table, collation, connectionOptions, { checkConstraints = false, fireTriggers = false, keepNulls = false, lockTable = false, order = {} }, callback){
        if (typeof checkConstraints !== 'boolean') {
            throw new TypeError('The "options.checkConstraints" property must be of type boolean.');
        }
        if (typeof fireTriggers !== 'boolean') {
            throw new TypeError('The "options.fireTriggers" property must be of type boolean.');
        }
        if (typeof keepNulls !== 'boolean') {
            throw new TypeError('The "options.keepNulls" property must be of type boolean.');
        }
        if (typeof lockTable !== 'boolean') {
            throw new TypeError('The "options.lockTable" property must be of type boolean.');
        }
        if (typeof order !== 'object' || order === null) {
            throw new TypeError('The "options.order" property must be of type object.');
        }
        for (const [column, direction] of Object.entries(order)){
            if (direction !== 'ASC' && direction !== 'DESC') {
                throw new TypeError('The value of the "' + column + '" key in the "options.order" object must be either "ASC" or "DESC".');
            }
        }
        super();
        this.error = undefined;
        this.canceled = false;
        this.executionStarted = false;
        this.collation = collation;
        this.table = table;
        this.options = connectionOptions;
        this.callback = callback;
        this.columns = [];
        this.columnsByName = {};
        this.firstRowWritten = false;
        this.streamingMode = false;
        this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define
        this.bulkOptions = {
            checkConstraints,
            fireTriggers,
            keepNulls,
            lockTable,
            order
        };
    }
    /**
   * Adds a column to the bulk load.
   *
   * The column definitions should match the table you are trying to insert into.
   * Attempting to call addColumn after the first row has been added will throw an exception.
   *
   * ```js
   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });
   * ```
   *
   * @param name The name of the column.
   * @param type One of the supported `data types`.
   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.
   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).
   * @param nullable Indicates whether the column accepts NULL values.
   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.
   * @param precision For Numeric, Decimal.
   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.
  */ addColumn(name, type, { output = false, length, precision, scale, objName = name, nullable = true }) {
        if (this.firstRowWritten) {
            throw new Error('Columns cannot be added to bulk insert after the first row has been written.');
        }
        if (this.executionStarted) {
            throw new Error('Columns cannot be added to bulk insert after execution has started.');
        }
        const column = {
            type: type,
            name: name,
            value: null,
            output: output,
            length: length,
            precision: precision,
            scale: scale,
            objName: objName,
            nullable: nullable,
            collation: this.collation
        };
        if ((type.id & 0x30) === 0x20) {
            if (column.length == null && type.resolveLength) {
                column.length = type.resolveLength(column);
            }
        }
        if (type.resolvePrecision && column.precision == null) {
            column.precision = type.resolvePrecision(column);
        }
        if (type.resolveScale && column.scale == null) {
            column.scale = type.resolveScale(column);
        }
        this.columns.push(column);
        this.columnsByName[name] = column;
    }
    /**
   * @private
   */ getOptionsSql() {
        const addOptions = [];
        if (this.bulkOptions.checkConstraints) {
            addOptions.push('CHECK_CONSTRAINTS');
        }
        if (this.bulkOptions.fireTriggers) {
            addOptions.push('FIRE_TRIGGERS');
        }
        if (this.bulkOptions.keepNulls) {
            addOptions.push('KEEP_NULLS');
        }
        if (this.bulkOptions.lockTable) {
            addOptions.push('TABLOCK');
        }
        if (this.bulkOptions.order) {
            const orderColumns = [];
            for (const [column, direction] of Object.entries(this.bulkOptions.order)){
                orderColumns.push(`${column} ${direction}`);
            }
            if (orderColumns.length) {
                addOptions.push(`ORDER (${orderColumns.join(', ')})`);
            }
        }
        if (addOptions.length > 0) {
            return ` WITH (${addOptions.join(',')})`;
        } else {
            return '';
        }
    }
    /**
   * @private
   */ getBulkInsertSql() {
        let sql = 'insert bulk ' + this.table + '(';
        for(let i = 0, len = this.columns.length; i < len; i++){
            const c = this.columns[i];
            if (i !== 0) {
                sql += ', ';
            }
            sql += '[' + c.name + '] ' + c.type.declaration(c);
        }
        sql += ')';
        sql += this.getOptionsSql();
        return sql;
    }
    /**
   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.
   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).
   *
   * ```js
   * var sql = bulkLoad.getTableCreationSql();
   * ```
   *
   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,
   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]
   */ getTableCreationSql() {
        let sql = 'CREATE TABLE ' + this.table + '(\n';
        for(let i = 0, len = this.columns.length; i < len; i++){
            const c = this.columns[i];
            if (i !== 0) {
                sql += ',\n';
            }
            sql += '[' + c.name + '] ' + c.type.declaration(c);
            if (c.nullable !== undefined) {
                sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');
            }
        }
        sql += '\n)';
        return sql;
    }
    /**
   * @private
   */ getColMetaData() {
        const tBuf = new _writableTrackingBuffer.default(100, null, true);
        // TokenType
        tBuf.writeUInt8(_token.TYPE.COLMETADATA);
        // Count
        tBuf.writeUInt16LE(this.columns.length);
        for(let j = 0, len = this.columns.length; j < len; j++){
            const c = this.columns[j];
            // UserType
            if (this.options.tdsVersion < '7_2') {
                tBuf.writeUInt16LE(0);
            } else {
                tBuf.writeUInt32LE(0);
            }
            // Flags
            let flags = FLAGS.updateableReadWrite;
            if (c.nullable) {
                flags |= FLAGS.nullable;
            } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {
                flags |= FLAGS.nullableUnknown;
            }
            tBuf.writeUInt16LE(flags);
            // TYPE_INFO
            tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options));
            // TableName
            if (c.type.hasTableName) {
                tBuf.writeUsVarchar(this.table, 'ucs2');
            }
            // ColName
            tBuf.writeBVarchar(c.name, 'ucs2');
        }
        return tBuf.data;
    }
    /**
   * Sets a timeout for this bulk load.
   *
   * ```js
   * bulkLoad.setTimeout(timeout);
   * ```
   *
   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.
   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.
   */ setTimeout(timeout) {
        this.timeout = timeout;
    }
    /**
   * @private
   */ createDoneToken() {
        // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here
        const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);
        tBuf.writeUInt8(_token.TYPE.DONE);
        const status = DONE_STATUS.FINAL;
        tBuf.writeUInt16LE(status);
        tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)
        tBuf.writeUInt32LE(0); // row count - doesn't really matter
        if (this.options.tdsVersion >= '7_2') {
            tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2
        }
        return tBuf.data;
    }
    /**
   * @private
   */ cancel() {
        if (this.canceled) {
            return;
        }
        this.canceled = true;
        this.emit('cancel');
    }
}
var _default = exports.default = BulkLoad;
module.exports = BulkLoad; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/debug.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _events = __turbopack_context__.r("[externals]/node:events [external] (node:events, cjs)");
var util = _interopRequireWildcard(__turbopack_context__.r("[externals]/node:util [external] (node:util, cjs)"));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
class Debug extends _events.EventEmitter {
    /*
    @options    Which debug details should be sent.
                data    - dump of packet data
                payload - details of decoded payload
  */ constructor({ data = false, payload = false, packet = false, token = false } = {}){
        super();
        this.options = {
            data,
            payload,
            packet,
            token
        };
        this.indent = '  ';
    }
    packet(direction, packet) {
        if (this.haveListeners() && this.options.packet) {
            this.log('');
            this.log(direction);
            this.log(packet.headerToString(this.indent));
        }
    }
    data(packet) {
        if (this.haveListeners() && this.options.data) {
            this.log(packet.dataToString(this.indent));
        }
    }
    payload(generatePayloadText) {
        if (this.haveListeners() && this.options.payload) {
            this.log(generatePayloadText());
        }
    }
    token(token) {
        if (this.haveListeners() && this.options.token) {
            this.log(util.inspect(token, {
                showHidden: false,
                depth: 5,
                colors: true
            }));
        }
    }
    haveListeners() {
        return this.listeners('debug').length > 0;
    }
    log(text) {
        this.emit('debug', text);
    }
}
var _default = exports.default = Debug;
module.exports = Debug; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXZlbnRzIiwicmVxdWlyZSIsInV0aWwiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIkRlYnVnIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJkYXRhIiwicGF5bG9hZCIsInBhY2tldCIsInRva2VuIiwib3B0aW9ucyIsImluZGVudCIsImRpcmVjdGlvbiIsImhhdmVMaXN0ZW5lcnMiLCJsb2ciLCJoZWFkZXJUb1N0cmluZyIsImRhdGFUb1N0cmluZyIsImdlbmVyYXRlUGF5bG9hZFRleHQiLCJpbnNwZWN0Iiwic2hvd0hpZGRlbiIsImRlcHRoIiwiY29sb3JzIiwibGlzdGVuZXJzIiwibGVuZ3RoIiwidGV4dCIsImVtaXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi9zcmMvZGVidWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAndXRpbCc7XG5pbXBvcnQgeyBQYWNrZXQgfSBmcm9tICcuL3BhY2tldCc7XG5pbXBvcnQgdHlwZSB7IFRva2VuIH0gZnJvbSAnLi90b2tlbi90b2tlbic7XG5cbmNsYXNzIERlYnVnIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgZGVjbGFyZSBvcHRpb25zOiB7XG4gICAgZGF0YTogYm9vbGVhbjtcbiAgICBwYXlsb2FkOiBib29sZWFuO1xuICAgIHBhY2tldDogYm9vbGVhbjtcbiAgICB0b2tlbjogYm9vbGVhbjtcbiAgfTtcblxuICBkZWNsYXJlIGluZGVudDogc3RyaW5nO1xuXG4gIC8qXG4gICAgQG9wdGlvbnMgICAgV2hpY2ggZGVidWcgZGV0YWlscyBzaG91bGQgYmUgc2VudC5cbiAgICAgICAgICAgICAgICBkYXRhICAgIC0gZHVtcCBvZiBwYWNrZXQgZGF0YVxuICAgICAgICAgICAgICAgIHBheWxvYWQgLSBkZXRhaWxzIG9mIGRlY29kZWQgcGF5bG9hZFxuICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGEgPSBmYWxzZSwgcGF5bG9hZCA9IGZhbHNlLCBwYWNrZXQgPSBmYWxzZSwgdG9rZW4gPSBmYWxzZSB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5vcHRpb25zID0geyBkYXRhLCBwYXlsb2FkLCBwYWNrZXQsIHRva2VuIH07XG4gICAgdGhpcy5pbmRlbnQgPSAnICAnO1xuICB9XG5cbiAgcGFja2V0KGRpcmVjdGlvbjogJ1JlY2VpdmVkJyB8ICdTZW50JywgcGFja2V0OiBQYWNrZXQpIHtcbiAgICBpZiAodGhpcy5oYXZlTGlzdGVuZXJzKCkgJiYgdGhpcy5vcHRpb25zLnBhY2tldCkge1xuICAgICAgdGhpcy5sb2coJycpO1xuICAgICAgdGhpcy5sb2coZGlyZWN0aW9uKTtcbiAgICAgIHRoaXMubG9nKHBhY2tldC5oZWFkZXJUb1N0cmluZyh0aGlzLmluZGVudCkpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEocGFja2V0OiBQYWNrZXQpIHtcbiAgICBpZiAodGhpcy5oYXZlTGlzdGVuZXJzKCkgJiYgdGhpcy5vcHRpb25zLmRhdGEpIHtcbiAgICAgIHRoaXMubG9nKHBhY2tldC5kYXRhVG9TdHJpbmcodGhpcy5pbmRlbnQpKTtcbiAgICB9XG4gIH1cblxuICBwYXlsb2FkKGdlbmVyYXRlUGF5bG9hZFRleHQ6ICgpID0+IHN0cmluZykge1xuICAgIGlmICh0aGlzLmhhdmVMaXN0ZW5lcnMoKSAmJiB0aGlzLm9wdGlvbnMucGF5bG9hZCkge1xuICAgICAgdGhpcy5sb2coZ2VuZXJhdGVQYXlsb2FkVGV4dCgpKTtcbiAgICB9XG4gIH1cblxuICB0b2tlbih0b2tlbjogVG9rZW4pIHtcbiAgICBpZiAodGhpcy5oYXZlTGlzdGVuZXJzKCkgJiYgdGhpcy5vcHRpb25zLnRva2VuKSB7XG4gICAgICB0aGlzLmxvZyh1dGlsLmluc3BlY3QodG9rZW4sIHsgc2hvd0hpZGRlbjogZmFsc2UsIGRlcHRoOiA1LCBjb2xvcnM6IHRydWUgfSkpO1xuICAgIH1cbiAgfVxuXG4gIGhhdmVMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzKCdkZWJ1ZycpLmxlbmd0aCA+IDA7XG4gIH1cblxuICBsb2codGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5lbWl0KCdkZWJ1ZycsIHRleHQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERlYnVnO1xubW9kdWxlLmV4cG9ydHMgPSBEZWJ1ZztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsSUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQTZCLFNBQUFHLHlCQUFBQyxDQUFBLDZCQUFBQyxPQUFBLG1CQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLENBQUFDLENBQUEsV0FBQUEsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsS0FBQUYsQ0FBQTtBQUFBLFNBQUFGLHdCQUFBRSxDQUFBLEVBQUFFLENBQUEsU0FBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFBLENBQUEsQ0FBQUksVUFBQSxTQUFBSixDQUFBLGVBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsV0FBQUssT0FBQSxFQUFBTCxDQUFBLFFBQUFHLENBQUEsR0FBQUosd0JBQUEsQ0FBQUcsQ0FBQSxPQUFBQyxDQUFBLElBQUFBLENBQUEsQ0FBQUcsR0FBQSxDQUFBTixDQUFBLFVBQUFHLENBQUEsQ0FBQUksR0FBQSxDQUFBUCxDQUFBLE9BQUFRLENBQUEsS0FBQUMsU0FBQSxVQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLENBQUEsSUFBQWQsQ0FBQSxvQkFBQWMsQ0FBQSxJQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFqQixDQUFBLEVBQUFjLENBQUEsU0FBQUksQ0FBQSxHQUFBUixDQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQWIsQ0FBQSxFQUFBYyxDQUFBLFVBQUFJLENBQUEsS0FBQUEsQ0FBQSxDQUFBWCxHQUFBLElBQUFXLENBQUEsQ0FBQUMsR0FBQSxJQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUosQ0FBQSxFQUFBTSxDQUFBLEVBQUFJLENBQUEsSUFBQVYsQ0FBQSxDQUFBTSxDQUFBLElBQUFkLENBQUEsQ0FBQWMsQ0FBQSxZQUFBTixDQUFBLENBQUFILE9BQUEsR0FBQUwsQ0FBQSxFQUFBRyxDQUFBLElBQUFBLENBQUEsQ0FBQWdCLEdBQUEsQ0FBQW5CLENBQUEsRUFBQVEsQ0FBQSxHQUFBQSxDQUFBO0FBSTdCLE1BQU1ZLEtBQUssU0FBU0Msb0JBQVksQ0FBQztFQVUvQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUM7SUFBRUMsSUFBSSxHQUFHLEtBQUs7SUFBRUMsT0FBTyxHQUFHLEtBQUs7SUFBRUMsTUFBTSxHQUFHLEtBQUs7SUFBRUMsS0FBSyxHQUFHO0VBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQ2pGLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDQyxPQUFPLEdBQUc7TUFBRUosSUFBSTtNQUFFQyxPQUFPO01BQUVDLE1BQU07TUFBRUM7SUFBTSxDQUFDO0lBQy9DLElBQUksQ0FBQ0UsTUFBTSxHQUFHLElBQUk7RUFDcEI7RUFFQUgsTUFBTUEsQ0FBQ0ksU0FBOEIsRUFBRUosTUFBYyxFQUFFO0lBQ3JELElBQUksSUFBSSxDQUFDSyxhQUFhLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQ0gsT0FBTyxDQUFDRixNQUFNLEVBQUU7TUFDL0MsSUFBSSxDQUFDTSxHQUFHLENBQUMsRUFBRSxDQUFDO01BQ1osSUFBSSxDQUFDQSxHQUFHLENBQUNGLFNBQVMsQ0FBQztNQUNuQixJQUFJLENBQUNFLEdBQUcsQ0FBQ04sTUFBTSxDQUFDTyxjQUFjLENBQUMsSUFBSSxDQUFDSixNQUFNLENBQUMsQ0FBQztJQUM5QztFQUNGO0VBRUFMLElBQUlBLENBQUNFLE1BQWMsRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQ0ssYUFBYSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUNILE9BQU8sQ0FBQ0osSUFBSSxFQUFFO01BQzdDLElBQUksQ0FBQ1EsR0FBRyxDQUFDTixNQUFNLENBQUNRLFlBQVksQ0FBQyxJQUFJLENBQUNMLE1BQU0sQ0FBQyxDQUFDO0lBQzVDO0VBQ0Y7RUFFQUosT0FBT0EsQ0FBQ1UsbUJBQWlDLEVBQUU7SUFDekMsSUFBSSxJQUFJLENBQUNKLGFBQWEsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDSCxPQUFPLENBQUNILE9BQU8sRUFBRTtNQUNoRCxJQUFJLENBQUNPLEdBQUcsQ0FBQ0csbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQ2pDO0VBQ0Y7RUFFQVIsS0FBS0EsQ0FBQ0EsS0FBWSxFQUFFO0lBQ2xCLElBQUksSUFBSSxDQUFDSSxhQUFhLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQ0gsT0FBTyxDQUFDRCxLQUFLLEVBQUU7TUFDOUMsSUFBSSxDQUFDSyxHQUFHLENBQUNsQyxJQUFJLENBQUNzQyxPQUFPLENBQUNULEtBQUssRUFBRTtRQUFFVSxVQUFVLEVBQUUsS0FBSztRQUFFQyxLQUFLLEVBQUUsQ0FBQztRQUFFQyxNQUFNLEVBQUU7TUFBSyxDQUFDLENBQUMsQ0FBQztJQUM5RTtFQUNGO0VBRUFSLGFBQWFBLENBQUEsRUFBRztJQUNkLE9BQU8sSUFBSSxDQUFDUyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUNDLE1BQU0sR0FBRyxDQUFDO0VBQzNDO0VBRUFULEdBQUdBLENBQUNVLElBQVksRUFBRTtJQUNoQixJQUFJLENBQUNDLElBQUksQ0FBQyxPQUFPLEVBQUVELElBQUksQ0FBQztFQUMxQjtBQUNGO0FBQUMsSUFBQUUsUUFBQSxHQUFBQyxPQUFBLENBQUF2QyxPQUFBLEdBRWNlLEtBQUs7QUFDcEJ5QixNQUFNLENBQUNELE9BQU8sR0FBR3hCLEtBQUsifQ==
}}),
"[project]/node_modules/tedious/lib/errors/abort-error.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
class AbortError extends Error {
    constructor(){
        super('The operation was aborted');
        this.code = 'ABORT_ERR';
        this.name = 'AbortError';
    }
}
exports.default = AbortError; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBYm9ydEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJuYW1lIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3JzL2Fib3J0LWVycm9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEFib3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGRlY2xhcmUgY29kZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkJyk7XG5cbiAgICB0aGlzLmNvZGUgPSAnQUJPUlRfRVJSJztcbiAgICB0aGlzLm5hbWUgPSAnQWJvcnRFcnJvcic7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWUsTUFBTUEsVUFBVSxTQUFTQyxLQUFLLENBQUM7RUFHNUNDLFdBQVdBLENBQUEsRUFBRztJQUNaLEtBQUssQ0FBQywyQkFBMkIsQ0FBQztJQUVsQyxJQUFJLENBQUNDLElBQUksR0FBRyxXQUFXO0lBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxHQUFHLFlBQVk7RUFDMUI7QUFDRjtBQUFDQyxPQUFBLENBQUFDLE9BQUEsR0FBQU4sVUFBQSJ9
}}),
"[project]/node_modules/tedious/lib/errors/timeout-error.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
class TimeoutError extends Error {
    constructor(){
        super('The operation was aborted due to timeout');
        this.code = 'TIMEOUT_ERR';
        this.name = 'TimeoutError';
    }
}
exports.default = TimeoutError; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUaW1lb3V0RXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiY29kZSIsIm5hbWUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvdGltZW91dC1lcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGRlY2xhcmUgY29kZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkIGR1ZSB0byB0aW1lb3V0Jyk7XG5cbiAgICB0aGlzLmNvZGUgPSAnVElNRU9VVF9FUlInO1xuICAgIHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFlLE1BQU1BLFlBQVksU0FBU0MsS0FBSyxDQUFDO0VBRzlDQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixLQUFLLENBQUMsMENBQTBDLENBQUM7SUFFakQsSUFBSSxDQUFDQyxJQUFJLEdBQUcsYUFBYTtJQUN6QixJQUFJLENBQUNDLElBQUksR0FBRyxjQUFjO0VBQzVCO0FBQ0Y7QUFBQ0MsT0FBQSxDQUFBQyxPQUFBLEdBQUFOLFlBQUEifQ==
}}),
"[project]/node_modules/tedious/lib/sender.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sendInParallel = sendInParallel;
exports.sendMessage = sendMessage;
var _dgram = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _net = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _nodeUrl = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/next/dist/compiled/native-url/index.js [middleware-edge] (ecmascript)"));
var _abortError = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/errors/abort-error.js [middleware-edge] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function sendInParallel(addresses, port, request, signal) {
    if (signal.aborted) {
        throw new _abortError.default();
    }
    return await new Promise((resolve, reject)=>{
        const sockets = [];
        let errorCount = 0;
        const onError = (err)=>{
            errorCount++;
            if (errorCount === addresses.length) {
                signal.removeEventListener('abort', onAbort);
                clearSockets();
                reject(err);
            }
        };
        const onMessage = (message)=>{
            signal.removeEventListener('abort', onAbort);
            clearSockets();
            resolve(message);
        };
        const onAbort = ()=>{
            clearSockets();
            reject(new _abortError.default());
        };
        const clearSockets = ()=>{
            for (const socket of sockets){
                socket.removeListener('error', onError);
                socket.removeListener('message', onMessage);
                socket.close();
            }
        };
        signal.addEventListener('abort', onAbort, {
            once: true
        });
        for(let j = 0; j < addresses.length; j++){
            const udpType = addresses[j].family === 6 ? 'udp6' : 'udp4';
            const socket = _dgram.default.createSocket(udpType);
            sockets.push(socket);
            socket.on('error', onError);
            socket.on('message', onMessage);
            socket.send(request, 0, request.length, port, addresses[j].address);
        }
    });
}
async function sendMessage(host, port, lookup, signal, request) {
    if (signal.aborted) {
        throw new _abortError.default();
    }
    let addresses;
    if (_net.default.isIP(host)) {
        addresses = [
            {
                address: host,
                family: _net.default.isIPv6(host) ? 6 : 4
            }
        ];
    } else {
        addresses = await new Promise((resolve, reject)=>{
            const onAbort = ()=>{
                reject(new _abortError.default());
            };
            const domainInASCII = _nodeUrl.default.domainToASCII(host);
            lookup(domainInASCII === '' ? host : domainInASCII, {
                all: true
            }, (err, addresses)=>{
                signal.removeEventListener('abort', onAbort);
                err ? reject(err) : resolve(addresses);
            });
        });
    }
    return await sendInParallel(addresses, port, request, signal);
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/utils/with-timeout.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.withTimeout = withTimeout;
var _timeoutError = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/errors/timeout-error.js [middleware-edge] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Run the function `func` with an `AbortSignal` that will automatically abort after the time specified
 * by `timeout` or when the given `signal` is aborted.
 *
 * On timeout, the `timeoutSignal` will be aborted and a `TimeoutError` will be thrown.
 */ async function withTimeout(timeout, func, signal) {
    const timeoutController = new AbortController();
    const abortCurrentAttempt = ()=>{
        timeoutController.abort();
    };
    const timer = setTimeout(abortCurrentAttempt, timeout);
    signal?.addEventListener('abort', abortCurrentAttempt, {
        once: true
    });
    try {
        return await func(timeoutController.signal);
    } catch (err) {
        if (err instanceof Error && err.name === 'AbortError' && !(signal && signal.aborted)) {
            throw new _timeoutError.default();
        }
        throw err;
    } finally{
        signal?.removeEventListener('abort', abortCurrentAttempt);
        clearTimeout(timer);
    }
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGltZW91dEVycm9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIndpdGhUaW1lb3V0IiwidGltZW91dCIsImZ1bmMiLCJzaWduYWwiLCJ0aW1lb3V0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsImFib3J0Q3VycmVudEF0dGVtcHQiLCJhYm9ydCIsInRpbWVyIiwic2V0VGltZW91dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwiZXJyIiwiRXJyb3IiLCJuYW1lIiwiYWJvcnRlZCIsIlRpbWVvdXRFcnJvciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjbGVhclRpbWVvdXQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvd2l0aC10aW1lb3V0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUaW1lb3V0RXJyb3IgZnJvbSAnLi4vZXJyb3JzL3RpbWVvdXQtZXJyb3InO1xuXG4vKipcbiAqIFJ1biB0aGUgZnVuY3Rpb24gYGZ1bmNgIHdpdGggYW4gYEFib3J0U2lnbmFsYCB0aGF0IHdpbGwgYXV0b21hdGljYWxseSBhYm9ydCBhZnRlciB0aGUgdGltZSBzcGVjaWZpZWRcbiAqIGJ5IGB0aW1lb3V0YCBvciB3aGVuIHRoZSBnaXZlbiBgc2lnbmFsYCBpcyBhYm9ydGVkLlxuICpcbiAqIE9uIHRpbWVvdXQsIHRoZSBgdGltZW91dFNpZ25hbGAgd2lsbCBiZSBhYm9ydGVkIGFuZCBhIGBUaW1lb3V0RXJyb3JgIHdpbGwgYmUgdGhyb3duLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aFRpbWVvdXQ8VD4odGltZW91dDogbnVtYmVyLCBmdW5jOiAodGltZW91dFNpZ25hbDogQWJvcnRTaWduYWwpID0+IFByb21pc2U8VD4sIHNpZ25hbD86IEFib3J0U2lnbmFsKTogUHJvbWlzZTxUPiB7XG4gIGNvbnN0IHRpbWVvdXRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICBjb25zdCBhYm9ydEN1cnJlbnRBdHRlbXB0ID0gKCkgPT4geyB0aW1lb3V0Q29udHJvbGxlci5hYm9ydCgpOyB9O1xuXG4gIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dChhYm9ydEN1cnJlbnRBdHRlbXB0LCB0aW1lb3V0KTtcbiAgc2lnbmFsPy5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0Q3VycmVudEF0dGVtcHQsIHsgb25jZTogdHJ1ZSB9KTtcblxuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCBmdW5jKHRpbWVvdXRDb250cm9sbGVyLnNpZ25hbCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnIubmFtZSA9PT0gJ0Fib3J0RXJyb3InICYmICEoc2lnbmFsICYmIHNpZ25hbC5hYm9ydGVkKSkge1xuICAgICAgdGhyb3cgbmV3IFRpbWVvdXRFcnJvcigpO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICBzaWduYWw/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRDdXJyZW50QXR0ZW1wdCk7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBbUQsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sZUFBZUcsV0FBV0EsQ0FBSUMsT0FBZSxFQUFFQyxJQUFnRCxFQUFFQyxNQUFvQixFQUFjO0VBQ3hJLE1BQU1DLGlCQUFpQixHQUFHLElBQUlDLGVBQWUsQ0FBQyxDQUFDO0VBQy9DLE1BQU1DLG1CQUFtQixHQUFHQSxDQUFBLEtBQU07SUFBRUYsaUJBQWlCLENBQUNHLEtBQUssQ0FBQyxDQUFDO0VBQUUsQ0FBQztFQUVoRSxNQUFNQyxLQUFLLEdBQUdDLFVBQVUsQ0FBQ0gsbUJBQW1CLEVBQUVMLE9BQU8sQ0FBQztFQUN0REUsTUFBTSxFQUFFTyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUVKLG1CQUFtQixFQUFFO0lBQUVLLElBQUksRUFBRTtFQUFLLENBQUMsQ0FBQztFQUV0RSxJQUFJO0lBQ0YsT0FBTyxNQUFNVCxJQUFJLENBQUNFLGlCQUFpQixDQUFDRCxNQUFNLENBQUM7RUFDN0MsQ0FBQyxDQUFDLE9BQU9TLEdBQUcsRUFBRTtJQUNaLElBQUlBLEdBQUcsWUFBWUMsS0FBSyxJQUFJRCxHQUFHLENBQUNFLElBQUksS0FBSyxZQUFZLElBQUksRUFBRVgsTUFBTSxJQUFJQSxNQUFNLENBQUNZLE9BQU8sQ0FBQyxFQUFFO01BQ3BGLE1BQU0sSUFBSUMscUJBQVksQ0FBQyxDQUFDO0lBQzFCO0lBRUEsTUFBTUosR0FBRztFQUNYLENBQUMsU0FBUztJQUNSVCxNQUFNLEVBQUVjLG1CQUFtQixDQUFDLE9BQU8sRUFBRVgsbUJBQW1CLENBQUM7SUFDekRZLFlBQVksQ0FBQ1YsS0FBSyxDQUFDO0VBQ3JCO0FBQ0YifQ==
}}),
"[project]/node_modules/tedious/lib/instance-lookup.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.instanceLookup = instanceLookup;
exports.parseBrowserResponse = parseBrowserResponse;
var _dns = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _abortError = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/errors/abort-error.js [middleware-edge] (ecmascript)"));
var _sender = __turbopack_context__.r("[project]/node_modules/tedious/lib/sender.js [middleware-edge] (ecmascript)");
var _withTimeout = __turbopack_context__.r("[project]/node_modules/tedious/lib/utils/with-timeout.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SQL_SERVER_BROWSER_PORT = 1434;
const TIMEOUT = 2 * 1000;
const RETRIES = 3;
// There are three bytes at the start of the response, whose purpose is unknown.
const MYSTERY_HEADER_LENGTH = 3;
// Most of the functionality has been determined from from jTDS's MSSqlServerInfo class.
async function instanceLookup(options) {
    const server = options.server;
    if (typeof server !== 'string') {
        throw new TypeError('Invalid arguments: "server" must be a string');
    }
    const instanceName = options.instanceName;
    if (typeof instanceName !== 'string') {
        throw new TypeError('Invalid arguments: "instanceName" must be a string');
    }
    const timeout = options.timeout === undefined ? TIMEOUT : options.timeout;
    if (typeof timeout !== 'number') {
        throw new TypeError('Invalid arguments: "timeout" must be a number');
    }
    const retries = options.retries === undefined ? RETRIES : options.retries;
    if (typeof retries !== 'number') {
        throw new TypeError('Invalid arguments: "retries" must be a number');
    }
    if (options.lookup !== undefined && typeof options.lookup !== 'function') {
        throw new TypeError('Invalid arguments: "lookup" must be a function');
    }
    const lookup = options.lookup ?? _dns.default.lookup;
    if (options.port !== undefined && typeof options.port !== 'number') {
        throw new TypeError('Invalid arguments: "port" must be a number');
    }
    const port = options.port ?? SQL_SERVER_BROWSER_PORT;
    const signal = options.signal;
    if (signal.aborted) {
        throw new _abortError.default();
    }
    let response;
    for(let i = 0; i <= retries; i++){
        try {
            response = await (0, _withTimeout.withTimeout)(timeout, async (signal)=>{
                const request = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
                    0x02
                ]);
                return await (0, _sender.sendMessage)(options.server, port, lookup, signal, request);
            }, signal);
        } catch (err) {
            // If the current attempt timed out, continue with the next
            if (!signal.aborted && err instanceof Error && err.name === 'TimeoutError') {
                continue;
            }
            throw err;
        }
    }
    if (!response) {
        throw new Error('Failed to get response from SQL Server Browser on ' + server);
    }
    const message = response.toString('ascii', MYSTERY_HEADER_LENGTH);
    const foundPort = parseBrowserResponse(message, instanceName);
    if (!foundPort) {
        throw new Error('Port for ' + instanceName + ' not found in ' + options.server);
    }
    return foundPort;
}
function parseBrowserResponse(response, instanceName) {
    let getPort;
    const instances = response.split(';;');
    for(let i = 0, len = instances.length; i < len; i++){
        const instance = instances[i];
        const parts = instance.split(';');
        for(let p = 0, partsLen = parts.length; p < partsLen; p += 2){
            const name = parts[p];
            const value = parts[p + 1];
            if (name === 'tcp' && getPort) {
                const port = parseInt(value, 10);
                return port;
            }
            if (name === 'InstanceName') {
                if (value.toUpperCase() === instanceName.toUpperCase()) {
                    getPort = true;
                } else {
                    getPort = false;
                }
            }
        }
    }
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/transient-error-lookup.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransientErrorLookup = void 0;
// This simple piece of code is factored out into a separate class to make it
// easy to stub it out in tests. It's hard, if not impossible, to cause a
// transient error on demand in tests.
class TransientErrorLookup {
    isTransientError(error) {
        // This list of transient errors comes from Microsoft implementation of SqlClient:
        //  - https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlInternalConnectionTds.cs#L115
        const transientErrors = [
            4060,
            10928,
            10929,
            40197,
            40501,
            40613
        ];
        return transientErrors.indexOf(error) !== -1;
    }
}
exports.TransientErrorLookup = TransientErrorLookup; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUcmFuc2llbnRFcnJvckxvb2t1cCIsImlzVHJhbnNpZW50RXJyb3IiLCJlcnJvciIsInRyYW5zaWVudEVycm9ycyIsImluZGV4T2YiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL3RyYW5zaWVudC1lcnJvci1sb29rdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBzaW1wbGUgcGllY2Ugb2YgY29kZSBpcyBmYWN0b3JlZCBvdXQgaW50byBhIHNlcGFyYXRlIGNsYXNzIHRvIG1ha2UgaXRcbi8vIGVhc3kgdG8gc3R1YiBpdCBvdXQgaW4gdGVzdHMuIEl0J3MgaGFyZCwgaWYgbm90IGltcG9zc2libGUsIHRvIGNhdXNlIGFcbi8vIHRyYW5zaWVudCBlcnJvciBvbiBkZW1hbmQgaW4gdGVzdHMuXG5leHBvcnQgY2xhc3MgVHJhbnNpZW50RXJyb3JMb29rdXAge1xuICBpc1RyYW5zaWVudEVycm9yKGVycm9yOiBudW1iZXIpIHtcbiAgICAvLyBUaGlzIGxpc3Qgb2YgdHJhbnNpZW50IGVycm9ycyBjb21lcyBmcm9tIE1pY3Jvc29mdCBpbXBsZW1lbnRhdGlvbiBvZiBTcWxDbGllbnQ6XG4gICAgLy8gIC0gaHR0cHM6Ly9naXRodWIuY29tL2RvdG5ldC9jb3JlZngvYmxvYi9tYXN0ZXIvc3JjL1N5c3RlbS5EYXRhLlNxbENsaWVudC9zcmMvU3lzdGVtL0RhdGEvU3FsQ2xpZW50L1NxbEludGVybmFsQ29ubmVjdGlvblRkcy5jcyNMMTE1XG4gICAgY29uc3QgdHJhbnNpZW50RXJyb3JzID0gWzQwNjAsIDEwOTI4LCAxMDkyOSwgNDAxOTcsIDQwNTAxLCA0MDYxM107XG4gICAgcmV0dXJuIHRyYW5zaWVudEVycm9ycy5pbmRleE9mKGVycm9yKSAhPT0gLTE7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ08sTUFBTUEsb0JBQW9CLENBQUM7RUFDaENDLGdCQUFnQkEsQ0FBQ0MsS0FBYSxFQUFFO0lBQzlCO0lBQ0E7SUFDQSxNQUFNQyxlQUFlLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztJQUNqRSxPQUFPQSxlQUFlLENBQUNDLE9BQU8sQ0FBQ0YsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQzlDO0FBQ0Y7QUFBQ0csT0FBQSxDQUFBTCxvQkFBQSxHQUFBQSxvQkFBQSJ9
}}),
"[project]/node_modules/tedious/lib/packet.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TYPE = exports.Packet = exports.OFFSET = exports.HEADER_LENGTH = void 0;
exports.isPacketComplete = isPacketComplete;
exports.packetLength = packetLength;
var _sprintfJs = __turbopack_context__.r("[project]/node_modules/sprintf-js/src/sprintf.js [middleware-edge] (ecmascript)");
const HEADER_LENGTH = exports.HEADER_LENGTH = 8;
const TYPE = exports.TYPE = {
    SQL_BATCH: 0x01,
    RPC_REQUEST: 0x03,
    TABULAR_RESULT: 0x04,
    ATTENTION: 0x06,
    BULK_LOAD: 0x07,
    TRANSACTION_MANAGER: 0x0E,
    LOGIN7: 0x10,
    NTLMAUTH_PKT: 0x11,
    PRELOGIN: 0x12,
    FEDAUTH_TOKEN: 0x08
};
const typeByValue = {};
for(const name in TYPE){
    typeByValue[TYPE[name]] = name;
}
const STATUS = {
    NORMAL: 0x00,
    EOM: 0x01,
    IGNORE: 0x02,
    RESETCONNECTION: 0x08,
    RESETCONNECTIONSKIPTRAN: 0x10
};
const OFFSET = exports.OFFSET = {
    Type: 0,
    Status: 1,
    Length: 2,
    SPID: 4,
    PacketID: 6,
    Window: 7
};
const DEFAULT_SPID = 0;
const DEFAULT_PACKETID = 1;
const DEFAULT_WINDOW = 0;
const NL = '\n';
class Packet {
    constructor(typeOrBuffer){
        if (typeOrBuffer instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
            this.buffer = typeOrBuffer;
        } else {
            const type = typeOrBuffer;
            this.buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(HEADER_LENGTH, 0);
            this.buffer.writeUInt8(type, OFFSET.Type);
            this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);
            this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);
            this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);
            this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);
            this.setLength();
        }
    }
    setLength() {
        this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);
    }
    length() {
        return this.buffer.readUInt16BE(OFFSET.Length);
    }
    resetConnection(reset) {
        let status = this.buffer.readUInt8(OFFSET.Status);
        if (reset) {
            status |= STATUS.RESETCONNECTION;
        } else {
            status &= 0xFF - STATUS.RESETCONNECTION;
        }
        this.buffer.writeUInt8(status, OFFSET.Status);
    }
    last(last) {
        let status = this.buffer.readUInt8(OFFSET.Status);
        if (arguments.length > 0) {
            if (last) {
                status |= STATUS.EOM;
            } else {
                status &= 0xFF - STATUS.EOM;
            }
            this.buffer.writeUInt8(status, OFFSET.Status);
        }
        return this.isLast();
    }
    ignore(last) {
        let status = this.buffer.readUInt8(OFFSET.Status);
        if (last) {
            status |= STATUS.IGNORE;
        } else {
            status &= 0xFF - STATUS.IGNORE;
        }
        this.buffer.writeUInt8(status, OFFSET.Status);
    }
    isLast() {
        return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);
    }
    packetId(packetId) {
        if (packetId) {
            this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);
        }
        return this.buffer.readUInt8(OFFSET.PacketID);
    }
    addData(data) {
        this.buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].concat([
            this.buffer,
            data
        ]);
        this.setLength();
        return this;
    }
    data() {
        return this.buffer.slice(HEADER_LENGTH);
    }
    type() {
        return this.buffer.readUInt8(OFFSET.Type);
    }
    statusAsString() {
        const status = this.buffer.readUInt8(OFFSET.Status);
        const statuses = [];
        for(const name in STATUS){
            const value = STATUS[name];
            if (status & value) {
                statuses.push(name);
            } else {
                statuses.push(undefined);
            }
        }
        return statuses.join(' ').trim();
    }
    headerToString(indent = '') {
        const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));
        return indent + text;
    }
    dataToString(indent = '') {
        const BYTES_PER_GROUP = 0x04;
        const CHARS_PER_GROUP = 0x08;
        const BYTES_PER_LINE = 0x20;
        const data = this.data();
        let dataDump = '';
        let chars = '';
        for(let offset = 0; offset < data.length; offset++){
            if (offset % BYTES_PER_LINE === 0) {
                dataDump += indent;
                dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);
            }
            if (data[offset] < 0x20 || data[offset] > 0x7E) {
                chars += '.';
                if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {
                    chars += ' ';
                }
            } else {
                chars += String.fromCharCode(data[offset]);
            }
            if (data[offset] != null) {
                dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);
            }
            if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {
                dataDump += ' ';
            }
            if ((offset + 1) % BYTES_PER_LINE === 0) {
                dataDump += '  ' + chars;
                chars = '';
                if (offset < data.length - 1) {
                    dataDump += NL;
                }
            }
        }
        if (chars.length) {
            dataDump += '  ' + chars;
        }
        return dataDump;
    }
    toString(indent = '') {
        return this.headerToString(indent) + '\n' + this.dataToString(indent + indent);
    }
    payloadString() {
        return '';
    }
}
exports.Packet = Packet;
function isPacketComplete(potentialPacketBuffer) {
    if (potentialPacketBuffer.length < HEADER_LENGTH) {
        return false;
    } else {
        return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);
    }
}
function packetLength(potentialPacketBuffer) {
    return potentialPacketBuffer.readUInt16BE(OFFSET.Length);
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/prelogin-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _sprintfJs = __turbopack_context__.r("[project]/node_modules/sprintf-js/src/sprintf.js [middleware-edge] (ecmascript)");
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const optionBufferSize = 20;
const TOKEN = {
    VERSION: 0x00,
    ENCRYPTION: 0x01,
    INSTOPT: 0x02,
    THREADID: 0x03,
    MARS: 0x04,
    FEDAUTHREQUIRED: 0x06,
    TERMINATOR: 0xFF
};
const ENCRYPT = {
    OFF: 0x00,
    ON: 0x01,
    NOT_SUP: 0x02,
    REQ: 0x03
};
const encryptByValue = {};
for(const name in ENCRYPT){
    const value = ENCRYPT[name];
    encryptByValue[value] = name;
}
const MARS = {
    OFF: 0x00,
    ON: 0x01
};
const marsByValue = {};
for(const name in MARS){
    const value = MARS[name];
    marsByValue[value] = name;
}
/*
  s2.2.6.4
 */ class PreloginPayload {
    constructor(bufferOrOptions = {
        encrypt: false,
        version: {
            major: 0,
            minor: 0,
            build: 0,
            subbuild: 0
        }
    }){
        if (bufferOrOptions instanceof __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"]) {
            this.data = bufferOrOptions;
            this.options = {
                encrypt: false,
                version: {
                    major: 0,
                    minor: 0,
                    build: 0,
                    subbuild: 0
                }
            };
        } else {
            this.options = bufferOrOptions;
            this.createOptions();
        }
        this.extractOptions();
    }
    createOptions() {
        const options = [
            this.createVersionOption(),
            this.createEncryptionOption(),
            this.createInstanceOption(),
            this.createThreadIdOption(),
            this.createMarsOption(),
            this.createFedAuthOption()
        ];
        let length = 0;
        for(let i = 0, len = options.length; i < len; i++){
            const option = options[i];
            length += 5 + option.data.length;
        }
        length++; // terminator
        this.data = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(length, 0);
        let optionOffset = 0;
        let optionDataOffset = 5 * options.length + 1;
        for(let j = 0, len = options.length; j < len; j++){
            const option = options[j];
            this.data.writeUInt8(option.token, optionOffset + 0);
            this.data.writeUInt16BE(optionDataOffset, optionOffset + 1);
            this.data.writeUInt16BE(option.data.length, optionOffset + 3);
            optionOffset += 5;
            option.data.copy(this.data, optionDataOffset);
            optionDataOffset += option.data.length;
        }
        this.data.writeUInt8(TOKEN.TERMINATOR, optionOffset);
    }
    createVersionOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        buffer.writeUInt8(this.options.version.major);
        buffer.writeUInt8(this.options.version.minor);
        buffer.writeUInt16BE(this.options.version.build);
        buffer.writeUInt16BE(this.options.version.subbuild);
        return {
            token: TOKEN.VERSION,
            data: buffer.data
        };
    }
    createEncryptionOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        if (this.options.encrypt) {
            buffer.writeUInt8(ENCRYPT.ON);
        } else {
            buffer.writeUInt8(ENCRYPT.NOT_SUP);
        }
        return {
            token: TOKEN.ENCRYPTION,
            data: buffer.data
        };
    }
    createInstanceOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        buffer.writeUInt8(0x00);
        return {
            token: TOKEN.INSTOPT,
            data: buffer.data
        };
    }
    createThreadIdOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        buffer.writeUInt32BE(0x00);
        return {
            token: TOKEN.THREADID,
            data: buffer.data
        };
    }
    createMarsOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        buffer.writeUInt8(MARS.OFF);
        return {
            token: TOKEN.MARS,
            data: buffer.data
        };
    }
    createFedAuthOption() {
        const buffer = new _writableTrackingBuffer.default(optionBufferSize);
        buffer.writeUInt8(0x01);
        return {
            token: TOKEN.FEDAUTHREQUIRED,
            data: buffer.data
        };
    }
    extractOptions() {
        let offset = 0;
        while(this.data[offset] !== TOKEN.TERMINATOR){
            let dataOffset = this.data.readUInt16BE(offset + 1);
            const dataLength = this.data.readUInt16BE(offset + 3);
            switch(this.data[offset]){
                case TOKEN.VERSION:
                    this.extractVersion(dataOffset);
                    break;
                case TOKEN.ENCRYPTION:
                    this.extractEncryption(dataOffset);
                    break;
                case TOKEN.INSTOPT:
                    this.extractInstance(dataOffset);
                    break;
                case TOKEN.THREADID:
                    if (dataLength > 0) {
                        this.extractThreadId(dataOffset);
                    }
                    break;
                case TOKEN.MARS:
                    this.extractMars(dataOffset);
                    break;
                case TOKEN.FEDAUTHREQUIRED:
                    this.extractFedAuth(dataOffset);
                    break;
            }
            offset += 5;
            dataOffset += dataLength;
        }
    }
    extractVersion(offset) {
        this.version = {
            major: this.data.readUInt8(offset + 0),
            minor: this.data.readUInt8(offset + 1),
            build: this.data.readUInt16BE(offset + 2),
            subbuild: this.data.readUInt16BE(offset + 4)
        };
    }
    extractEncryption(offset) {
        this.encryption = this.data.readUInt8(offset);
        this.encryptionString = encryptByValue[this.encryption];
    }
    extractInstance(offset) {
        this.instance = this.data.readUInt8(offset);
    }
    extractThreadId(offset) {
        this.threadId = this.data.readUInt32BE(offset);
    }
    extractMars(offset) {
        this.mars = this.data.readUInt8(offset);
        this.marsString = marsByValue[this.mars];
    }
    extractFedAuth(offset) {
        this.fedAuthRequired = this.data.readUInt8(offset);
    }
    toString(indent = '') {
        return indent + 'PreLogin - ' + (0, _sprintfJs.sprintf)('version:%d.%d.%d.%d, encryption:0x%02X(%s), instopt:0x%02X, threadId:0x%08X, mars:0x%02X(%s)', this.version.major, this.version.minor, this.version.build, this.version.subbuild, this.encryption ? this.encryption : 0, this.encryptionString ? this.encryptionString : '', this.instance ? this.instance : 0, this.threadId ? this.threadId : 0, this.mars ? this.mars : 0, this.marsString ? this.marsString : '');
    }
}
var _default = exports.default = PreloginPayload;
module.exports = PreloginPayload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/tds-versions.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.versionsByValue = exports.versions = void 0;
const versions = exports.versions = {
    '7_1': 0x71000001,
    '7_2': 0x72090002,
    '7_3_A': 0x730A0003,
    '7_3_B': 0x730B0003,
    '7_4': 0x74000004,
    '8_0': 0x08000000
};
const versionsByValue = exports.versionsByValue = {};
for(const name in versions){
    versionsByValue[versions[name]] = name;
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZXJzaW9ucyIsImV4cG9ydHMiLCJ2ZXJzaW9uc0J5VmFsdWUiLCJuYW1lIl0sInNvdXJjZXMiOlsiLi4vc3JjL3Rkcy12ZXJzaW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbnM6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSB7XG4gICc3XzEnOiAweDcxMDAwMDAxLFxuICAnN18yJzogMHg3MjA5MDAwMixcbiAgJzdfM19BJzogMHg3MzBBMDAwMyxcbiAgJzdfM19CJzogMHg3MzBCMDAwMyxcbiAgJzdfNCc6IDB4NzQwMDAwMDQsXG4gICc4XzAnOiAweDA4MDAwMDAwXG59O1xuXG5leHBvcnQgY29uc3QgdmVyc2lvbnNCeVZhbHVlOiB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9ID0ge307XG5cbmZvciAoY29uc3QgbmFtZSBpbiB2ZXJzaW9ucykge1xuICB2ZXJzaW9uc0J5VmFsdWVbdmVyc2lvbnNbbmFtZV1dID0gbmFtZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsUUFBbUMsR0FBQUMsT0FBQSxDQUFBRCxRQUFBLEdBQUc7RUFDakQsS0FBSyxFQUFFLFVBQVU7RUFDakIsS0FBSyxFQUFFLFVBQVU7RUFDakIsT0FBTyxFQUFFLFVBQVU7RUFDbkIsT0FBTyxFQUFFLFVBQVU7RUFDbkIsS0FBSyxFQUFFLFVBQVU7RUFDakIsS0FBSyxFQUFFO0FBQ1QsQ0FBQztBQUVNLE1BQU1FLGVBQTBDLEdBQUFELE9BQUEsQ0FBQUMsZUFBQSxHQUFHLENBQUMsQ0FBQztBQUU1RCxLQUFLLE1BQU1DLElBQUksSUFBSUgsUUFBUSxFQUFFO0VBQzNCRSxlQUFlLENBQUNGLFFBQVEsQ0FBQ0csSUFBSSxDQUFDLENBQUMsR0FBR0EsSUFBSTtBQUN4QyJ9
}}),
"[project]/node_modules/tedious/lib/login7-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _sprintfJs = __turbopack_context__.r("[project]/node_modules/sprintf-js/src/sprintf.js [middleware-edge] (ecmascript)");
var _tdsVersions = __turbopack_context__.r("[project]/node_modules/tedious/lib/tds-versions.js [middleware-edge] (ecmascript)");
const FLAGS_1 = {
    ENDIAN_LITTLE: 0x00,
    ENDIAN_BIG: 0x01,
    CHARSET_ASCII: 0x00,
    CHARSET_EBCDIC: 0x02,
    FLOAT_IEEE_754: 0x00,
    FLOAT_VAX: 0x04,
    FLOAT_ND5000: 0x08,
    BCP_DUMPLOAD_ON: 0x00,
    BCP_DUMPLOAD_OFF: 0x10,
    USE_DB_ON: 0x00,
    USE_DB_OFF: 0x20,
    INIT_DB_WARN: 0x00,
    INIT_DB_FATAL: 0x40,
    SET_LANG_WARN_OFF: 0x00,
    SET_LANG_WARN_ON: 0x80
};
const FLAGS_2 = {
    INIT_LANG_WARN: 0x00,
    INIT_LANG_FATAL: 0x01,
    ODBC_OFF: 0x00,
    ODBC_ON: 0x02,
    F_TRAN_BOUNDARY: 0x04,
    F_CACHE_CONNECT: 0x08,
    USER_NORMAL: 0x00,
    USER_SERVER: 0x10,
    USER_REMUSER: 0x20,
    USER_SQLREPL: 0x40,
    INTEGRATED_SECURITY_OFF: 0x00,
    INTEGRATED_SECURITY_ON: 0x80
};
const TYPE_FLAGS = {
    SQL_DFLT: 0x00,
    SQL_TSQL: 0x08,
    OLEDB_OFF: 0x00,
    OLEDB_ON: 0x10,
    READ_WRITE_INTENT: 0x00,
    READ_ONLY_INTENT: 0x20
};
const FLAGS_3 = {
    CHANGE_PASSWORD_NO: 0x00,
    CHANGE_PASSWORD_YES: 0x01,
    BINARY_XML: 0x02,
    SPAWN_USER_INSTANCE: 0x04,
    UNKNOWN_COLLATION_HANDLING: 0x08,
    EXTENSION_USED: 0x10
};
const FEDAUTH_OPTIONS = {
    FEATURE_ID: 0x02,
    LIBRARY_SECURITYTOKEN: 0x01,
    LIBRARY_ADAL: 0x02,
    FEDAUTH_YES_ECHO: 0x01,
    FEDAUTH_NO_ECHO: 0x00,
    ADAL_WORKFLOW_USER_PASS: 0x01,
    ADAL_WORKFLOW_INTEGRATED: 0x02
};
const FEATURE_EXT_TERMINATOR = 0xFF;
/*
  s2.2.6.3
 */ class Login7Payload {
    constructor({ tdsVersion, packetSize, clientProgVer, clientPid, connectionId, clientTimeZone, clientLcid }){
        this.tdsVersion = tdsVersion;
        this.packetSize = packetSize;
        this.clientProgVer = clientProgVer;
        this.clientPid = clientPid;
        this.connectionId = connectionId;
        this.clientTimeZone = clientTimeZone;
        this.clientLcid = clientLcid;
        this.readOnlyIntent = false;
        this.initDbFatal = false;
        this.fedAuth = undefined;
        this.userName = undefined;
        this.password = undefined;
        this.serverName = undefined;
        this.appName = undefined;
        this.hostname = undefined;
        this.libraryName = undefined;
        this.language = undefined;
        this.database = undefined;
        this.clientId = undefined;
        this.sspi = undefined;
        this.attachDbFile = undefined;
        this.changePassword = undefined;
    }
    toBuffer() {
        const fixedData = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(94);
        const buffers = [
            fixedData
        ];
        let offset = 0;
        let dataOffset = fixedData.length;
        // Length: 4-byte
        offset = fixedData.writeUInt32LE(0, offset);
        // TDSVersion: 4-byte
        offset = fixedData.writeUInt32LE(this.tdsVersion, offset);
        // PacketSize: 4-byte
        offset = fixedData.writeUInt32LE(this.packetSize, offset);
        // ClientProgVer: 4-byte
        offset = fixedData.writeUInt32LE(this.clientProgVer, offset);
        // ClientPID: 4-byte
        offset = fixedData.writeUInt32LE(this.clientPid, offset);
        // ConnectionID: 4-byte
        offset = fixedData.writeUInt32LE(this.connectionId, offset);
        // OptionFlags1: 1-byte
        offset = fixedData.writeUInt8(this.buildOptionFlags1(), offset);
        // OptionFlags2: 1-byte
        offset = fixedData.writeUInt8(this.buildOptionFlags2(), offset);
        // TypeFlags: 1-byte
        offset = fixedData.writeUInt8(this.buildTypeFlags(), offset);
        // OptionFlags3: 1-byte
        offset = fixedData.writeUInt8(this.buildOptionFlags3(), offset);
        // ClientTimZone: 4-byte
        offset = fixedData.writeInt32LE(this.clientTimeZone, offset);
        // ClientLCID: 4-byte
        offset = fixedData.writeUInt32LE(this.clientLcid, offset);
        // ibHostName: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchHostName: 2-byte
        if (this.hostname) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.hostname, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(dataOffset, offset);
        }
        // ibUserName: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchUserName: 2-byte
        if (this.userName) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.userName, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibPassword: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchPassword: 2-byte
        if (this.password) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.password, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(this.scramblePassword(buffer));
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibAppName: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchAppName: 2-byte
        if (this.appName) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.appName, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibServerName: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchServerName: 2-byte
        if (this.serverName) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.serverName, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // (ibUnused / ibExtension): 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // (cchUnused / cbExtension): 2-byte
        const extensions = this.buildFeatureExt();
        offset = fixedData.writeUInt16LE(4, offset);
        const extensionOffset = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(4);
        extensionOffset.writeUInt32LE(dataOffset += 4, 0);
        dataOffset += extensions.length;
        buffers.push(extensionOffset, extensions);
        // ibCltIntName: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchCltIntName: 2-byte
        if (this.libraryName) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.libraryName, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibLanguage: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchLanguage: 2-byte
        if (this.language) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.language, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibDatabase: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchDatabase: 2-byte
        if (this.database) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.database, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ClientID: 6-byte
        if (this.clientId) {
            this.clientId.copy(fixedData, offset, 0, 6);
        }
        offset += 6;
        // ibSSPI: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cbSSPI: 2-byte
        if (this.sspi) {
            if (this.sspi.length > 65535) {
                offset = fixedData.writeUInt16LE(65535, offset);
            } else {
                offset = fixedData.writeUInt16LE(this.sspi.length, offset);
            }
            buffers.push(this.sspi);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibAtchDBFile: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchAtchDBFile: 2-byte
        if (this.attachDbFile) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.attachDbFile, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // ibChangePassword: 2-byte
        offset = fixedData.writeUInt16LE(dataOffset, offset);
        // cchChangePassword: 2-byte
        if (this.changePassword) {
            const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.changePassword, 'ucs2');
            offset = fixedData.writeUInt16LE(buffer.length / 2, offset);
            dataOffset += buffer.length;
            buffers.push(buffer);
        } else {
            offset = fixedData.writeUInt16LE(0, offset);
        }
        // cbSSPILong: 4-byte
        if (this.sspi && this.sspi.length > 65535) {
            fixedData.writeUInt32LE(this.sspi.length, offset);
        } else {
            fixedData.writeUInt32LE(0, offset);
        }
        const data = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].concat(buffers);
        data.writeUInt32LE(data.length, 0);
        return data;
    }
    buildOptionFlags1() {
        let flags1 = FLAGS_1.ENDIAN_LITTLE | FLAGS_1.CHARSET_ASCII | FLAGS_1.FLOAT_IEEE_754 | FLAGS_1.BCP_DUMPLOAD_OFF | FLAGS_1.USE_DB_OFF | FLAGS_1.SET_LANG_WARN_ON;
        if (this.initDbFatal) {
            flags1 |= FLAGS_1.INIT_DB_FATAL;
        } else {
            flags1 |= FLAGS_1.INIT_DB_WARN;
        }
        return flags1;
    }
    buildFeatureExt() {
        const buffers = [];
        const fedAuth = this.fedAuth;
        if (fedAuth) {
            switch(fedAuth.type){
                case 'ADAL':
                    const buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(7);
                    buffer.writeUInt8(FEDAUTH_OPTIONS.FEATURE_ID, 0);
                    buffer.writeUInt32LE(2, 1);
                    buffer.writeUInt8(FEDAUTH_OPTIONS.LIBRARY_ADAL << 1 | (fedAuth.echo ? FEDAUTH_OPTIONS.FEDAUTH_YES_ECHO : FEDAUTH_OPTIONS.FEDAUTH_NO_ECHO), 5);
                    buffer.writeUInt8(fedAuth.workflow === 'integrated' ? 0x02 : FEDAUTH_OPTIONS.ADAL_WORKFLOW_USER_PASS, 6);
                    buffers.push(buffer);
                    break;
                case 'SECURITYTOKEN':
                    const token = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(fedAuth.fedAuthToken, 'ucs2');
                    const buf = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(10);
                    let offset = 0;
                    offset = buf.writeUInt8(FEDAUTH_OPTIONS.FEATURE_ID, offset);
                    offset = buf.writeUInt32LE(token.length + 4 + 1, offset);
                    offset = buf.writeUInt8(FEDAUTH_OPTIONS.LIBRARY_SECURITYTOKEN << 1 | (fedAuth.echo ? FEDAUTH_OPTIONS.FEDAUTH_YES_ECHO : FEDAUTH_OPTIONS.FEDAUTH_NO_ECHO), offset);
                    buf.writeInt32LE(token.length, offset);
                    buffers.push(buf);
                    buffers.push(token);
                    break;
            }
        }
        if (this.tdsVersion >= _tdsVersions.versions['7_4']) {
            // Signal UTF-8 support: Value 0x0A, bit 0 must be set to 1. Added in TDS 7.4.
            const UTF8_SUPPORT_FEATURE_ID = 0x0a;
            const UTF8_SUPPORT_CLIENT_SUPPORTS_UTF8 = 0x01;
            const buf = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(6);
            buf.writeUInt8(UTF8_SUPPORT_FEATURE_ID, 0);
            buf.writeUInt32LE(1, 1);
            buf.writeUInt8(UTF8_SUPPORT_CLIENT_SUPPORTS_UTF8, 5);
            buffers.push(buf);
        }
        buffers.push(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from([
            FEATURE_EXT_TERMINATOR
        ]));
        return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].concat(buffers);
    }
    buildOptionFlags2() {
        let flags2 = FLAGS_2.INIT_LANG_WARN | FLAGS_2.ODBC_OFF | FLAGS_2.USER_NORMAL;
        if (this.sspi) {
            flags2 |= FLAGS_2.INTEGRATED_SECURITY_ON;
        } else {
            flags2 |= FLAGS_2.INTEGRATED_SECURITY_OFF;
        }
        return flags2;
    }
    buildTypeFlags() {
        let typeFlags = TYPE_FLAGS.SQL_DFLT | TYPE_FLAGS.OLEDB_OFF;
        if (this.readOnlyIntent) {
            typeFlags |= TYPE_FLAGS.READ_ONLY_INTENT;
        } else {
            typeFlags |= TYPE_FLAGS.READ_WRITE_INTENT;
        }
        return typeFlags;
    }
    buildOptionFlags3() {
        return FLAGS_3.CHANGE_PASSWORD_NO | FLAGS_3.UNKNOWN_COLLATION_HANDLING | FLAGS_3.EXTENSION_USED;
    }
    scramblePassword(password) {
        for(let b = 0, len = password.length; b < len; b++){
            let byte = password[b];
            const lowNibble = byte & 0x0f;
            const highNibble = byte >> 4;
            byte = lowNibble << 4 | highNibble;
            byte = byte ^ 0xa5;
            password[b] = byte;
        }
        return password;
    }
    toString(indent = '') {
        return indent + 'Login7 - ' + (0, _sprintfJs.sprintf)('TDS:0x%08X, PacketSize:0x%08X, ClientProgVer:0x%08X, ClientPID:0x%08X, ConnectionID:0x%08X', this.tdsVersion, this.packetSize, this.clientProgVer, this.clientPid, this.connectionId) + '\n' + indent + '         ' + (0, _sprintfJs.sprintf)('Flags1:0x%02X, Flags2:0x%02X, TypeFlags:0x%02X, Flags3:0x%02X, ClientTimezone:%d, ClientLCID:0x%08X', this.buildOptionFlags1(), this.buildOptionFlags2(), this.buildTypeFlags(), this.buildOptionFlags3(), this.clientTimeZone, this.clientLcid) + '\n' + indent + '         ' + (0, _sprintfJs.sprintf)("Hostname:'%s', Username:'%s', Password:'%s', AppName:'%s', ServerName:'%s', LibraryName:'%s'", this.hostname, this.userName, this.password, this.appName, this.serverName, this.libraryName) + '\n' + indent + '         ' + (0, _sprintfJs.sprintf)("Language:'%s', Database:'%s', SSPI:'%s', AttachDbFile:'%s', ChangePassword:'%s'", this.language, this.database, this.sspi, this.attachDbFile, this.changePassword);
    }
}
var _default = exports.default = Login7Payload;
module.exports = Login7Payload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/ntlm-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
var crypto = _interopRequireWildcard(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _jsMd = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/js-md4/src/md4.js [middleware-edge] (ecmascript)"));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class NTLMResponsePayload {
    constructor(loginData){
        this.data = this.createResponse(loginData);
    }
    toString(indent = '') {
        return indent + 'NTLM Auth';
    }
    createResponse(challenge) {
        const client_nonce = this.createClientNonce();
        const lmv2len = 24;
        const ntlmv2len = 16;
        const domain = challenge.domain;
        const username = challenge.userName;
        const password = challenge.password;
        const ntlmData = challenge.ntlmpacket;
        const server_data = ntlmData.target;
        const server_nonce = ntlmData.nonce;
        const bufferLength = 64 + domain.length * 2 + username.length * 2 + lmv2len + ntlmv2len + 8 + 8 + 8 + 4 + server_data.length + 4;
        const data = new _writableTrackingBuffer.default(bufferLength);
        data.position = 0;
        data.writeString('NTLMSSP\u0000', 'utf8');
        data.writeUInt32LE(0x03);
        const baseIdx = 64;
        const dnIdx = baseIdx;
        const unIdx = dnIdx + domain.length * 2;
        const l2Idx = unIdx + username.length * 2;
        const ntIdx = l2Idx + lmv2len;
        data.writeUInt16LE(lmv2len);
        data.writeUInt16LE(lmv2len);
        data.writeUInt32LE(l2Idx);
        data.writeUInt16LE(ntlmv2len);
        data.writeUInt16LE(ntlmv2len);
        data.writeUInt32LE(ntIdx);
        data.writeUInt16LE(domain.length * 2);
        data.writeUInt16LE(domain.length * 2);
        data.writeUInt32LE(dnIdx);
        data.writeUInt16LE(username.length * 2);
        data.writeUInt16LE(username.length * 2);
        data.writeUInt32LE(unIdx);
        data.writeUInt16LE(0);
        data.writeUInt16LE(0);
        data.writeUInt32LE(baseIdx);
        data.writeUInt16LE(0);
        data.writeUInt16LE(0);
        data.writeUInt32LE(baseIdx);
        data.writeUInt16LE(0x8201);
        data.writeUInt16LE(0x08);
        data.writeString(domain, 'ucs2');
        data.writeString(username, 'ucs2');
        const lmv2Data = this.lmv2Response(domain, username, password, server_nonce, client_nonce);
        data.copyFrom(lmv2Data);
        const genTime = new Date().getTime();
        const ntlmDataBuffer = this.ntlmv2Response(domain, username, password, server_nonce, server_data, client_nonce, genTime);
        data.copyFrom(ntlmDataBuffer);
        data.writeUInt32LE(0x0101);
        data.writeUInt32LE(0x0000);
        const timestamp = this.createTimestamp(genTime);
        data.copyFrom(timestamp);
        data.copyFrom(client_nonce);
        data.writeUInt32LE(0x0000);
        data.copyFrom(server_data);
        data.writeUInt32LE(0x0000);
        return data.data;
    }
    createClientNonce() {
        const client_nonce = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(8, 0);
        let nidx = 0;
        while(nidx < 8){
            client_nonce.writeUInt8(Math.ceil(Math.random() * 255), nidx);
            nidx++;
        }
        return client_nonce;
    }
    ntlmv2Response(domain, user, password, serverNonce, targetInfo, clientNonce, mytime) {
        const timestamp = this.createTimestamp(mytime);
        const hash = this.ntv2Hash(domain, user, password);
        const dataLength = 40 + targetInfo.length;
        const data = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(dataLength, 0);
        serverNonce.copy(data, 0, 0, 8);
        data.writeUInt32LE(0x101, 8);
        data.writeUInt32LE(0x0, 12);
        timestamp.copy(data, 16, 0, 8);
        clientNonce.copy(data, 24, 0, 8);
        data.writeUInt32LE(0x0, 32);
        targetInfo.copy(data, 36, 0, targetInfo.length);
        data.writeUInt32LE(0x0, 36 + targetInfo.length);
        return this.hmacMD5(data, hash);
    }
    createTimestamp(time) {
        const tenthsOfAMicrosecond = (BigInt(time) + BigInt(11644473600)) * BigInt(10000000);
        const lo = Number(tenthsOfAMicrosecond & BigInt(0xffffffff));
        const hi = Number(tenthsOfAMicrosecond >> BigInt(32) & BigInt(0xffffffff));
        const result = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(8);
        result.writeUInt32LE(lo, 0);
        result.writeUInt32LE(hi, 4);
        return result;
    }
    lmv2Response(domain, user, password, serverNonce, clientNonce) {
        const hash = this.ntv2Hash(domain, user, password);
        const data = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(serverNonce.length + clientNonce.length, 0);
        serverNonce.copy(data);
        clientNonce.copy(data, serverNonce.length, 0, clientNonce.length);
        const newhash = this.hmacMD5(data, hash);
        const response = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(newhash.length + clientNonce.length, 0);
        newhash.copy(response);
        clientNonce.copy(response, newhash.length, 0, clientNonce.length);
        return response;
    }
    ntv2Hash(domain, user, password) {
        const hash = this.ntHash(password);
        const identity = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(user.toUpperCase() + domain.toUpperCase(), 'ucs2');
        return this.hmacMD5(identity, hash);
    }
    ntHash(text) {
        const unicodeString = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(text, 'ucs2');
        return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(_jsMd.default.arrayBuffer(unicodeString));
    }
    hmacMD5(data, key) {
        return crypto.createHmac('MD5', key).update(data).digest();
    }
}
var _default = exports.default = NTLMResponsePayload;
module.exports = NTLMResponsePayload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/errors.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RequestError = exports.InputError = exports.ConnectionError = void 0;
class ConnectionError extends Error {
    constructor(message, code, options){
        super(message, options);
        this.code = code;
    }
}
exports.ConnectionError = ConnectionError;
class RequestError extends Error {
    constructor(message, code, options){
        super(message, options);
        this.code = code;
    }
}
exports.RequestError = RequestError;
class InputError extends TypeError {
}
exports.InputError = InputError; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb25uZWN0aW9uRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNvZGUiLCJvcHRpb25zIiwiZXhwb3J0cyIsIlJlcXVlc3RFcnJvciIsIklucHV0RXJyb3IiLCJUeXBlRXJyb3IiXSwic291cmNlcyI6WyIuLi9zcmMvZXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDb25uZWN0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGRlY2xhcmUgY29kZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGRlY2xhcmUgaXNUcmFuc2llbnQ6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBjb2RlPzogc3RyaW5nLCBvcHRpb25zPzogRXJyb3JPcHRpb25zKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGRlY2xhcmUgY29kZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGRlY2xhcmUgbnVtYmVyOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIGRlY2xhcmUgc3RhdGU6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgZGVjbGFyZSBjbGFzczogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBkZWNsYXJlIHNlcnZlck5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgZGVjbGFyZSBwcm9jTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBkZWNsYXJlIGxpbmVOdW1iZXI6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcsIG9wdGlvbnM/OiBFcnJvck9wdGlvbnMpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKTtcblxuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElucHV0RXJyb3IgZXh0ZW5kcyBUeXBlRXJyb3Ige31cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsZUFBZSxTQUFTQyxLQUFLLENBQUM7RUFLekNDLFdBQVdBLENBQUNDLE9BQWUsRUFBRUMsSUFBYSxFQUFFQyxPQUFzQixFQUFFO0lBQ2xFLEtBQUssQ0FBQ0YsT0FBTyxFQUFFRSxPQUFPLENBQUM7SUFFdkIsSUFBSSxDQUFDRCxJQUFJLEdBQUdBLElBQUk7RUFDbEI7QUFDRjtBQUFDRSxPQUFBLENBQUFOLGVBQUEsR0FBQUEsZUFBQTtBQUVNLE1BQU1PLFlBQVksU0FBU04sS0FBSyxDQUFDO0VBVXRDQyxXQUFXQSxDQUFDQyxPQUFlLEVBQUVDLElBQWEsRUFBRUMsT0FBc0IsRUFBRTtJQUNsRSxLQUFLLENBQUNGLE9BQU8sRUFBRUUsT0FBTyxDQUFDO0lBRXZCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQSxJQUFJO0VBQ2xCO0FBQ0Y7QUFBQ0UsT0FBQSxDQUFBQyxZQUFBLEdBQUFBLFlBQUE7QUFFTSxNQUFNQyxVQUFVLFNBQVNDLFNBQVMsQ0FBQztBQUFFSCxPQUFBLENBQUFFLFVBQUEsR0FBQUEsVUFBQSJ9
}}),
"[project]/node_modules/tedious/lib/always-encrypted/types.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SQLServerStatementColumnEncryptionSetting = exports.SQLServerEncryptionType = exports.DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet1 = void 0;
// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.
// Copyright (c) 2019 Microsoft Corporation
let SQLServerEncryptionType = exports.SQLServerEncryptionType = /*#__PURE__*/ function(SQLServerEncryptionType) {
    SQLServerEncryptionType[SQLServerEncryptionType["Deterministic"] = 1] = "Deterministic";
    SQLServerEncryptionType[SQLServerEncryptionType["Randomized"] = 2] = "Randomized";
    SQLServerEncryptionType[SQLServerEncryptionType["PlainText"] = 0] = "PlainText";
    return SQLServerEncryptionType;
}({});
// Fields in the first resultset of "sp_describe_parameter_encryption"
// We expect the server to return the fields in the resultset in the same order as mentioned below.
// If the server changes the below order, then transparent parameter encryption will break.
let DescribeParameterEncryptionResultSet1 = exports.DescribeParameterEncryptionResultSet1 = /*#__PURE__*/ function(DescribeParameterEncryptionResultSet1) {
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyOrdinal"] = 0] = "KeyOrdinal";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["DbId"] = 1] = "DbId";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyId"] = 2] = "KeyId";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyVersion"] = 3] = "KeyVersion";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyMdVersion"] = 4] = "KeyMdVersion";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["EncryptedKey"] = 5] = "EncryptedKey";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["ProviderName"] = 6] = "ProviderName";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyPath"] = 7] = "KeyPath";
    DescribeParameterEncryptionResultSet1[DescribeParameterEncryptionResultSet1["KeyEncryptionAlgorithm"] = 8] = "KeyEncryptionAlgorithm";
    return DescribeParameterEncryptionResultSet1;
}({}); // Fields in the second resultset of "sp_describe_parameter_encryption"
// We expect the server to return the fields in the resultset in the same order as mentioned below.
// If the server changes the below order, then transparent parameter encryption will break.
let DescribeParameterEncryptionResultSet2 = exports.DescribeParameterEncryptionResultSet2 = /*#__PURE__*/ function(DescribeParameterEncryptionResultSet2) {
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ParameterOrdinal"] = 0] = "ParameterOrdinal";
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ParameterName"] = 1] = "ParameterName";
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncryptionAlgorithm"] = 2] = "ColumnEncryptionAlgorithm";
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncrytionType"] = 3] = "ColumnEncrytionType";
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["ColumnEncryptionKeyOrdinal"] = 4] = "ColumnEncryptionKeyOrdinal";
    DescribeParameterEncryptionResultSet2[DescribeParameterEncryptionResultSet2["NormalizationRuleVersion"] = 5] = "NormalizationRuleVersion";
    return DescribeParameterEncryptionResultSet2;
}({});
let SQLServerStatementColumnEncryptionSetting = exports.SQLServerStatementColumnEncryptionSetting = /*#__PURE__*/ function(SQLServerStatementColumnEncryptionSetting) {
    SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["UseConnectionSetting"] = 0] = "UseConnectionSetting";
    SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["Enabled"] = 1] = "Enabled";
    SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["ResultSetOnly"] = 2] = "ResultSetOnly";
    SQLServerStatementColumnEncryptionSetting[SQLServerStatementColumnEncryptionSetting["Disabled"] = 3] = "Disabled";
    return SQLServerStatementColumnEncryptionSetting;
}({}); //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTUUxTZXJ2ZXJFbmNyeXB0aW9uVHlwZSIsImV4cG9ydHMiLCJEZXNjcmliZVBhcmFtZXRlckVuY3J5cHRpb25SZXN1bHRTZXQxIiwiRGVzY3JpYmVQYXJhbWV0ZXJFbmNyeXB0aW9uUmVzdWx0U2V0MiIsIlNRTFNlcnZlclN0YXRlbWVudENvbHVtbkVuY3J5cHRpb25TZXR0aW5nIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Fsd2F5cy1lbmNyeXB0ZWQvdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBjb2RlIGlzIGJhc2VkIG9uIHRoZSBgbXNzcWwtamRiY2AgbGlicmFyeSBwdWJsaXNoZWQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgb2YgTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTkgTWljcm9zb2Z0IENvcnBvcmF0aW9uXG5cbmltcG9ydCB7IENFS0VudHJ5IH0gZnJvbSAnLi9jZWstZW50cnknO1xuaW1wb3J0IHsgdHlwZSBCYXNlTWV0YWRhdGEgfSBmcm9tICcuLi9tZXRhZGF0YS1wYXJzZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVuY3J5cHRpb25LZXlJbmZvIHtcbiAgZW5jcnlwdGVkS2V5OiBCdWZmZXI7XG4gIGRiSWQ6IG51bWJlcjtcbiAga2V5SWQ6IG51bWJlcjtcbiAga2V5VmVyc2lvbjogbnVtYmVyO1xuICBtZFZlcnNpb246IEJ1ZmZlcjtcbiAga2V5UGF0aDogc3RyaW5nO1xuICBrZXlTdG9yZU5hbWU6IHN0cmluZztcbiAgYWxnb3JpdGhtTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZW51bSBTUUxTZXJ2ZXJFbmNyeXB0aW9uVHlwZSB7XG4gIERldGVybWluaXN0aWMgPSAxLFxuICBSYW5kb21pemVkID0gMixcbiAgUGxhaW5UZXh0ID0gMCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbmNyeXB0aW9uQWxnb3JpdGhtIHtcbiAgZW5jcnlwdERhdGE6IChwbGFpblRleHQ6IEJ1ZmZlcikgPT4gQnVmZmVyO1xuICBkZWNyeXB0RGF0YTogKGNpcGhlclRleHQ6IEJ1ZmZlcikgPT4gQnVmZmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENyeXB0b01ldGFkYXRhIHtcbiAgY2VrRW50cnk/OiBDRUtFbnRyeTtcbiAgY2lwaGVyQWxnb3JpdGhtSWQ6IG51bWJlcjtcbiAgY2lwaGVyQWxnb3JpdGhtTmFtZT86IHN0cmluZztcbiAgbm9ybWFsaXphdGlvblJ1bGVWZXJzaW9uOiBCdWZmZXI7XG4gIGVuY3J5cHRpb25LZXlJbmZvPzogRW5jcnlwdGlvbktleUluZm87XG4gIG9yZGluYWw6IG51bWJlcjtcbiAgZW5jcnlwdGlvblR5cGU6IFNRTFNlcnZlckVuY3J5cHRpb25UeXBlO1xuICBjaXBoZXJBbGdvcml0aG0/OiBFbmNyeXB0aW9uQWxnb3JpdGhtO1xuICBiYXNlVHlwZUluZm8/OiBCYXNlTWV0YWRhdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzaE1hcDxUPiB7XG4gIFtoYXNoOiBzdHJpbmddOiBUO1xufVxuXG5cbi8vIEZpZWxkcyBpbiB0aGUgZmlyc3QgcmVzdWx0c2V0IG9mIFwic3BfZGVzY3JpYmVfcGFyYW1ldGVyX2VuY3J5cHRpb25cIlxuLy8gV2UgZXhwZWN0IHRoZSBzZXJ2ZXIgdG8gcmV0dXJuIHRoZSBmaWVsZHMgaW4gdGhlIHJlc3VsdHNldCBpbiB0aGUgc2FtZSBvcmRlciBhcyBtZW50aW9uZWQgYmVsb3cuXG4vLyBJZiB0aGUgc2VydmVyIGNoYW5nZXMgdGhlIGJlbG93IG9yZGVyLCB0aGVuIHRyYW5zcGFyZW50IHBhcmFtZXRlciBlbmNyeXB0aW9uIHdpbGwgYnJlYWsuXG5leHBvcnQgZW51bSBEZXNjcmliZVBhcmFtZXRlckVuY3J5cHRpb25SZXN1bHRTZXQxIHtcbiAgS2V5T3JkaW5hbCxcbiAgRGJJZCxcbiAgS2V5SWQsXG4gIEtleVZlcnNpb24sXG4gIEtleU1kVmVyc2lvbixcbiAgRW5jcnlwdGVkS2V5LFxuICBQcm92aWRlck5hbWUsXG4gIEtleVBhdGgsXG4gIEtleUVuY3J5cHRpb25BbGdvcml0aG1cbn1cblxuXG4vLyBGaWVsZHMgaW4gdGhlIHNlY29uZCByZXN1bHRzZXQgb2YgXCJzcF9kZXNjcmliZV9wYXJhbWV0ZXJfZW5jcnlwdGlvblwiXG4vLyBXZSBleHBlY3QgdGhlIHNlcnZlciB0byByZXR1cm4gdGhlIGZpZWxkcyBpbiB0aGUgcmVzdWx0c2V0IGluIHRoZSBzYW1lIG9yZGVyIGFzIG1lbnRpb25lZCBiZWxvdy5cbi8vIElmIHRoZSBzZXJ2ZXIgY2hhbmdlcyB0aGUgYmVsb3cgb3JkZXIsIHRoZW4gdHJhbnNwYXJlbnQgcGFyYW1ldGVyIGVuY3J5cHRpb24gd2lsbCBicmVhay5cbmV4cG9ydCBlbnVtIERlc2NyaWJlUGFyYW1ldGVyRW5jcnlwdGlvblJlc3VsdFNldDIge1xuICBQYXJhbWV0ZXJPcmRpbmFsLFxuICBQYXJhbWV0ZXJOYW1lLFxuICBDb2x1bW5FbmNyeXB0aW9uQWxnb3JpdGhtLFxuICBDb2x1bW5FbmNyeXRpb25UeXBlLFxuICBDb2x1bW5FbmNyeXB0aW9uS2V5T3JkaW5hbCxcbiAgTm9ybWFsaXphdGlvblJ1bGVWZXJzaW9uXG59XG5cbmV4cG9ydCBlbnVtIFNRTFNlcnZlclN0YXRlbWVudENvbHVtbkVuY3J5cHRpb25TZXR0aW5nIHtcbiAgLyoqXG4gICAqIGlmIFwiQ29sdW1uIEVuY3J5cHRpb24gU2V0dGluZz1FbmFibGVkXCIgaW4gdGhlIGNvbm5lY3Rpb24gc3RyaW5nLCB1c2UgRW5hYmxlZC4gT3RoZXJ3aXNlLCBtYXBzIHRvIERpc2FibGVkLlxuICAgKi9cbiAgVXNlQ29ubmVjdGlvblNldHRpbmcsXG4gIC8qKlxuICAgKiBFbmFibGVzIFRDRSBmb3IgdGhlIGNvbW1hbmQuIE92ZXJyaWRlcyB0aGUgY29ubmVjdGlvbiBsZXZlbCBzZXR0aW5nIGZvciB0aGlzIGNvbW1hbmQuXG4gICAqL1xuICBFbmFibGVkLFxuICAvKipcbiAgICogUGFyYW1ldGVycyB3aWxsIG5vdCBiZSBlbmNyeXB0ZWQsIG9ubHkgdGhlIFJlc3VsdFNldCB3aWxsIGJlIGRlY3J5cHRlZC4gVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gZm9yIHF1ZXJpZXMgdGhhdFxuICAgKiBkbyBub3QgcGFzcyBhbnkgZW5jcnlwdGVkIGlucHV0IHBhcmFtZXRlcnMuIE92ZXJyaWRlcyB0aGUgY29ubmVjdGlvbiBsZXZlbCBzZXR0aW5nIGZvciB0aGlzIGNvbW1hbmQuXG4gICAqL1xuICBSZXN1bHRTZXRPbmx5LFxuICAvKipcbiAgICogRGlzYWJsZXMgVENFIGZvciB0aGUgY29tbWFuZC5PdmVycmlkZXMgdGhlIGNvbm5lY3Rpb24gbGV2ZWwgc2V0dGluZyBmb3IgdGhpcyBjb21tYW5kLlxuICAgKi9cbiAgRGlzYWJsZWQsXG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFBQSxJQWdCWUEsdUJBQXVCLEdBQUFDLE9BQUEsQ0FBQUQsdUJBQUEsMEJBQXZCQSx1QkFBdUI7RUFBdkJBLHVCQUF1QixDQUF2QkEsdUJBQXVCO0VBQXZCQSx1QkFBdUIsQ0FBdkJBLHVCQUF1QjtFQUF2QkEsdUJBQXVCLENBQXZCQSx1QkFBdUI7RUFBQSxPQUF2QkEsdUJBQXVCO0FBQUE7QUE0Qm5DO0FBQ0E7QUFDQTtBQUFBLElBQ1lFLHFDQUFxQyxHQUFBRCxPQUFBLENBQUFDLHFDQUFBLDBCQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQUEsT0FBckNBLHFDQUFxQztBQUFBLE9BYWpEO0FBQ0E7QUFDQTtBQUFBLElBQ1lDLHFDQUFxQyxHQUFBRixPQUFBLENBQUFFLHFDQUFBLDBCQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQXJDQSxxQ0FBcUMsQ0FBckNBLHFDQUFxQztFQUFyQ0EscUNBQXFDLENBQXJDQSxxQ0FBcUM7RUFBckNBLHFDQUFxQyxDQUFyQ0EscUNBQXFDO0VBQUEsT0FBckNBLHFDQUFxQztBQUFBO0FBQUEsSUFTckNDLHlDQUF5QyxHQUFBSCxPQUFBLENBQUFHLHlDQUFBLDBCQUF6Q0EseUNBQXlDO0VBQXpDQSx5Q0FBeUMsQ0FBekNBLHlDQUF5QztFQUF6Q0EseUNBQXlDLENBQXpDQSx5Q0FBeUM7RUFBekNBLHlDQUF5QyxDQUF6Q0EseUNBQXlDO0VBQXpDQSx5Q0FBeUMsQ0FBekNBLHlDQUF5QztFQUFBLE9BQXpDQSx5Q0FBeUM7QUFBQSJ9
}}),
"[project]/node_modules/tedious/lib/request.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _events = __turbopack_context__.r("[externals]/node:events [external] (node:events, cjs)");
var _errors = __turbopack_context__.r("[project]/node_modules/tedious/lib/errors.js [middleware-edge] (ecmascript)");
var _types = __turbopack_context__.r("[project]/node_modules/tedious/lib/always-encrypted/types.js [middleware-edge] (ecmascript)");
/**
 * The callback is called when the request has completed, either successfully or with an error.
 * If an error occurs during execution of the statement(s), then `err` will describe the error.
 *
 * As only one request at a time may be executed on a connection, another request should not
 * be initiated until this callback is called.
 *
 * This callback is called before `requestCompleted` is emitted.
 */ /**
 * ```js
 * const { Request } = require('tedious');
 * const request = new Request("select 42, 'hello world'", (err, rowCount) {
 *   // Request completion callback...
 * });
 * connection.execSql(request);
 * ```
 */ class Request extends _events.EventEmitter {
    /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * This event, describing result set columns, will be emitted before row
   * events are emitted. This event may be emitted multiple times when more
   * than one recordset is produced by the statement.
   *
   * An array like object, where the columns can be accessed either by index
   * or name. Columns with a name that is an integer are not accessible by name,
   * as it would be interpreted as an array index.
   */ /**
   * The request has been prepared and can be used in subsequent calls to execute and unprepare.
   */ /**
   * The request encountered an error and has not been prepared.
   */ /**
   * A row resulting from execution of the SQL statement.
   */ /**
   * All rows from a result set have been provided (through `row` events).
   *
   * This token is used to indicate the completion of a SQL statement.
   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.
   * An `done` event is emitted for each SQL statement in the SQL batch except variable declarations.
   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.
   *
   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.
   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.
   */ /**
   * `request.on('doneInProc', function (rowCount, more, rows) { });`
   *
   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement
   * in a stored procedure have been provided (through `row` events).
   *
   * This event may also occur when executing multiple calls with the same query using [[execSql]].
   */ /**
   * Indicates the completion status of a stored procedure. This is also generated for stored procedures
   * executed through SQL statements.\
   * This event may also occur when executing multiple calls with the same query using [[execSql]].
   */ /**
   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).
   * See also `Using Parameters`.
   */ /**
   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.
   */ on(event, listener) {
        return super.on(event, listener);
    }
    /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ /**
   * @private
   */ emit(event, ...args) {
        return super.emit(event, ...args);
    }
    /**
   * @param sqlTextOrProcedure
   *   The SQL statement to be executed
   *
   * @param callback
   *   The callback to execute once the request has been fully completed.
   */ constructor(sqlTextOrProcedure, callback, options){
        super();
        this.sqlTextOrProcedure = sqlTextOrProcedure;
        this.parameters = [];
        this.parametersByName = {};
        this.preparing = false;
        this.handle = undefined;
        this.canceled = false;
        this.paused = false;
        this.error = undefined;
        this.connection = undefined;
        this.timeout = undefined;
        this.userCallback = callback;
        this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;
        this.cryptoMetadataLoaded = false;
        this.callback = function(err, rowCount, rows) {
            if (this.preparing) {
                this.preparing = false;
                if (err) {
                    this.emit('error', err);
                } else {
                    this.emit('prepared');
                }
            } else {
                this.userCallback(err, rowCount, rows);
                this.emit('requestCompleted');
            }
        };
    }
    /**
   * @param name
   *   The parameter name. This should correspond to a parameter in the SQL,
   *   or a parameter that a called procedure expects. The name should not start with `@`.
   *
   * @param type
   *   One of the supported data types.
   *
   * @param value
   *   The value that the parameter is to be given. The Javascript type of the
   *   argument should match that documented for data types.
   *
   * @param options
   *   Additional type options. Optional.
   */ // TODO: `type` must be a valid TDS value type
    addParameter(name, type, value, options) {
        const { output = false, length, precision, scale } = options ?? {};
        const parameter = {
            type: type,
            name: name,
            value: value,
            output: output,
            length: length,
            precision: precision,
            scale: scale
        };
        this.parameters.push(parameter);
        this.parametersByName[name] = parameter;
    }
    /**
   * @param name
   *   The parameter name. This should correspond to a parameter in the SQL,
   *   or a parameter that a called procedure expects.
   *
   * @param type
   *   One of the supported data types.
   *
   * @param value
   *   The value that the parameter is to be given. The Javascript type of the
   *   argument should match that documented for data types
   *
   * @param options
   *   Additional type options. Optional.
   */ addOutputParameter(name, type, value, options) {
        this.addParameter(name, type, value, {
            ...options,
            output: true
        });
    }
    /**
   * @private
   */ makeParamsParameter(parameters) {
        let paramsParameter = '';
        for(let i = 0, len = parameters.length; i < len; i++){
            const parameter = parameters[i];
            if (paramsParameter.length > 0) {
                paramsParameter += ', ';
            }
            paramsParameter += '@' + parameter.name + ' ';
            paramsParameter += parameter.type.declaration(parameter);
            if (parameter.output) {
                paramsParameter += ' OUTPUT';
            }
        }
        return paramsParameter;
    }
    /**
   * @private
   */ validateParameters(collation) {
        for(let i = 0, len = this.parameters.length; i < len; i++){
            const parameter = this.parameters[i];
            try {
                parameter.value = parameter.type.validate(parameter.value, collation);
            } catch (error) {
                throw new _errors.RequestError('Validation failed for parameter \'' + parameter.name + '\'. ' + error.message, 'EPARAM', {
                    cause: error
                });
            }
        }
    }
    /**
   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.
   * If this request is already in a paused state, calling [[pause]] has no effect.
   */ pause() {
        if (this.paused) {
            return;
        }
        this.emit('pause');
        this.paused = true;
    }
    /**
   * Resumes the flow of data from the database.
   * If this request is not in a paused state, calling [[resume]] has no effect.
   */ resume() {
        if (!this.paused) {
            return;
        }
        this.paused = false;
        this.emit('resume');
    }
    /**
   * Cancels a request while waiting for a server response.
   */ cancel() {
        if (this.canceled) {
            return;
        }
        this.canceled = true;
        this.emit('cancel');
    }
    /**
   * Sets a timeout for this request.
   *
   * @param timeout
   *   The number of milliseconds before the request is considered failed,
   *   or `0` for no timeout. When no timeout is set for the request,
   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.
   */ setTimeout(timeout) {
        this.timeout = timeout;
    }
}
var _default = exports.default = Request;
module.exports = Request; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/all-headers.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.writeToTrackingBuffer = writeToTrackingBuffer;
const TYPE = {
    QUERY_NOTIFICATIONS: 1,
    TXN_DESCRIPTOR: 2,
    TRACE_ACTIVITY: 3
};
const TXNDESCRIPTOR_HEADER_DATA_LEN = 4 + 8;
const TXNDESCRIPTOR_HEADER_LEN = 4 + 2 + TXNDESCRIPTOR_HEADER_DATA_LEN;
function writeToTrackingBuffer(buffer, txnDescriptor, outstandingRequestCount) {
    buffer.writeUInt32LE(0);
    buffer.writeUInt32LE(TXNDESCRIPTOR_HEADER_LEN);
    buffer.writeUInt16LE(TYPE.TXN_DESCRIPTOR);
    buffer.writeBuffer(txnDescriptor);
    buffer.writeUInt32LE(outstandingRequestCount);
    const data = buffer.data;
    data.writeUInt32LE(data.length, 0);
    return buffer;
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUWVBFIiwiUVVFUllfTk9USUZJQ0FUSU9OUyIsIlRYTl9ERVNDUklQVE9SIiwiVFJBQ0VfQUNUSVZJVFkiLCJUWE5ERVNDUklQVE9SX0hFQURFUl9EQVRBX0xFTiIsIlRYTkRFU0NSSVBUT1JfSEVBREVSX0xFTiIsIndyaXRlVG9UcmFja2luZ0J1ZmZlciIsImJ1ZmZlciIsInR4bkRlc2NyaXB0b3IiLCJvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVCdWZmZXIiLCJkYXRhIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vc3JjL2FsbC1oZWFkZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXcml0YWJsZVRyYWNraW5nQnVmZmVyIGZyb20gJy4vdHJhY2tpbmctYnVmZmVyL3dyaXRhYmxlLXRyYWNraW5nLWJ1ZmZlcic7XG5cbmNvbnN0IFRZUEUgPSB7XG4gIFFVRVJZX05PVElGSUNBVElPTlM6IDEsXG4gIFRYTl9ERVNDUklQVE9SOiAyLFxuICBUUkFDRV9BQ1RJVklUWTogM1xufTtcblxuY29uc3QgVFhOREVTQ1JJUFRPUl9IRUFERVJfREFUQV9MRU4gPSA0ICsgODtcblxuY29uc3QgVFhOREVTQ1JJUFRPUl9IRUFERVJfTEVOID0gNCArIDIgKyBUWE5ERVNDUklQVE9SX0hFQURFUl9EQVRBX0xFTjtcblxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVG9UcmFja2luZ0J1ZmZlcihidWZmZXI6IFdyaXRhYmxlVHJhY2tpbmdCdWZmZXIsIHR4bkRlc2NyaXB0b3I6IEJ1ZmZlciwgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQ6IG51bWJlcikge1xuICBidWZmZXIud3JpdGVVSW50MzJMRSgwKTtcbiAgYnVmZmVyLndyaXRlVUludDMyTEUoVFhOREVTQ1JJUFRPUl9IRUFERVJfTEVOKTtcbiAgYnVmZmVyLndyaXRlVUludDE2TEUoVFlQRS5UWE5fREVTQ1JJUFRPUik7XG4gIGJ1ZmZlci53cml0ZUJ1ZmZlcih0eG5EZXNjcmlwdG9yKTtcbiAgYnVmZmVyLndyaXRlVUludDMyTEUob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQpO1xuXG4gIGNvbnN0IGRhdGEgPSBidWZmZXIuZGF0YTtcbiAgZGF0YS53cml0ZVVJbnQzMkxFKGRhdGEubGVuZ3RoLCAwKTtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHO0VBQ1hDLG1CQUFtQixFQUFFLENBQUM7RUFDdEJDLGNBQWMsRUFBRSxDQUFDO0VBQ2pCQyxjQUFjLEVBQUU7QUFDbEIsQ0FBQztBQUVELE1BQU1DLDZCQUE2QixHQUFHLENBQUMsR0FBRyxDQUFDO0FBRTNDLE1BQU1DLHdCQUF3QixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUdELDZCQUE2QjtBQUUvRCxTQUFTRSxxQkFBcUJBLENBQUNDLE1BQThCLEVBQUVDLGFBQXFCLEVBQUVDLHVCQUErQixFQUFFO0VBQzVIRixNQUFNLENBQUNHLGFBQWEsQ0FBQyxDQUFDLENBQUM7RUFDdkJILE1BQU0sQ0FBQ0csYUFBYSxDQUFDTCx3QkFBd0IsQ0FBQztFQUM5Q0UsTUFBTSxDQUFDSSxhQUFhLENBQUNYLElBQUksQ0FBQ0UsY0FBYyxDQUFDO0VBQ3pDSyxNQUFNLENBQUNLLFdBQVcsQ0FBQ0osYUFBYSxDQUFDO0VBQ2pDRCxNQUFNLENBQUNHLGFBQWEsQ0FBQ0QsdUJBQXVCLENBQUM7RUFFN0MsTUFBTUksSUFBSSxHQUFHTixNQUFNLENBQUNNLElBQUk7RUFDeEJBLElBQUksQ0FBQ0gsYUFBYSxDQUFDRyxJQUFJLENBQUNDLE1BQU0sRUFBRSxDQUFDLENBQUM7RUFDbEMsT0FBT1AsTUFBTTtBQUNmIn0=
}}),
"[project]/node_modules/tedious/lib/rpcrequest-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
var _allHeaders = __turbopack_context__.r("[project]/node_modules/tedious/lib/all-headers.js [middleware-edge] (ecmascript)");
var _errors = __turbopack_context__.r("[project]/node_modules/tedious/lib/errors.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// const OPTION = {
//   WITH_RECOMPILE: 0x01,
//   NO_METADATA: 0x02,
//   REUSE_METADATA: 0x04
// };
const STATUS = {
    BY_REF_VALUE: 0x01,
    DEFAULT_VALUE: 0x02
};
/*
  s2.2.6.5
 */ class RpcRequestPayload {
    constructor(procedure, parameters, txnDescriptor, options, collation){
        this.procedure = procedure;
        this.parameters = parameters;
        this.options = options;
        this.txnDescriptor = txnDescriptor;
        this.collation = collation;
    }
    [Symbol.iterator]() {
        return this.generateData();
    }
    *generateData() {
        const buffer = new _writableTrackingBuffer.default(500);
        if (this.options.tdsVersion >= '7_2') {
            const outstandingRequestCount = 1;
            (0, _allHeaders.writeToTrackingBuffer)(buffer, this.txnDescriptor, outstandingRequestCount);
        }
        if (typeof this.procedure === 'string') {
            buffer.writeUsVarchar(this.procedure);
        } else {
            buffer.writeUShort(0xFFFF);
            buffer.writeUShort(this.procedure);
        }
        const optionFlags = 0;
        buffer.writeUInt16LE(optionFlags);
        yield buffer.data;
        const parametersLength = this.parameters.length;
        for(let i = 0; i < parametersLength; i++){
            yield* this.generateParameterData(this.parameters[i]);
        }
    }
    toString(indent = '') {
        return indent + ('RPC Request - ' + this.procedure);
    }
    *generateParameterData(parameter) {
        const buffer = new _writableTrackingBuffer.default(1 + 2 + __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].byteLength(parameter.name, 'ucs-2') + 1);
        if (parameter.name) {
            buffer.writeBVarchar('@' + parameter.name);
        } else {
            buffer.writeBVarchar('');
        }
        let statusFlags = 0;
        if (parameter.output) {
            statusFlags |= STATUS.BY_REF_VALUE;
        }
        buffer.writeUInt8(statusFlags);
        yield buffer.data;
        const param = {
            value: parameter.value
        };
        const type = parameter.type;
        if ((type.id & 0x30) === 0x20) {
            if (parameter.length) {
                param.length = parameter.length;
            } else if (type.resolveLength) {
                param.length = type.resolveLength(parameter);
            }
        }
        if (parameter.precision) {
            param.precision = parameter.precision;
        } else if (type.resolvePrecision) {
            param.precision = type.resolvePrecision(parameter);
        }
        if (parameter.scale) {
            param.scale = parameter.scale;
        } else if (type.resolveScale) {
            param.scale = type.resolveScale(parameter);
        }
        if (this.collation) {
            param.collation = this.collation;
        }
        yield type.generateTypeInfo(param, this.options);
        yield type.generateParameterLength(param, this.options);
        try {
            yield* type.generateParameterData(param, this.options);
        } catch (error) {
            throw new _errors.InputError(`Input parameter '${parameter.name}' could not be validated`, {
                cause: error
            });
        }
    }
}
var _default = exports.default = RpcRequestPayload;
module.exports = RpcRequestPayload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/sqlbatch-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
var _allHeaders = __turbopack_context__.r("[project]/node_modules/tedious/lib/all-headers.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/*
  s2.2.6.6
 */ class SqlBatchPayload {
    constructor(sqlText, txnDescriptor, options){
        this.sqlText = sqlText;
        this.txnDescriptor = txnDescriptor;
        this.options = options;
    }
    *[Symbol.iterator]() {
        if (this.options.tdsVersion >= '7_2') {
            const buffer = new _writableTrackingBuffer.default(18, 'ucs2');
            const outstandingRequestCount = 1;
            (0, _allHeaders.writeToTrackingBuffer)(buffer, this.txnDescriptor, outstandingRequestCount);
            yield buffer.data;
        }
        yield __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(this.sqlText, 'ucs2');
    }
    toString(indent = '') {
        return indent + ('SQL Batch - ' + this.sqlText);
    }
}
var _default = exports.default = SqlBatchPayload;
module.exports = SqlBatchPayload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd3JpdGFibGVUcmFja2luZ0J1ZmZlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2FsbEhlYWRlcnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlNxbEJhdGNoUGF5bG9hZCIsImNvbnN0cnVjdG9yIiwic3FsVGV4dCIsInR4bkRlc2NyaXB0b3IiLCJvcHRpb25zIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0ZHNWZXJzaW9uIiwiYnVmZmVyIiwiV3JpdGFibGVUcmFja2luZ0J1ZmZlciIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwid3JpdGVUb1RyYWNraW5nQnVmZmVyIiwiZGF0YSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImluZGVudCIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9zcWxiYXRjaC1wYXlsb2FkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXcml0YWJsZVRyYWNraW5nQnVmZmVyIGZyb20gJy4vdHJhY2tpbmctYnVmZmVyL3dyaXRhYmxlLXRyYWNraW5nLWJ1ZmZlcic7XG5pbXBvcnQgeyB3cml0ZVRvVHJhY2tpbmdCdWZmZXIgfSBmcm9tICcuL2FsbC1oZWFkZXJzJztcblxuLypcbiAgczIuMi42LjZcbiAqL1xuY2xhc3MgU3FsQmF0Y2hQYXlsb2FkIGltcGxlbWVudHMgSXRlcmFibGU8QnVmZmVyPiB7XG4gIGRlY2xhcmUgc3FsVGV4dDogc3RyaW5nO1xuICBkZWNsYXJlIHR4bkRlc2NyaXB0b3I6IEJ1ZmZlcjtcbiAgZGVjbGFyZSBvcHRpb25zOiB7IHRkc1ZlcnNpb246IHN0cmluZyB9O1xuXG4gIGNvbnN0cnVjdG9yKHNxbFRleHQ6IHN0cmluZywgdHhuRGVzY3JpcHRvcjogQnVmZmVyLCBvcHRpb25zOiB7IHRkc1ZlcnNpb246IHN0cmluZyB9KSB7XG4gICAgdGhpcy5zcWxUZXh0ID0gc3FsVGV4dDtcbiAgICB0aGlzLnR4bkRlc2NyaXB0b3IgPSB0eG5EZXNjcmlwdG9yO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50ZHNWZXJzaW9uID49ICc3XzInKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBuZXcgV3JpdGFibGVUcmFja2luZ0J1ZmZlcigxOCwgJ3VjczInKTtcbiAgICAgIGNvbnN0IG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMTtcblxuICAgICAgd3JpdGVUb1RyYWNraW5nQnVmZmVyKGJ1ZmZlciwgdGhpcy50eG5EZXNjcmlwdG9yLCBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCk7XG5cbiAgICAgIHlpZWxkIGJ1ZmZlci5kYXRhO1xuICAgIH1cblxuICAgIHlpZWxkIEJ1ZmZlci5mcm9tKHRoaXMuc3FsVGV4dCwgJ3VjczInKTtcbiAgfVxuXG4gIHRvU3RyaW5nKGluZGVudCA9ICcnKSB7XG4gICAgcmV0dXJuIGluZGVudCArICgnU1FMIEJhdGNoIC0gJyArIHRoaXMuc3FsVGV4dCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3FsQmF0Y2hQYXlsb2FkO1xubW9kdWxlLmV4cG9ydHMgPSBTcWxCYXRjaFBheWxvYWQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLHVCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFBc0QsU0FBQUQsdUJBQUFHLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFdEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTUcsZUFBZSxDQUE2QjtFQUtoREMsV0FBV0EsQ0FBQ0MsT0FBZSxFQUFFQyxhQUFxQixFQUFFQyxPQUErQixFQUFFO0lBQ25GLElBQUksQ0FBQ0YsT0FBTyxHQUFHQSxPQUFPO0lBQ3RCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQSxhQUFhO0lBQ2xDLElBQUksQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO0VBQ3hCO0VBRUEsRUFBRUMsTUFBTSxDQUFDQyxRQUFRLElBQUk7SUFDbkIsSUFBSSxJQUFJLENBQUNGLE9BQU8sQ0FBQ0csVUFBVSxJQUFJLEtBQUssRUFBRTtNQUNwQyxNQUFNQyxNQUFNLEdBQUcsSUFBSUMsK0JBQXNCLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQztNQUNyRCxNQUFNQyx1QkFBdUIsR0FBRyxDQUFDO01BRWpDLElBQUFDLGlDQUFxQixFQUFDSCxNQUFNLEVBQUUsSUFBSSxDQUFDTCxhQUFhLEVBQUVPLHVCQUF1QixDQUFDO01BRTFFLE1BQU1GLE1BQU0sQ0FBQ0ksSUFBSTtJQUNuQjtJQUVBLE1BQU1DLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQztFQUN6QztFQUVBYSxRQUFRQSxDQUFDQyxNQUFNLEdBQUcsRUFBRSxFQUFFO0lBQ3BCLE9BQU9BLE1BQU0sSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDZCxPQUFPLENBQUM7RUFDakQ7QUFDRjtBQUFDLElBQUFlLFFBQUEsR0FBQUMsT0FBQSxDQUFBbkIsT0FBQSxHQUVjQyxlQUFlO0FBQzlCbUIsTUFBTSxDQUFDRCxPQUFPLEdBQUdsQixlQUFlIn0=
}}),
"[project]/node_modules/tedious/lib/message.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _stream = __turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)");
class Message extends _stream.PassThrough {
    constructor({ type, resetConnection = false }){
        super();
        this.type = type;
        this.resetConnection = resetConnection;
        this.ignore = false;
    }
}
var _default = exports.default = Message;
module.exports = Message; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyZWFtIiwicmVxdWlyZSIsIk1lc3NhZ2UiLCJQYXNzVGhyb3VnaCIsImNvbnN0cnVjdG9yIiwidHlwZSIsInJlc2V0Q29ubmVjdGlvbiIsImlnbm9yZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi9zcmMvbWVzc2FnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzVGhyb3VnaCB9IGZyb20gJ3N0cmVhbSc7XG5cbmNsYXNzIE1lc3NhZ2UgZXh0ZW5kcyBQYXNzVGhyb3VnaCB7XG4gIGRlY2xhcmUgdHlwZTogbnVtYmVyO1xuICBkZWNsYXJlIHJlc2V0Q29ubmVjdGlvbjogYm9vbGVhbjtcbiAgZGVjbGFyZSBpZ25vcmU6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoeyB0eXBlLCByZXNldENvbm5lY3Rpb24gPSBmYWxzZSB9OiB7IHR5cGU6IG51bWJlciwgcmVzZXRDb25uZWN0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZCB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5yZXNldENvbm5lY3Rpb24gPSByZXNldENvbm5lY3Rpb247XG4gICAgdGhpcy5pZ25vcmUgPSBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlO1xubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLE9BQUE7QUFFQSxNQUFNQyxPQUFPLFNBQVNDLG1CQUFXLENBQUM7RUFLaENDLFdBQVdBLENBQUM7SUFBRUMsSUFBSTtJQUFFQyxlQUFlLEdBQUc7RUFBK0QsQ0FBQyxFQUFFO0lBQ3RHLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDRCxJQUFJLEdBQUdBLElBQUk7SUFDaEIsSUFBSSxDQUFDQyxlQUFlLEdBQUdBLGVBQWU7SUFDdEMsSUFBSSxDQUFDQyxNQUFNLEdBQUcsS0FBSztFQUNyQjtBQUNGO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFY1IsT0FBTztBQUN0QlMsTUFBTSxDQUFDRixPQUFPLEdBQUdQLE9BQU8ifQ==
}}),
"[project]/node_modules/tedious/lib/incoming-message-stream.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _bl = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/bl/bl.js [middleware-edge] (ecmascript)"));
var _stream = __turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)");
var _message = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/message.js [middleware-edge] (ecmascript)"));
var _packet = __turbopack_context__.r("[project]/node_modules/tedious/lib/packet.js [middleware-edge] (ecmascript)");
var _errors = __turbopack_context__.r("[project]/node_modules/tedious/lib/errors.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
  IncomingMessageStream
  Transform received TDS data into individual IncomingMessage streams.
*/ class IncomingMessageStream extends _stream.Transform {
    constructor(debug){
        super({
            readableObjectMode: true
        });
        this.debug = debug;
        this.currentMessage = undefined;
        this.bl = new _bl.default();
    }
    pause() {
        super.pause();
        if (this.currentMessage) {
            this.currentMessage.pause();
        }
        return this;
    }
    resume() {
        super.resume();
        if (this.currentMessage) {
            this.currentMessage.resume();
        }
        return this;
    }
    processBufferedData(callback) {
        // The packet header is always 8 bytes of length.
        while(this.bl.length >= _packet.HEADER_LENGTH){
            // Get the full packet length
            const length = this.bl.readUInt16BE(2);
            if (length < _packet.HEADER_LENGTH) {
                return callback(new _errors.ConnectionError('Unable to process incoming packet'));
            }
            if (this.bl.length >= length) {
                const data = this.bl.slice(0, length);
                this.bl.consume(length);
                // TODO: Get rid of creating `Packet` instances here.
                const packet = new _packet.Packet(data);
                this.debug.packet('Received', packet);
                this.debug.data(packet);
                let message = this.currentMessage;
                if (message === undefined) {
                    this.currentMessage = message = new _message.default({
                        type: packet.type(),
                        resetConnection: false
                    });
                    this.push(message);
                }
                if (packet.isLast()) {
                    // Wait until the current message was fully processed before we
                    // continue processing any remaining messages.
                    message.once('end', ()=>{
                        this.currentMessage = undefined;
                        this.processBufferedData(callback);
                    });
                    message.end(packet.data());
                    return;
                } else if (!message.write(packet.data())) {
                    // If too much data is buffering up in the
                    // current message, wait for it to drain.
                    message.once('drain', ()=>{
                        this.processBufferedData(callback);
                    });
                    return;
                }
            } else {
                break;
            }
        }
        // Not enough data to read the next packet. Stop here and wait for
        // the next call to `_transform`.
        callback();
    }
    _transform(chunk, _encoding, callback) {
        this.bl.append(chunk);
        this.processBufferedData(callback);
    }
}
var _default = exports.default = IncomingMessageStream;
module.exports = IncomingMessageStream; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/outgoing-message-stream.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _bl = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/bl/bl.js [middleware-edge] (ecmascript)"));
var _stream = __turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)");
var _packet = __turbopack_context__.r("[project]/node_modules/tedious/lib/packet.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class OutgoingMessageStream extends _stream.Duplex {
    constructor(debug, { packetSize }){
        super({
            writableObjectMode: true
        });
        this.packetSize = packetSize;
        this.debug = debug;
        this.bl = new _bl.default();
        // When the writable side is ended, push `null`
        // to also end the readable side.
        this.on('finish', ()=>{
            this.push(null);
        });
    }
    _write(message, _encoding, callback) {
        const length = this.packetSize - _packet.HEADER_LENGTH;
        let packetNumber = 0;
        this.currentMessage = message;
        this.currentMessage.on('data', (data)=>{
            if (message.ignore) {
                return;
            }
            this.bl.append(data);
            while(this.bl.length > length){
                const data = this.bl.slice(0, length);
                this.bl.consume(length);
                // TODO: Get rid of creating `Packet` instances here.
                const packet = new _packet.Packet(message.type);
                packet.packetId(packetNumber += 1);
                packet.resetConnection(message.resetConnection);
                packet.addData(data);
                this.debug.packet('Sent', packet);
                this.debug.data(packet);
                if (this.push(packet.buffer) === false) {
                    message.pause();
                }
            }
        });
        this.currentMessage.on('end', ()=>{
            const data = this.bl.slice();
            this.bl.consume(data.length);
            // TODO: Get rid of creating `Packet` instances here.
            const packet = new _packet.Packet(message.type);
            packet.packetId(packetNumber += 1);
            packet.resetConnection(message.resetConnection);
            packet.last(true);
            packet.ignore(message.ignore);
            packet.addData(data);
            this.debug.packet('Sent', packet);
            this.debug.data(packet);
            this.push(packet.buffer);
            this.currentMessage = undefined;
            callback();
        });
    }
    _read(_size) {
        // If we do have a message, resume it and get data flowing.
        // Otherwise, there is nothing to do.
        if (this.currentMessage) {
            this.currentMessage.resume();
        }
    }
}
var _default = exports.default = OutgoingMessageStream;
module.exports = OutgoingMessageStream; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zdHJlYW0iLCJfcGFja2V0Iiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJPdXRnb2luZ01lc3NhZ2VTdHJlYW0iLCJEdXBsZXgiLCJjb25zdHJ1Y3RvciIsImRlYnVnIiwicGFja2V0U2l6ZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImJsIiwiQnVmZmVyTGlzdCIsIm9uIiwicHVzaCIsIl93cml0ZSIsIm1lc3NhZ2UiLCJfZW5jb2RpbmciLCJjYWxsYmFjayIsImxlbmd0aCIsIkhFQURFUl9MRU5HVEgiLCJwYWNrZXROdW1iZXIiLCJjdXJyZW50TWVzc2FnZSIsImRhdGEiLCJpZ25vcmUiLCJhcHBlbmQiLCJzbGljZSIsImNvbnN1bWUiLCJwYWNrZXQiLCJQYWNrZXQiLCJ0eXBlIiwicGFja2V0SWQiLCJyZXNldENvbm5lY3Rpb24iLCJhZGREYXRhIiwiYnVmZmVyIiwicGF1c2UiLCJsYXN0IiwidW5kZWZpbmVkIiwiX3JlYWQiLCJfc2l6ZSIsInJlc3VtZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIi4uL3NyYy9vdXRnb2luZy1tZXNzYWdlLXN0cmVhbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnVmZmVyTGlzdCBmcm9tICdibCc7XG5pbXBvcnQgeyBEdXBsZXggfSBmcm9tICdzdHJlYW0nO1xuXG5pbXBvcnQgRGVidWcgZnJvbSAnLi9kZWJ1Zyc7XG5pbXBvcnQgTWVzc2FnZSBmcm9tICcuL21lc3NhZ2UnO1xuaW1wb3J0IHsgUGFja2V0LCBIRUFERVJfTEVOR1RIIH0gZnJvbSAnLi9wYWNrZXQnO1xuXG5jbGFzcyBPdXRnb2luZ01lc3NhZ2VTdHJlYW0gZXh0ZW5kcyBEdXBsZXgge1xuICBkZWNsYXJlIHBhY2tldFNpemU6IG51bWJlcjtcbiAgZGVjbGFyZSBkZWJ1ZzogRGVidWc7XG4gIGRlY2xhcmUgYmw6IGFueTtcblxuICBkZWNsYXJlIGN1cnJlbnRNZXNzYWdlOiBNZXNzYWdlIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKGRlYnVnOiBEZWJ1ZywgeyBwYWNrZXRTaXplIH06IHsgcGFja2V0U2l6ZTogbnVtYmVyIH0pIHtcbiAgICBzdXBlcih7IHdyaXRhYmxlT2JqZWN0TW9kZTogdHJ1ZSB9KTtcblxuICAgIHRoaXMucGFja2V0U2l6ZSA9IHBhY2tldFNpemU7XG4gICAgdGhpcy5kZWJ1ZyA9IGRlYnVnO1xuICAgIHRoaXMuYmwgPSBuZXcgQnVmZmVyTGlzdCgpO1xuXG4gICAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBpcyBlbmRlZCwgcHVzaCBgbnVsbGBcbiAgICAvLyB0byBhbHNvIGVuZCB0aGUgcmVhZGFibGUgc2lkZS5cbiAgICB0aGlzLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgfSk7XG4gIH1cblxuICBfd3JpdGUobWVzc2FnZTogTWVzc2FnZSwgX2VuY29kaW5nOiBzdHJpbmcsIGNhbGxiYWNrOiAoZXJyPzogRXJyb3IgfCBudWxsKSA9PiB2b2lkKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5wYWNrZXRTaXplIC0gSEVBREVSX0xFTkdUSDtcbiAgICBsZXQgcGFja2V0TnVtYmVyID0gMDtcblxuICAgIHRoaXMuY3VycmVudE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY3VycmVudE1lc3NhZ2Uub24oJ2RhdGEnLCAoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICBpZiAobWVzc2FnZS5pZ25vcmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJsLmFwcGVuZChkYXRhKTtcblxuICAgICAgd2hpbGUgKHRoaXMuYmwubGVuZ3RoID4gbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmJsLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICAgIHRoaXMuYmwuY29uc3VtZShsZW5ndGgpO1xuXG4gICAgICAgIC8vIFRPRE86IEdldCByaWQgb2YgY3JlYXRpbmcgYFBhY2tldGAgaW5zdGFuY2VzIGhlcmUuXG4gICAgICAgIGNvbnN0IHBhY2tldCA9IG5ldyBQYWNrZXQobWVzc2FnZS50eXBlKTtcbiAgICAgICAgcGFja2V0LnBhY2tldElkKHBhY2tldE51bWJlciArPSAxKTtcbiAgICAgICAgcGFja2V0LnJlc2V0Q29ubmVjdGlvbihtZXNzYWdlLnJlc2V0Q29ubmVjdGlvbik7XG4gICAgICAgIHBhY2tldC5hZGREYXRhKGRhdGEpO1xuXG4gICAgICAgIHRoaXMuZGVidWcucGFja2V0KCdTZW50JywgcGFja2V0KTtcbiAgICAgICAgdGhpcy5kZWJ1Zy5kYXRhKHBhY2tldCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHVzaChwYWNrZXQuYnVmZmVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBtZXNzYWdlLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuY3VycmVudE1lc3NhZ2Uub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmJsLnNsaWNlKCk7XG4gICAgICB0aGlzLmJsLmNvbnN1bWUoZGF0YS5sZW5ndGgpO1xuXG4gICAgICAvLyBUT0RPOiBHZXQgcmlkIG9mIGNyZWF0aW5nIGBQYWNrZXRgIGluc3RhbmNlcyBoZXJlLlxuICAgICAgY29uc3QgcGFja2V0ID0gbmV3IFBhY2tldChtZXNzYWdlLnR5cGUpO1xuICAgICAgcGFja2V0LnBhY2tldElkKHBhY2tldE51bWJlciArPSAxKTtcbiAgICAgIHBhY2tldC5yZXNldENvbm5lY3Rpb24obWVzc2FnZS5yZXNldENvbm5lY3Rpb24pO1xuICAgICAgcGFja2V0Lmxhc3QodHJ1ZSk7XG4gICAgICBwYWNrZXQuaWdub3JlKG1lc3NhZ2UuaWdub3JlKTtcbiAgICAgIHBhY2tldC5hZGREYXRhKGRhdGEpO1xuXG4gICAgICB0aGlzLmRlYnVnLnBhY2tldCgnU2VudCcsIHBhY2tldCk7XG4gICAgICB0aGlzLmRlYnVnLmRhdGEocGFja2V0KTtcblxuICAgICAgdGhpcy5wdXNoKHBhY2tldC5idWZmZXIpO1xuXG4gICAgICB0aGlzLmN1cnJlbnRNZXNzYWdlID0gdW5kZWZpbmVkO1xuXG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG5cbiAgX3JlYWQoX3NpemU6IG51bWJlcikge1xuICAgIC8vIElmIHdlIGRvIGhhdmUgYSBtZXNzYWdlLCByZXN1bWUgaXQgYW5kIGdldCBkYXRhIGZsb3dpbmcuXG4gICAgLy8gT3RoZXJ3aXNlLCB0aGVyZSBpcyBub3RoaW5nIHRvIGRvLlxuICAgIGlmICh0aGlzLmN1cnJlbnRNZXNzYWdlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRNZXNzYWdlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPdXRnb2luZ01lc3NhZ2VTdHJlYW07XG5tb2R1bGUuZXhwb3J0cyA9IE91dGdvaW5nTWVzc2FnZVN0cmVhbTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsR0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBSUEsSUFBQUUsT0FBQSxHQUFBRixPQUFBO0FBQWlELFNBQUFELHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRWpELE1BQU1HLHFCQUFxQixTQUFTQyxjQUFNLENBQUM7RUFPekNDLFdBQVdBLENBQUNDLEtBQVksRUFBRTtJQUFFQztFQUFtQyxDQUFDLEVBQUU7SUFDaEUsS0FBSyxDQUFDO01BQUVDLGtCQUFrQixFQUFFO0lBQUssQ0FBQyxDQUFDO0lBRW5DLElBQUksQ0FBQ0QsVUFBVSxHQUFHQSxVQUFVO0lBQzVCLElBQUksQ0FBQ0QsS0FBSyxHQUFHQSxLQUFLO0lBQ2xCLElBQUksQ0FBQ0csRUFBRSxHQUFHLElBQUlDLFdBQVUsQ0FBQyxDQUFDOztJQUUxQjtJQUNBO0lBQ0EsSUFBSSxDQUFDQyxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU07TUFDdEIsSUFBSSxDQUFDQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2pCLENBQUMsQ0FBQztFQUNKO0VBRUFDLE1BQU1BLENBQUNDLE9BQWdCLEVBQUVDLFNBQWlCLEVBQUVDLFFBQXNDLEVBQUU7SUFDbEYsTUFBTUMsTUFBTSxHQUFHLElBQUksQ0FBQ1YsVUFBVSxHQUFHVyxxQkFBYTtJQUM5QyxJQUFJQyxZQUFZLEdBQUcsQ0FBQztJQUVwQixJQUFJLENBQUNDLGNBQWMsR0FBR04sT0FBTztJQUM3QixJQUFJLENBQUNNLGNBQWMsQ0FBQ1QsRUFBRSxDQUFDLE1BQU0sRUFBR1UsSUFBWSxJQUFLO01BQy9DLElBQUlQLE9BQU8sQ0FBQ1EsTUFBTSxFQUFFO1FBQ2xCO01BQ0Y7TUFFQSxJQUFJLENBQUNiLEVBQUUsQ0FBQ2MsTUFBTSxDQUFDRixJQUFJLENBQUM7TUFFcEIsT0FBTyxJQUFJLENBQUNaLEVBQUUsQ0FBQ1EsTUFBTSxHQUFHQSxNQUFNLEVBQUU7UUFDOUIsTUFBTUksSUFBSSxHQUFHLElBQUksQ0FBQ1osRUFBRSxDQUFDZSxLQUFLLENBQUMsQ0FBQyxFQUFFUCxNQUFNLENBQUM7UUFDckMsSUFBSSxDQUFDUixFQUFFLENBQUNnQixPQUFPLENBQUNSLE1BQU0sQ0FBQzs7UUFFdkI7UUFDQSxNQUFNUyxNQUFNLEdBQUcsSUFBSUMsY0FBTSxDQUFDYixPQUFPLENBQUNjLElBQUksQ0FBQztRQUN2Q0YsTUFBTSxDQUFDRyxRQUFRLENBQUNWLFlBQVksSUFBSSxDQUFDLENBQUM7UUFDbENPLE1BQU0sQ0FBQ0ksZUFBZSxDQUFDaEIsT0FBTyxDQUFDZ0IsZUFBZSxDQUFDO1FBQy9DSixNQUFNLENBQUNLLE9BQU8sQ0FBQ1YsSUFBSSxDQUFDO1FBRXBCLElBQUksQ0FBQ2YsS0FBSyxDQUFDb0IsTUFBTSxDQUFDLE1BQU0sRUFBRUEsTUFBTSxDQUFDO1FBQ2pDLElBQUksQ0FBQ3BCLEtBQUssQ0FBQ2UsSUFBSSxDQUFDSyxNQUFNLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUNkLElBQUksQ0FBQ2MsTUFBTSxDQUFDTSxNQUFNLENBQUMsS0FBSyxLQUFLLEVBQUU7VUFDdENsQixPQUFPLENBQUNtQixLQUFLLENBQUMsQ0FBQztRQUNqQjtNQUNGO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDYixjQUFjLENBQUNULEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtNQUNsQyxNQUFNVSxJQUFJLEdBQUcsSUFBSSxDQUFDWixFQUFFLENBQUNlLEtBQUssQ0FBQyxDQUFDO01BQzVCLElBQUksQ0FBQ2YsRUFBRSxDQUFDZ0IsT0FBTyxDQUFDSixJQUFJLENBQUNKLE1BQU0sQ0FBQzs7TUFFNUI7TUFDQSxNQUFNUyxNQUFNLEdBQUcsSUFBSUMsY0FBTSxDQUFDYixPQUFPLENBQUNjLElBQUksQ0FBQztNQUN2Q0YsTUFBTSxDQUFDRyxRQUFRLENBQUNWLFlBQVksSUFBSSxDQUFDLENBQUM7TUFDbENPLE1BQU0sQ0FBQ0ksZUFBZSxDQUFDaEIsT0FBTyxDQUFDZ0IsZUFBZSxDQUFDO01BQy9DSixNQUFNLENBQUNRLElBQUksQ0FBQyxJQUFJLENBQUM7TUFDakJSLE1BQU0sQ0FBQ0osTUFBTSxDQUFDUixPQUFPLENBQUNRLE1BQU0sQ0FBQztNQUM3QkksTUFBTSxDQUFDSyxPQUFPLENBQUNWLElBQUksQ0FBQztNQUVwQixJQUFJLENBQUNmLEtBQUssQ0FBQ29CLE1BQU0sQ0FBQyxNQUFNLEVBQUVBLE1BQU0sQ0FBQztNQUNqQyxJQUFJLENBQUNwQixLQUFLLENBQUNlLElBQUksQ0FBQ0ssTUFBTSxDQUFDO01BRXZCLElBQUksQ0FBQ2QsSUFBSSxDQUFDYyxNQUFNLENBQUNNLE1BQU0sQ0FBQztNQUV4QixJQUFJLENBQUNaLGNBQWMsR0FBR2UsU0FBUztNQUUvQm5CLFFBQVEsQ0FBQyxDQUFDO0lBQ1osQ0FBQyxDQUFDO0VBQ0o7RUFFQW9CLEtBQUtBLENBQUNDLEtBQWEsRUFBRTtJQUNuQjtJQUNBO0lBQ0EsSUFBSSxJQUFJLENBQUNqQixjQUFjLEVBQUU7TUFDdkIsSUFBSSxDQUFDQSxjQUFjLENBQUNrQixNQUFNLENBQUMsQ0FBQztJQUM5QjtFQUNGO0FBQ0Y7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQXRDLE9BQUEsR0FFY0MscUJBQXFCO0FBQ3BDc0MsTUFBTSxDQUFDRCxPQUFPLEdBQUdyQyxxQkFBcUIifQ==
}}),
"[project]/node_modules/tedious/lib/message-io.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _nativeDuplexpair = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/native-duplexpair/index.js [middleware-edge] (ecmascript)"));
var tls = _interopRequireWildcard(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _events = __turbopack_context__.r("[externals]/node:events [external] (node:events, cjs)");
var _message = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/message.js [middleware-edge] (ecmascript)"));
var _packet = __turbopack_context__.r("[project]/node_modules/tedious/lib/packet.js [middleware-edge] (ecmascript)");
var _incomingMessageStream = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/incoming-message-stream.js [middleware-edge] (ecmascript)"));
var _outgoingMessageStream = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/outgoing-message-stream.js [middleware-edge] (ecmascript)"));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class MessageIO extends _events.EventEmitter {
    constructor(socket, packetSize, debug){
        super();
        this.socket = socket;
        this.debug = debug;
        this.tlsNegotiationComplete = false;
        this.incomingMessageStream = new _incomingMessageStream.default(this.debug);
        this.incomingMessageIterator = this.incomingMessageStream[Symbol.asyncIterator]();
        this.outgoingMessageStream = new _outgoingMessageStream.default(this.debug, {
            packetSize: packetSize
        });
        this.socket.pipe(this.incomingMessageStream);
        this.outgoingMessageStream.pipe(this.socket);
    }
    packetSize(...args) {
        if (args.length > 0) {
            const packetSize = args[0];
            this.debug.log('Packet size changed from ' + this.outgoingMessageStream.packetSize + ' to ' + packetSize);
            this.outgoingMessageStream.packetSize = packetSize;
        }
        if (this.securePair) {
            this.securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);
        }
        return this.outgoingMessageStream.packetSize;
    }
    // Negotiate TLS encryption.
    startTls(credentialsDetails, hostname, trustServerCertificate) {
        if (!credentialsDetails.maxVersion || ![
            'TLSv1.2',
            'TLSv1.1',
            'TLSv1'
        ].includes(credentialsDetails.maxVersion)) {
            credentialsDetails.maxVersion = 'TLSv1.2';
        }
        const secureContext = tls.createSecureContext(credentialsDetails);
        return new Promise((resolve, reject)=>{
            const duplexpair = new _nativeDuplexpair.default();
            const securePair = this.securePair = {
                cleartext: tls.connect({
                    socket: duplexpair.socket1,
                    servername: hostname,
                    secureContext: secureContext,
                    rejectUnauthorized: !trustServerCertificate
                }),
                encrypted: duplexpair.socket2
            };
            const onSecureConnect = ()=>{
                securePair.encrypted.removeListener('readable', onReadable);
                securePair.cleartext.removeListener('error', onError);
                securePair.cleartext.removeListener('secureConnect', onSecureConnect);
                // If we encounter any errors from this point on,
                // we just forward them to the actual network socket.
                securePair.cleartext.once('error', (err)=>{
                    this.socket.destroy(err);
                });
                const cipher = securePair.cleartext.getCipher();
                if (cipher) {
                    this.debug.log('TLS negotiated (' + cipher.name + ', ' + cipher.version + ')');
                }
                this.emit('secure', securePair.cleartext);
                securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);
                this.outgoingMessageStream.unpipe(this.socket);
                this.socket.unpipe(this.incomingMessageStream);
                this.socket.pipe(securePair.encrypted);
                securePair.encrypted.pipe(this.socket);
                securePair.cleartext.pipe(this.incomingMessageStream);
                this.outgoingMessageStream.pipe(securePair.cleartext);
                this.tlsNegotiationComplete = true;
                resolve();
            };
            const onError = (err)=>{
                securePair.encrypted.removeListener('readable', onReadable);
                securePair.cleartext.removeListener('error', onError);
                securePair.cleartext.removeListener('secureConnect', onSecureConnect);
                securePair.cleartext.destroy();
                securePair.encrypted.destroy();
                reject(err);
            };
            const onReadable = ()=>{
                // When there is handshake data on the encrypted stream of the secure pair,
                // we wrap it into a `PRELOGIN` message and send it to the server.
                //
                // For each `PRELOGIN` message we sent we get back exactly one response message
                // that contains the server's handshake response data.
                const message = new _message.default({
                    type: _packet.TYPE.PRELOGIN,
                    resetConnection: false
                });
                let chunk;
                while(chunk = securePair.encrypted.read()){
                    message.write(chunk);
                }
                this.outgoingMessageStream.write(message);
                message.end();
                this.readMessage().then(async (response)=>{
                    // Setup readable handler for the next round of handshaking.
                    // If we encounter a `secureConnect` on the cleartext side
                    // of the secure pair, the `readable` handler is cleared
                    // and no further handshake handling will happen.
                    securePair.encrypted.once('readable', onReadable);
                    for await (const data of response){
                        // We feed the server's handshake response back into the
                        // encrypted end of the secure pair.
                        securePair.encrypted.write(data);
                    }
                }).catch(onError);
            };
            securePair.cleartext.once('error', onError);
            securePair.cleartext.once('secureConnect', onSecureConnect);
            securePair.encrypted.once('readable', onReadable);
        });
    }
    // TODO listen for 'drain' event when socket.write returns false.
    // TODO implement incomplete request cancelation (2.2.1.6)
    sendMessage(packetType, data, resetConnection) {
        const message = new _message.default({
            type: packetType,
            resetConnection: resetConnection
        });
        message.end(data);
        this.outgoingMessageStream.write(message);
        return message;
    }
    /**
   * Read the next incoming message from the socket.
   */ async readMessage() {
        const result = await this.incomingMessageIterator.next();
        if (result.done) {
            throw new Error('unexpected end of message stream');
        }
        return result.value;
    }
}
var _default = exports.default = MessageIO;
module.exports = MessageIO; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/collation.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.codepageBySortId = exports.codepageByLanguageId = exports.Flags = exports.Collation = void 0;
// http://technet.microsoft.com/en-us/library/aa176553(v=sql.80).aspx
const codepageByLanguageId = exports.codepageByLanguageId = {
    // Arabic_*
    [0x0401]: 'CP1256',
    // Chinese_Taiwan_Stroke_*
    // Chinese_Traditional_Stroke_Count_*
    // Chinese_Taiwan_Bopomofo_*
    // Chinese_Traditional_Bopomofo_*
    [0x0404]: 'CP950',
    // Czech_*
    [0x0405]: 'CP1250',
    // Danish_Greenlandic_*
    // Danish_Norwegian_*
    [0x0406]: 'CP1252',
    // Greek_*
    [0x0408]: 'CP1253',
    // Latin1_General_*
    [0x0409]: 'CP1252',
    // Traditional_Spanish_*
    [0x040A]: 'CP1252',
    // Finnish_Swedish_*
    [0x040B]: 'CP1252',
    // French_*
    [0x040C]: 'CP1252',
    // Hebrew_*
    [0x040D]: 'CP1255',
    // Hungarian_*
    // Hungarian_Technical_*
    [0x040E]: 'CP1250',
    // Icelandic_*
    [0x040F]: 'CP1252',
    // Japanese_*
    // Japanese_XJIS_*
    // Japanese_Unicode_*
    // Japanese_Bushu_Kakusu_*
    [0x0411]: 'CP932',
    // Korean_*
    // Korean_Wansung_*
    [0x0412]: 'CP949',
    // Norwegian_*
    [0x0414]: 'CP1252',
    // Polish_*
    [0x0415]: 'CP1250',
    // Romansh_*
    [0x0417]: 'CP1252',
    // Romanian_*
    [0x0418]: 'CP1250',
    // Cyrillic_*
    [0x0419]: 'CP1251',
    // Croatian_*
    [0x041A]: 'CP1250',
    // Slovak_*
    [0x041B]: 'CP1250',
    // Albanian_*
    [0x041C]: 'CP1250',
    // Thai_*
    [0x041E]: 'CP874',
    // Turkish_*
    [0x041F]: 'CP1254',
    // Urdu_*
    [0x0420]: 'CP1256',
    // Ukrainian_*
    [0x0422]: 'CP1251',
    // Slovenian_*
    [0x0424]: 'CP1250',
    // Estonian_*
    [0x0425]: 'CP1257',
    // Latvian_*
    [0x0426]: 'CP1257',
    // Lithuanian_*
    [0x0427]: 'CP1257',
    // Persian_*
    [0x0429]: 'CP1256',
    // Vietnamese_*
    [0x042A]: 'CP1258',
    // Azeri_Latin_*
    [0x042C]: 'CP1254',
    // Upper_Sorbian_*
    [0x042E]: 'CP1252',
    // Macedonian_FYROM_*
    [0x042F]: 'CP1251',
    // Sami_Norway_*
    [0x043B]: 'CP1252',
    // Kazakh_*
    [0x043F]: 'CP1251',
    // Turkmen_*
    [0x0442]: 'CP1250',
    // Uzbek_Latin_*
    [0x0443]: 'CP1254',
    // Tatar_*
    [0x0444]: 'CP1251',
    // Welsh_*
    [0x0452]: 'CP1252',
    // Frisian_*
    [0x0462]: 'CP1252',
    // Bashkir_*
    [0x046D]: 'CP1251',
    // Mapudungan_*
    [0x047A]: 'CP1252',
    // Mohawk_*
    [0x047C]: 'CP1252',
    // Breton_*
    [0x047E]: 'CP1252',
    // Uighur_*
    [0x0480]: 'CP1256',
    // Corsican_*
    [0x0483]: 'CP1252',
    // Yakut_*
    [0x0485]: 'CP1251',
    // Dari_*
    [0x048C]: 'CP1256',
    // Chinese_PRC_*
    // Chinese_Simplified_Pinyin_*
    // Chinese_PRC_Stroke_*
    // Chinese_Simplified_Stroke_Order_*
    [0x0804]: 'CP936',
    // Serbian_Latin_*
    [0x081A]: 'CP1250',
    // Azeri_Cyrillic_*
    [0x082C]: 'CP1251',
    // Sami_Sweden_Finland_*
    [0x083B]: 'CP1252',
    // Tamazight_*
    [0x085F]: 'CP1252',
    // Chinese_Hong_Kong_Stroke_*
    [0x0C04]: 'CP950',
    // Modern_Spanish_*
    [0x0C0A]: 'CP1252',
    // Serbian_Cyrillic_*
    [0x0C1A]: 'CP1251',
    // Chinese_Traditional_Pinyin_*
    // Chinese_Traditional_Stroke_Order_*
    [0x1404]: 'CP950',
    // Bosnian_Latin_*
    [0x141A]: 'CP1250',
    // Bosnian_Cyrillic_*
    [0x201A]: 'CP1251',
    // German
    // German_PhoneBook_*
    [0x0407]: 'CP1252',
    // Georgian_Modern_Sort_*
    [0x0437]: 'CP1252'
};
const codepageBySortId = exports.codepageBySortId = {
    [30]: 'CP437',
    // SQL_Latin1_General_CP437_BIN
    [31]: 'CP437',
    // SQL_Latin1_General_CP437_CS_AS
    [32]: 'CP437',
    // SQL_Latin1_General_CP437_CI_AS
    [33]: 'CP437',
    // SQL_Latin1_General_Pref_CP437_CI_AS
    [34]: 'CP437',
    // SQL_Latin1_General_CP437_CI_AI
    [40]: 'CP850',
    // SQL_Latin1_General_CP850_BIN
    [41]: 'CP850',
    // SQL_Latin1_General_CP850_CS_AS
    [42]: 'CP850',
    // SQL_Latin1_General_CP850_CI_AS
    [43]: 'CP850',
    // SQL_Latin1_General_Pref_CP850_CI_AS
    [44]: 'CP850',
    // SQL_Latin1_General_CP850_CI_AI
    [49]: 'CP850',
    // SQL_1xCompat_CP850_CI_AS
    [51]: 'CP1252',
    // SQL_Latin1_General_Cp1_CS_AS_KI_WI
    [52]: 'CP1252',
    // SQL_Latin1_General_Cp1_CI_AS_KI_WI
    [53]: 'CP1252',
    // SQL_Latin1_General_Pref_Cp1_CI_AS_KI_WI
    [54]: 'CP1252',
    // SQL_Latin1_General_Cp1_CI_AI_KI_WI
    [55]: 'CP850',
    // SQL_AltDiction_CP850_CS_AS
    [56]: 'CP850',
    // SQL_AltDiction_Pref_CP850_CI_AS
    [57]: 'CP850',
    // SQL_AltDiction_CP850_CI_AI
    [58]: 'CP850',
    // SQL_Scandinavian_Pref_CP850_CI_AS
    [59]: 'CP850',
    // SQL_Scandinavian_CP850_CS_AS
    [60]: 'CP850',
    // SQL_Scandinavian_CP850_CI_AS
    [61]: 'CP850',
    // SQL_AltDiction_CP850_CI_AS
    [80]: 'CP1250',
    // SQL_Latin1_General_1250_BIN
    [81]: 'CP1250',
    // SQL_Latin1_General_CP1250_CS_AS
    [82]: 'CP1250',
    // SQL_Latin1_General_Cp1250_CI_AS_KI_WI
    [83]: 'CP1250',
    // SQL_Czech_Cp1250_CS_AS_KI_WI
    [84]: 'CP1250',
    // SQL_Czech_Cp1250_CI_AS_KI_WI
    [85]: 'CP1250',
    // SQL_Hungarian_Cp1250_CS_AS_KI_WI
    [86]: 'CP1250',
    // SQL_Hungarian_Cp1250_CI_AS_KI_WI
    [87]: 'CP1250',
    // SQL_Polish_Cp1250_CS_AS_KI_WI
    [88]: 'CP1250',
    // SQL_Polish_Cp1250_CI_AS_KI_WI
    [89]: 'CP1250',
    // SQL_Romanian_Cp1250_CS_AS_KI_WI
    [90]: 'CP1250',
    // SQL_Romanian_Cp1250_CI_AS_KI_WI
    [91]: 'CP1250',
    // SQL_Croatian_Cp1250_CS_AS_KI_WI
    [92]: 'CP1250',
    // SQL_Croatian_Cp1250_CI_AS_KI_WI
    [93]: 'CP1250',
    // SQL_Slovak_Cp1250_CS_AS_KI_WI
    [94]: 'CP1250',
    // SQL_Slovak_Cp1250_CI_AS_KI_WI
    [95]: 'CP1250',
    // SQL_Slovenian_Cp1250_CS_AS_KI_WI
    [96]: 'CP1250',
    // SQL_Slovenian_Cp1250_CI_AS_KI_WI
    [104]: 'CP1251',
    // SQL_Latin1_General_1251_BIN
    [105]: 'CP1251',
    // SQL_Latin1_General_CP1251_CS_AS
    [106]: 'CP1251',
    // SQL_Latin1_General_CP1251_CI_AS
    [107]: 'CP1251',
    // SQL_Ukrainian_Cp1251_CS_AS_KI_WI
    [108]: 'CP1251',
    // SQL_Ukrainian_Cp1251_CI_AS_KI_WI
    [112]: 'CP1253',
    // SQL_Latin1_General_1253_BIN
    [113]: 'CP1253',
    // SQL_Latin1_General_CP1253_CS_AS
    [114]: 'CP1253',
    // SQL_Latin1_General_CP1253_CI_AS
    [120]: 'CP1253',
    // SQL_MixDiction_CP1253_CS_AS
    [121]: 'CP1253',
    // SQL_AltDiction_CP1253_CS_AS
    [122]: 'CP1253',
    // SQL_AltDiction2_CP1253_CS_AS
    [124]: 'CP1253',
    // SQL_Latin1_General_CP1253_CI_AI
    [128]: 'CP1254',
    // SQL_Latin1_General_1254_BIN
    [129]: 'CP1254',
    // SQL_Latin1_General_Cp1254_CS_AS_KI_WI
    [130]: 'CP1254',
    // SQL_Latin1_General_Cp1254_CI_AS_KI_WI
    [136]: 'CP1255',
    // SQL_Latin1_General_1255_BIN
    [137]: 'CP1255',
    // SQL_Latin1_General_CP1255_CS_AS
    [138]: 'CP1255',
    // SQL_Latin1_General_CP1255_CI_AS
    [144]: 'CP1256',
    // SQL_Latin1_General_1256_BIN
    [145]: 'CP1256',
    // SQL_Latin1_General_CP1256_CS_AS
    [146]: 'CP1256',
    // SQL_Latin1_General_CP1256_CI_AS
    [152]: 'CP1257',
    // SQL_Latin1_General_1257_BIN
    [153]: 'CP1257',
    // SQL_Latin1_General_CP1257_CS_AS
    [154]: 'CP1257',
    // SQL_Latin1_General_CP1257_CI_AS
    [155]: 'CP1257',
    // SQL_Estonian_Cp1257_CS_AS_KI_WI
    [156]: 'CP1257',
    // SQL_Estonian_Cp1257_CI_AS_KI_WI
    [157]: 'CP1257',
    // SQL_Latvian_Cp1257_CS_AS_KI_WI
    [158]: 'CP1257',
    // SQL_Latvian_Cp1257_CI_AS_KI_WI
    [159]: 'CP1257',
    // SQL_Lithuanian_Cp1257_CS_AS_KI_WI
    [160]: 'CP1257',
    // SQL_Lithuanian_Cp1257_CI_AS_KI_WI
    [183]: 'CP1252',
    // SQL_Danish_Pref_Cp1_CI_AS_KI_WI
    [184]: 'CP1252',
    // SQL_SwedishPhone_Pref_Cp1_CI_AS_KI_WI
    [185]: 'CP1252',
    // SQL_SwedishStd_Pref_Cp1_CI_AS_KI_WI
    [186]: 'CP1252' // SQL_Icelandic_Pref_Cp1_CI_AS_KI_WI
};
const Flags = exports.Flags = {
    IGNORE_CASE: 1 << 0,
    IGNORE_ACCENT: 1 << 1,
    IGNORE_KANA: 1 << 2,
    IGNORE_WIDTH: 1 << 3,
    BINARY: 1 << 4,
    BINARY2: 1 << 5,
    UTF8: 1 << 6
};
class Collation {
    static fromBuffer(buffer, offset = 0) {
        let lcid = (buffer[offset + 2] & 0x0F) << 16;
        lcid |= buffer[offset + 1] << 8;
        lcid |= buffer[offset + 0];
        let flags = (buffer[offset + 3] & 0x0F) << 4;
        flags |= (buffer[offset + 2] & 0xF0) >>> 4;
        const version = (buffer[offset + 3] & 0xF0) >>> 4;
        const sortId = buffer[offset + 4];
        return new this(lcid, flags, version, sortId);
    }
    constructor(lcid, flags, version, sortId){
        this.buffer = undefined;
        this.lcid = lcid;
        this.flags = flags;
        this.version = version;
        this.sortId = sortId;
        if (this.flags & Flags.UTF8) {
            this.codepage = 'utf-8';
        } else if (this.sortId) {
            this.codepage = codepageBySortId[this.sortId];
        } else {
            // The last 16 bits of the LCID are the language id.
            // The first 4 bits define additional sort orders.
            const languageId = this.lcid & 0xFFFF;
            this.codepage = codepageByLanguageId[languageId];
        }
    }
    toBuffer() {
        if (this.buffer) {
            return this.buffer;
        }
        this.buffer = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(5);
        this.buffer[0] = this.lcid & 0xFF;
        this.buffer[1] = this.lcid >>> 8 & 0xFF;
        this.buffer[2] = this.lcid >>> 16 & 0x0F | (this.flags & 0x0F) << 4;
        this.buffer[3] = (this.flags & 0xF0) >>> 4 | (this.version & 0x0F) << 4;
        this.buffer[4] = this.sortId & 0xFF;
        return this.buffer;
    }
}
exports.Collation = Collation; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/guid-parser.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.bufferToLowerCaseGuid = bufferToLowerCaseGuid;
exports.bufferToUpperCaseGuid = bufferToUpperCaseGuid;
exports.guidToArray = guidToArray;
const UPPER_CASE_MAP = [
    '00',
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '0A',
    '0B',
    '0C',
    '0D',
    '0E',
    '0F',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '1A',
    '1B',
    '1C',
    '1D',
    '1E',
    '1F',
    '20',
    '21',
    '22',
    '23',
    '24',
    '25',
    '26',
    '27',
    '28',
    '29',
    '2A',
    '2B',
    '2C',
    '2D',
    '2E',
    '2F',
    '30',
    '31',
    '32',
    '33',
    '34',
    '35',
    '36',
    '37',
    '38',
    '39',
    '3A',
    '3B',
    '3C',
    '3D',
    '3E',
    '3F',
    '40',
    '41',
    '42',
    '43',
    '44',
    '45',
    '46',
    '47',
    '48',
    '49',
    '4A',
    '4B',
    '4C',
    '4D',
    '4E',
    '4F',
    '50',
    '51',
    '52',
    '53',
    '54',
    '55',
    '56',
    '57',
    '58',
    '59',
    '5A',
    '5B',
    '5C',
    '5D',
    '5E',
    '5F',
    '60',
    '61',
    '62',
    '63',
    '64',
    '65',
    '66',
    '67',
    '68',
    '69',
    '6A',
    '6B',
    '6C',
    '6D',
    '6E',
    '6F',
    '70',
    '71',
    '72',
    '73',
    '74',
    '75',
    '76',
    '77',
    '78',
    '79',
    '7A',
    '7B',
    '7C',
    '7D',
    '7E',
    '7F',
    '80',
    '81',
    '82',
    '83',
    '84',
    '85',
    '86',
    '87',
    '88',
    '89',
    '8A',
    '8B',
    '8C',
    '8D',
    '8E',
    '8F',
    '90',
    '91',
    '92',
    '93',
    '94',
    '95',
    '96',
    '97',
    '98',
    '99',
    '9A',
    '9B',
    '9C',
    '9D',
    '9E',
    '9F',
    'A0',
    'A1',
    'A2',
    'A3',
    'A4',
    'A5',
    'A6',
    'A7',
    'A8',
    'A9',
    'AA',
    'AB',
    'AC',
    'AD',
    'AE',
    'AF',
    'B0',
    'B1',
    'B2',
    'B3',
    'B4',
    'B5',
    'B6',
    'B7',
    'B8',
    'B9',
    'BA',
    'BB',
    'BC',
    'BD',
    'BE',
    'BF',
    'C0',
    'C1',
    'C2',
    'C3',
    'C4',
    'C5',
    'C6',
    'C7',
    'C8',
    'C9',
    'CA',
    'CB',
    'CC',
    'CD',
    'CE',
    'CF',
    'D0',
    'D1',
    'D2',
    'D3',
    'D4',
    'D5',
    'D6',
    'D7',
    'D8',
    'D9',
    'DA',
    'DB',
    'DC',
    'DD',
    'DE',
    'DF',
    'E0',
    'E1',
    'E2',
    'E3',
    'E4',
    'E5',
    'E6',
    'E7',
    'E8',
    'E9',
    'EA',
    'EB',
    'EC',
    'ED',
    'EE',
    'EF',
    'F0',
    'F1',
    'F2',
    'F3',
    'F4',
    'F5',
    'F6',
    'F7',
    'F8',
    'F9',
    'FA',
    'FB',
    'FC',
    'FD',
    'FE',
    'FF'
];
const LOWER_CASE_MAP = [
    '00',
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '0a',
    '0b',
    '0c',
    '0d',
    '0e',
    '0f',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '1a',
    '1b',
    '1c',
    '1d',
    '1e',
    '1f',
    '20',
    '21',
    '22',
    '23',
    '24',
    '25',
    '26',
    '27',
    '28',
    '29',
    '2a',
    '2b',
    '2c',
    '2d',
    '2e',
    '2f',
    '30',
    '31',
    '32',
    '33',
    '34',
    '35',
    '36',
    '37',
    '38',
    '39',
    '3a',
    '3b',
    '3c',
    '3d',
    '3e',
    '3f',
    '40',
    '41',
    '42',
    '43',
    '44',
    '45',
    '46',
    '47',
    '48',
    '49',
    '4a',
    '4b',
    '4c',
    '4d',
    '4e',
    '4f',
    '50',
    '51',
    '52',
    '53',
    '54',
    '55',
    '56',
    '57',
    '58',
    '59',
    '5a',
    '5b',
    '5c',
    '5d',
    '5e',
    '5f',
    '60',
    '61',
    '62',
    '63',
    '64',
    '65',
    '66',
    '67',
    '68',
    '69',
    '6a',
    '6b',
    '6c',
    '6d',
    '6e',
    '6f',
    '70',
    '71',
    '72',
    '73',
    '74',
    '75',
    '76',
    '77',
    '78',
    '79',
    '7a',
    '7b',
    '7c',
    '7d',
    '7e',
    '7f',
    '80',
    '81',
    '82',
    '83',
    '84',
    '85',
    '86',
    '87',
    '88',
    '89',
    '8a',
    '8b',
    '8c',
    '8d',
    '8e',
    '8f',
    '90',
    '91',
    '92',
    '93',
    '94',
    '95',
    '96',
    '97',
    '98',
    '99',
    '9a',
    '9b',
    '9c',
    '9d',
    '9e',
    '9f',
    'a0',
    'a1',
    'a2',
    'a3',
    'a4',
    'a5',
    'a6',
    'a7',
    'a8',
    'a9',
    'aa',
    'ab',
    'ac',
    'ad',
    'ae',
    'af',
    'b0',
    'b1',
    'b2',
    'b3',
    'b4',
    'b5',
    'b6',
    'b7',
    'b8',
    'b9',
    'ba',
    'bb',
    'bc',
    'bd',
    'be',
    'bf',
    'c0',
    'c1',
    'c2',
    'c3',
    'c4',
    'c5',
    'c6',
    'c7',
    'c8',
    'c9',
    'ca',
    'cb',
    'cc',
    'cd',
    'ce',
    'cf',
    'd0',
    'd1',
    'd2',
    'd3',
    'd4',
    'd5',
    'd6',
    'd7',
    'd8',
    'd9',
    'da',
    'db',
    'dc',
    'dd',
    'de',
    'df',
    'e0',
    'e1',
    'e2',
    'e3',
    'e4',
    'e5',
    'e6',
    'e7',
    'e8',
    'e9',
    'ea',
    'eb',
    'ec',
    'ed',
    'ee',
    'ef',
    'f0',
    'f1',
    'f2',
    'f3',
    'f4',
    'f5',
    'f6',
    'f7',
    'f8',
    'f9',
    'fa',
    'fb',
    'fc',
    'fd',
    'fe',
    'ff'
];
function bufferToUpperCaseGuid(buffer) {
    return UPPER_CASE_MAP[buffer[3]] + UPPER_CASE_MAP[buffer[2]] + UPPER_CASE_MAP[buffer[1]] + UPPER_CASE_MAP[buffer[0]] + '-' + UPPER_CASE_MAP[buffer[5]] + UPPER_CASE_MAP[buffer[4]] + '-' + UPPER_CASE_MAP[buffer[7]] + UPPER_CASE_MAP[buffer[6]] + '-' + UPPER_CASE_MAP[buffer[8]] + UPPER_CASE_MAP[buffer[9]] + '-' + UPPER_CASE_MAP[buffer[10]] + UPPER_CASE_MAP[buffer[11]] + UPPER_CASE_MAP[buffer[12]] + UPPER_CASE_MAP[buffer[13]] + UPPER_CASE_MAP[buffer[14]] + UPPER_CASE_MAP[buffer[15]];
}
function bufferToLowerCaseGuid(buffer) {
    return LOWER_CASE_MAP[buffer[3]] + LOWER_CASE_MAP[buffer[2]] + LOWER_CASE_MAP[buffer[1]] + LOWER_CASE_MAP[buffer[0]] + '-' + LOWER_CASE_MAP[buffer[5]] + LOWER_CASE_MAP[buffer[4]] + '-' + LOWER_CASE_MAP[buffer[7]] + LOWER_CASE_MAP[buffer[6]] + '-' + LOWER_CASE_MAP[buffer[8]] + LOWER_CASE_MAP[buffer[9]] + '-' + LOWER_CASE_MAP[buffer[10]] + LOWER_CASE_MAP[buffer[11]] + LOWER_CASE_MAP[buffer[12]] + LOWER_CASE_MAP[buffer[13]] + LOWER_CASE_MAP[buffer[14]] + LOWER_CASE_MAP[buffer[15]];
}
const CHARCODEMAP = {};
const hexDigits = [
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F'
].map((d)=>d.charCodeAt(0));
for(let i = 0; i < hexDigits.length; i++){
    const map = CHARCODEMAP[hexDigits[i]] = {};
    for(let j = 0; j < hexDigits.length; j++){
        const hex = String.fromCharCode(hexDigits[i], hexDigits[j]);
        const value = parseInt(hex, 16);
        map[hexDigits[j]] = value;
    }
}
function guidToArray(guid) {
    return [
        CHARCODEMAP[guid.charCodeAt(6)][guid.charCodeAt(7)],
        CHARCODEMAP[guid.charCodeAt(4)][guid.charCodeAt(5)],
        CHARCODEMAP[guid.charCodeAt(2)][guid.charCodeAt(3)],
        CHARCODEMAP[guid.charCodeAt(0)][guid.charCodeAt(1)],
        CHARCODEMAP[guid.charCodeAt(11)][guid.charCodeAt(12)],
        CHARCODEMAP[guid.charCodeAt(9)][guid.charCodeAt(10)],
        CHARCODEMAP[guid.charCodeAt(16)][guid.charCodeAt(17)],
        CHARCODEMAP[guid.charCodeAt(14)][guid.charCodeAt(15)],
        CHARCODEMAP[guid.charCodeAt(19)][guid.charCodeAt(20)],
        CHARCODEMAP[guid.charCodeAt(21)][guid.charCodeAt(22)],
        CHARCODEMAP[guid.charCodeAt(24)][guid.charCodeAt(25)],
        CHARCODEMAP[guid.charCodeAt(26)][guid.charCodeAt(27)],
        CHARCODEMAP[guid.charCodeAt(28)][guid.charCodeAt(29)],
        CHARCODEMAP[guid.charCodeAt(30)][guid.charCodeAt(31)],
        CHARCODEMAP[guid.charCodeAt(32)][guid.charCodeAt(33)],
        CHARCODEMAP[guid.charCodeAt(34)][guid.charCodeAt(35)]
    ];
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/data-type.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.typeByName = exports.TYPES = exports.TYPE = void 0;
var _null = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/null.js [middleware-edge] (ecmascript)"));
var _tinyint = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/tinyint.js [middleware-edge] (ecmascript)"));
var _bit = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/bit.js [middleware-edge] (ecmascript)"));
var _smallint = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/smallint.js [middleware-edge] (ecmascript)"));
var _int = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/int.js [middleware-edge] (ecmascript)"));
var _smalldatetime = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/smalldatetime.js [middleware-edge] (ecmascript)"));
var _real = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/real.js [middleware-edge] (ecmascript)"));
var _money = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/money.js [middleware-edge] (ecmascript)"));
var _datetime = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/datetime.js [middleware-edge] (ecmascript)"));
var _float = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/float.js [middleware-edge] (ecmascript)"));
var _decimal = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/decimal.js [middleware-edge] (ecmascript)"));
var _numeric = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/numeric.js [middleware-edge] (ecmascript)"));
var _smallmoney = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/smallmoney.js [middleware-edge] (ecmascript)"));
var _bigint = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/bigint.js [middleware-edge] (ecmascript)"));
var _image = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/image.js [middleware-edge] (ecmascript)"));
var _text = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/text.js [middleware-edge] (ecmascript)"));
var _uniqueidentifier = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/uniqueidentifier.js [middleware-edge] (ecmascript)"));
var _intn = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/intn.js [middleware-edge] (ecmascript)"));
var _ntext = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/ntext.js [middleware-edge] (ecmascript)"));
var _bitn = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/bitn.js [middleware-edge] (ecmascript)"));
var _decimaln = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/decimaln.js [middleware-edge] (ecmascript)"));
var _numericn = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/numericn.js [middleware-edge] (ecmascript)"));
var _floatn = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/floatn.js [middleware-edge] (ecmascript)"));
var _moneyn = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/moneyn.js [middleware-edge] (ecmascript)"));
var _datetimen = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/datetimen.js [middleware-edge] (ecmascript)"));
var _varbinary = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/varbinary.js [middleware-edge] (ecmascript)"));
var _varchar = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/varchar.js [middleware-edge] (ecmascript)"));
var _binary = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/binary.js [middleware-edge] (ecmascript)"));
var _char = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/char.js [middleware-edge] (ecmascript)"));
var _nvarchar = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/nvarchar.js [middleware-edge] (ecmascript)"));
var _nchar = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/nchar.js [middleware-edge] (ecmascript)"));
var _xml = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/xml.js [middleware-edge] (ecmascript)"));
var _time = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/time.js [middleware-edge] (ecmascript)"));
var _date = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/date.js [middleware-edge] (ecmascript)"));
var _datetime2 = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/datetime2.js [middleware-edge] (ecmascript)"));
var _datetimeoffset = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/datetimeoffset.js [middleware-edge] (ecmascript)"));
var _udt = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/udt.js [middleware-edge] (ecmascript)"));
var _tvp = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/tvp.js [middleware-edge] (ecmascript)"));
var _sqlVariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/data-types/sql-variant.js [middleware-edge] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TYPE = exports.TYPE = {
    [_null.default.id]: _null.default,
    [_tinyint.default.id]: _tinyint.default,
    [_bit.default.id]: _bit.default,
    [_smallint.default.id]: _smallint.default,
    [_int.default.id]: _int.default,
    [_smalldatetime.default.id]: _smalldatetime.default,
    [_real.default.id]: _real.default,
    [_money.default.id]: _money.default,
    [_datetime.default.id]: _datetime.default,
    [_float.default.id]: _float.default,
    [_decimal.default.id]: _decimal.default,
    [_numeric.default.id]: _numeric.default,
    [_smallmoney.default.id]: _smallmoney.default,
    [_bigint.default.id]: _bigint.default,
    [_image.default.id]: _image.default,
    [_text.default.id]: _text.default,
    [_uniqueidentifier.default.id]: _uniqueidentifier.default,
    [_intn.default.id]: _intn.default,
    [_ntext.default.id]: _ntext.default,
    [_bitn.default.id]: _bitn.default,
    [_decimaln.default.id]: _decimaln.default,
    [_numericn.default.id]: _numericn.default,
    [_floatn.default.id]: _floatn.default,
    [_moneyn.default.id]: _moneyn.default,
    [_datetimen.default.id]: _datetimen.default,
    [_varbinary.default.id]: _varbinary.default,
    [_varchar.default.id]: _varchar.default,
    [_binary.default.id]: _binary.default,
    [_char.default.id]: _char.default,
    [_nvarchar.default.id]: _nvarchar.default,
    [_nchar.default.id]: _nchar.default,
    [_xml.default.id]: _xml.default,
    [_time.default.id]: _time.default,
    [_date.default.id]: _date.default,
    [_datetime2.default.id]: _datetime2.default,
    [_datetimeoffset.default.id]: _datetimeoffset.default,
    [_udt.default.id]: _udt.default,
    [_tvp.default.id]: _tvp.default,
    [_sqlVariant.default.id]: _sqlVariant.default
};
/**
 * <table>
 * <thead>
 *   <tr>
 *     <th>Type</th>
 *     <th>Constant</th>
 *     <th>JavaScript</th>
 *     <th>Result set</th>
 *     <th>Parameter</th>
 *   </tr>
 * </thead>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="5">Exact numerics</th>
 *   </tr>
 *   <tr>
 *     <td><code>bit</code></td>
 *     <td><code>[[TYPES.Bit]]</code></td>
 *     <td><code>boolean</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>tinyint</code></td>
 *     <td><code>[[TYPES.TinyInt]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>smallint</code></td>
 *     <td><code>[[TYPES.SmallInt]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>int</code></td>
 *     <td><code>[[TYPES.Int]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>bigint</code><sup>1</sup></td>
 *     <td><code>[[TYPES.BigInt]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>numeric</code><sup>2</sup></td>
 *     <td><code>[[TYPES.Numeric]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>decimal</code><sup>2</sup></td>
 *     <td><code>[[TYPES.Decimal]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>smallmoney</code></td>
 *     <td><code>[[TYPES.SmallMoney]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>money</code></td>
 *     <td><code>[[TYPES.Money]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="5">Approximate numerics</th>
 *   </tr>
 *   <tr>
 *     <td><code>float</code></td>
 *     <td><code>[[TYPES.Float]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>real</code></td>
 *     <td><code>[[TYPES.Real]]</code></td>
 *     <td><code>number</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="4">Date and Time</th>
 *   </tr>
 *   <tr>
 *     <td><code>smalldatetime</code></td>
 *     <td><code>[[TYPES.SmallDateTime]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>datetime</code></td>
 *     <td><code>[[TYPES.DateTime]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>datetime2</code></td>
 *     <td><code>[[TYPES.DateTime2]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>datetimeoffset</code></td>
 *     <td><code>[[TYPES.DateTimeOffset]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>time</code></td>
 *     <td><code>[[TYPES.Time]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>date</code></td>
 *     <td><code>[[TYPES.Date]]</code></td>
 *     <td><code>Date</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="4">Character Strings</th>
 *   </tr>
 *   <tr>
 *     <td><code>char</code></td>
 *     <td><code>[[TYPES.Char]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>varchar</code><sup>3</sup></td>
 *     <td><code>[[TYPES.VarChar]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>text</code></td>
 *     <td><code>[[TYPES.Text]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="4">Unicode Strings</th>
 *   </tr>
 *   <tr>
 *     <td><code>nchar</code></td>
 *     <td><code>[[TYPES.NChar]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>nvarchar</code><sup>3</sup></td>
 *     <td><code>[[TYPES.NVarChar]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>ntext</code></td>
 *     <td><code>[[TYPES.NText]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>-</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="5">Binary Strings<sup>4</sup></th>
 *   </tr>
 *   <tr>
 *     <td><code>binary</code></td>
 *     <td><code>[[TYPES.Binary]]</code></td>
 *     <td><code>Buffer</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>varbinary</code></td>
 *     <td><code>[[TYPES.VarBinary]]</code></td>
 *     <td><code>Buffer</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>image</code></td>
 *     <td><code>[[TYPES.Image]]</code></td>
 *     <td><code>Buffer</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 * </tbody>
 *
 * <tbody>
 *   <tr class="group-heading">
 *     <th colspan="5">Other Data Types</th>
 *   </tr>
 *   <tr>
 *     <td><code>TVP</code></td>
 *     <td><code>[[TYPES.TVP]]</code></td>
 *     <td><code>Object</code></td>
 *     <td>-</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>UDT</code></td>
 *     <td><code>[[TYPES.UDT]]</code></td>
 *     <td><code>Buffer</code></td>
 *     <td>✓</td>
 *     <td>-</td>
 *   </tr>
 *   <tr>
 *     <td><code>uniqueidentifier</code><sup>4</sup></td>
 *     <td><code>[[TYPES.UniqueIdentifier]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>✓</td>
 *   </tr>
 *   <tr>
 *     <td><code>variant</code></td>
 *     <td><code>[[TYPES.Variant]]</code></td>
 *     <td><code>any</code></td>
 *     <td>✓</td>
 *     <td>-</td>
 *   </tr>
 *   <tr>
 *     <td><code>xml</code></td>
 *     <td><code>[[TYPES.Xml]]</code></td>
 *     <td><code>string</code></td>
 *     <td>✓</td>
 *     <td>-</td>
 *   </tr>
 * </tbody>
 * </table>
 *
 * <ol>
 *   <li>
 *     <h4>BigInt</h4>
 *     <p>
 *       Values are returned as a string. This is because values can exceed 53 bits of significant data, which is greater than a
 *       Javascript <code>number</code> type can represent as an integer.
 *     </p>
 *   </li>
 *   <li>
 *     <h4>Numerical, Decimal</h4>
 *     <p>
 *       For input parameters, default precision is 18 and default scale is 0. Maximum supported precision is 19.
 *     </p>
 *   </li>
 *   <li>
 *     <h4>VarChar, NVarChar</h4>
 *     <p>
 *       <code>varchar(max)</code> and <code>nvarchar(max)</code> are also supported.
 *     </p>
 *   </li>
 *   <li>
 *     <h4>UniqueIdentifier</h4>
 *     <p>
 *       Values are returned as a 16 byte hexadecimal string.
 *     </p>
 *     <p>
 *       Note that the order of bytes is not the same as the character representation. See
 *       <a href="http://msdn.microsoft.com/en-us/library/ms190215.aspx">Using uniqueidentifier Data</a>
 *       for an example of the different ordering of bytes.
 *     </p>
 *   </li>
 * </ol>
 */ const TYPES = exports.TYPES = {
    TinyInt: _tinyint.default,
    Bit: _bit.default,
    SmallInt: _smallint.default,
    Int: _int.default,
    SmallDateTime: _smalldatetime.default,
    Real: _real.default,
    Money: _money.default,
    DateTime: _datetime.default,
    Float: _float.default,
    Decimal: _decimal.default,
    Numeric: _numeric.default,
    SmallMoney: _smallmoney.default,
    BigInt: _bigint.default,
    Image: _image.default,
    Text: _text.default,
    UniqueIdentifier: _uniqueidentifier.default,
    NText: _ntext.default,
    VarBinary: _varbinary.default,
    VarChar: _varchar.default,
    Binary: _binary.default,
    Char: _char.default,
    NVarChar: _nvarchar.default,
    NChar: _nchar.default,
    Xml: _xml.default,
    Time: _time.default,
    Date: _date.default,
    DateTime2: _datetime2.default,
    DateTimeOffset: _datetimeoffset.default,
    UDT: _udt.default,
    TVP: _tvp.default,
    Variant: _sqlVariant.default
};
const typeByName = exports.typeByName = TYPES; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/metadata-parser.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
exports.readCollation = readCollation;
exports.readMetadata = readMetadata;
var _collation = __turbopack_context__.r("[project]/node_modules/tedious/lib/collation.js [middleware-edge] (ecmascript)");
var _dataType = __turbopack_context__.r("[project]/node_modules/tedious/lib/data-type.js [middleware-edge] (ecmascript)");
var _sprintfJs = __turbopack_context__.r("[project]/node_modules/sprintf-js/src/sprintf.js [middleware-edge] (ecmascript)");
var _helpers = __turbopack_context__.r("[project]/node_modules/tedious/lib/token/helpers.js [middleware-edge] (ecmascript)");
function readCollation(buf, offset) {
    offset = +offset;
    if (buf.length < offset + 5) {
        throw new _helpers.NotEnoughDataError(offset + 5);
    }
    const collation = _collation.Collation.fromBuffer(buf.slice(offset, offset + 5));
    return new _helpers.Result(collation, offset + 5);
}
function readSchema(buf, offset) {
    offset = +offset;
    let schemaPresent;
    ({ offset, value: schemaPresent } = (0, _helpers.readUInt8)(buf, offset));
    if (schemaPresent !== 0x01) {
        return new _helpers.Result(undefined, offset);
    }
    let dbname;
    ({ offset, value: dbname } = (0, _helpers.readBVarChar)(buf, offset));
    let owningSchema;
    ({ offset, value: owningSchema } = (0, _helpers.readBVarChar)(buf, offset));
    let xmlSchemaCollection;
    ({ offset, value: xmlSchemaCollection } = (0, _helpers.readUsVarChar)(buf, offset));
    return new _helpers.Result({
        dbname,
        owningSchema,
        xmlSchemaCollection
    }, offset);
}
function readUDTInfo(buf, offset) {
    let maxByteSize;
    ({ offset, value: maxByteSize } = (0, _helpers.readUInt16LE)(buf, offset));
    let dbname;
    ({ offset, value: dbname } = (0, _helpers.readBVarChar)(buf, offset));
    let owningSchema;
    ({ offset, value: owningSchema } = (0, _helpers.readBVarChar)(buf, offset));
    let typeName;
    ({ offset, value: typeName } = (0, _helpers.readBVarChar)(buf, offset));
    let assemblyName;
    ({ offset, value: assemblyName } = (0, _helpers.readUsVarChar)(buf, offset));
    return new _helpers.Result({
        maxByteSize: maxByteSize,
        dbname: dbname,
        owningSchema: owningSchema,
        typeName: typeName,
        assemblyName: assemblyName
    }, offset);
}
function readMetadata(buf, offset, options) {
    let userType;
    ({ offset, value: userType } = (options.tdsVersion < '7_2' ? _helpers.readUInt16LE : _helpers.readUInt32LE)(buf, offset));
    let flags;
    ({ offset, value: flags } = (0, _helpers.readUInt16LE)(buf, offset));
    let typeNumber;
    ({ offset, value: typeNumber } = (0, _helpers.readUInt8)(buf, offset));
    const type = _dataType.TYPE[typeNumber];
    if (!type) {
        throw new Error((0, _sprintfJs.sprintf)('Unrecognised data type 0x%02X', typeNumber));
    }
    switch(type.name){
        case 'Null':
        case 'TinyInt':
        case 'SmallInt':
        case 'Int':
        case 'BigInt':
        case 'Real':
        case 'Float':
        case 'SmallMoney':
        case 'Money':
        case 'Bit':
        case 'SmallDateTime':
        case 'DateTime':
        case 'Date':
            return new _helpers.Result({
                userType: userType,
                flags: flags,
                type: type,
                collation: undefined,
                precision: undefined,
                scale: undefined,
                dataLength: undefined,
                schema: undefined,
                udtInfo: undefined
            }, offset);
        case 'IntN':
        case 'FloatN':
        case 'MoneyN':
        case 'BitN':
        case 'UniqueIdentifier':
        case 'DateTimeN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'Variant':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'VarChar':
        case 'Char':
        case 'NVarChar':
        case 'NChar':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt16LE)(buf, offset));
                let collation;
                ({ offset, value: collation } = readCollation(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: collation,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'Text':
        case 'NText':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                let collation;
                ({ offset, value: collation } = readCollation(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: collation,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'VarBinary':
        case 'Binary':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt16LE)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'Image':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'Xml':
            {
                let schema;
                ({ offset, value: schema } = readSchema(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: undefined,
                    schema: schema,
                    udtInfo: undefined
                }, offset);
            }
        case 'Time':
        case 'DateTime2':
        case 'DateTimeOffset':
            {
                let scale;
                ({ offset, value: scale } = (0, _helpers.readUInt8)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: scale,
                    dataLength: undefined,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'NumericN':
        case 'DecimalN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                let precision;
                ({ offset, value: precision } = (0, _helpers.readUInt8)(buf, offset));
                let scale;
                ({ offset, value: scale } = (0, _helpers.readUInt8)(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: precision,
                    scale: scale,
                    dataLength: dataLength,
                    schema: undefined,
                    udtInfo: undefined
                }, offset);
            }
        case 'UDT':
            {
                let udtInfo;
                ({ offset, value: udtInfo } = readUDTInfo(buf, offset));
                return new _helpers.Result({
                    userType: userType,
                    flags: flags,
                    type: type,
                    collation: undefined,
                    precision: undefined,
                    scale: undefined,
                    dataLength: undefined,
                    schema: undefined,
                    udtInfo: udtInfo
                }, offset);
            }
        default:
            throw new Error((0, _sprintfJs.sprintf)('Unrecognised type %s', type.name));
    }
}
function metadataParse(parser, options, callback) {
    (async ()=>{
        while(true){
            let result;
            try {
                result = readMetadata(parser.buffer, parser.position, options);
            } catch (err) {
                if (err instanceof _helpers.NotEnoughDataError) {
                    await parser.waitForChunk();
                    continue;
                }
                throw err;
            }
            parser.position = result.offset;
            return callback(result.value);
        }
    })();
}
var _default = exports.default = metadataParse;
module.exports = metadataParse;
module.exports.readCollation = readCollation;
module.exports.readMetadata = readMetadata; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/value-parser.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isPLPStream = isPLPStream;
exports.readPLPStream = readPLPStream;
exports.readValue = readValue;
var _metadataParser = __turbopack_context__.r("[project]/node_modules/tedious/lib/metadata-parser.js [middleware-edge] (ecmascript)");
var _dataType = __turbopack_context__.r("[project]/node_modules/tedious/lib/data-type.js [middleware-edge] (ecmascript)");
var _iconvLite = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/iconv-lite/lib/index.js [middleware-edge] (ecmascript)"));
var _sprintfJs = __turbopack_context__.r("[project]/node_modules/sprintf-js/src/sprintf.js [middleware-edge] (ecmascript)");
var _guidParser = __turbopack_context__.r("[project]/node_modules/tedious/lib/guid-parser.js [middleware-edge] (ecmascript)");
var _helpers = __turbopack_context__.r("[project]/node_modules/tedious/lib/token/helpers.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const NULL = (1 << 16) - 1;
const MAX = (1 << 16) - 1;
const THREE_AND_A_THIRD = 3 + 1 / 3;
const MONEY_DIVISOR = 10000;
const PLP_NULL = 0xFFFFFFFFFFFFFFFFn;
const UNKNOWN_PLP_LEN = 0xFFFFFFFFFFFFFFFEn;
const DEFAULT_ENCODING = 'utf8';
function readTinyInt(buf, offset) {
    return (0, _helpers.readUInt8)(buf, offset);
}
function readSmallInt(buf, offset) {
    return (0, _helpers.readInt16LE)(buf, offset);
}
function readInt(buf, offset) {
    return (0, _helpers.readInt32LE)(buf, offset);
}
function readBigInt(buf, offset) {
    let value;
    ({ offset, value } = (0, _helpers.readBigInt64LE)(buf, offset));
    return new _helpers.Result(value.toString(), offset);
}
function readReal(buf, offset) {
    return (0, _helpers.readFloatLE)(buf, offset);
}
function readFloat(buf, offset) {
    return (0, _helpers.readDoubleLE)(buf, offset);
}
function readSmallMoney(buf, offset) {
    let value;
    ({ offset, value } = (0, _helpers.readInt32LE)(buf, offset));
    return new _helpers.Result(value / MONEY_DIVISOR, offset);
}
function readMoney(buf, offset) {
    let high;
    ({ offset, value: high } = (0, _helpers.readInt32LE)(buf, offset));
    let low;
    ({ offset, value: low } = (0, _helpers.readUInt32LE)(buf, offset));
    return new _helpers.Result((low + 0x100000000 * high) / MONEY_DIVISOR, offset);
}
function readBit(buf, offset) {
    let value;
    ({ offset, value } = (0, _helpers.readUInt8)(buf, offset));
    return new _helpers.Result(!!value, offset);
}
function readValue(buf, offset, metadata, options) {
    const type = metadata.type;
    switch(type.name){
        case 'Null':
            return new _helpers.Result(null, offset);
        case 'TinyInt':
            {
                return readTinyInt(buf, offset);
            }
        case 'SmallInt':
            {
                return readSmallInt(buf, offset);
            }
        case 'Int':
            {
                return readInt(buf, offset);
            }
        case 'BigInt':
            {
                return readBigInt(buf, offset);
            }
        case 'IntN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 1:
                        return readTinyInt(buf, offset);
                    case 2:
                        return readSmallInt(buf, offset);
                    case 4:
                        return readInt(buf, offset);
                    case 8:
                        return readBigInt(buf, offset);
                    default:
                        throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');
                }
            }
        case 'Real':
            {
                return readReal(buf, offset);
            }
        case 'Float':
            {
                return readFloat(buf, offset);
            }
        case 'FloatN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 4:
                        return readReal(buf, offset);
                    case 8:
                        return readFloat(buf, offset);
                    default:
                        throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');
                }
            }
        case 'SmallMoney':
            {
                return readSmallMoney(buf, offset);
            }
        case 'Money':
            return readMoney(buf, offset);
        case 'MoneyN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 4:
                        return readSmallMoney(buf, offset);
                    case 8:
                        return readMoney(buf, offset);
                    default:
                        throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');
                }
            }
        case 'Bit':
            {
                return readBit(buf, offset);
            }
        case 'BitN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 1:
                        return readBit(buf, offset);
                    default:
                        throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');
                }
            }
        case 'VarChar':
        case 'Char':
            {
                const codepage = metadata.collation.codepage;
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt16LE)(buf, offset));
                if (dataLength === NULL) {
                    return new _helpers.Result(null, offset);
                }
                return readChars(buf, offset, dataLength, codepage);
            }
        case 'NVarChar':
        case 'NChar':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt16LE)(buf, offset));
                if (dataLength === NULL) {
                    return new _helpers.Result(null, offset);
                }
                return readNChars(buf, offset, dataLength);
            }
        case 'VarBinary':
        case 'Binary':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt16LE)(buf, offset));
                if (dataLength === NULL) {
                    return new _helpers.Result(null, offset);
                }
                return readBinary(buf, offset, dataLength);
            }
        case 'Text':
            {
                let textPointerLength;
                ({ offset, value: textPointerLength } = (0, _helpers.readUInt8)(buf, offset));
                if (textPointerLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                // Textpointer
                ({ offset } = readBinary(buf, offset, textPointerLength));
                // Timestamp
                ({ offset } = readBinary(buf, offset, 8));
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                return readChars(buf, offset, dataLength, metadata.collation.codepage);
            }
        case 'NText':
            {
                let textPointerLength;
                ({ offset, value: textPointerLength } = (0, _helpers.readUInt8)(buf, offset));
                if (textPointerLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                // Textpointer
                ({ offset } = readBinary(buf, offset, textPointerLength));
                // Timestamp
                ({ offset } = readBinary(buf, offset, 8));
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                return readNChars(buf, offset, dataLength);
            }
        case 'Image':
            {
                let textPointerLength;
                ({ offset, value: textPointerLength } = (0, _helpers.readUInt8)(buf, offset));
                if (textPointerLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                // Textpointer
                ({ offset } = readBinary(buf, offset, textPointerLength));
                // Timestamp
                ({ offset } = readBinary(buf, offset, 8));
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                return readBinary(buf, offset, dataLength);
            }
        case 'SmallDateTime':
            {
                return readSmallDateTime(buf, offset, options.useUTC);
            }
        case 'DateTime':
            {
                return readDateTime(buf, offset, options.useUTC);
            }
        case 'DateTimeN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 4:
                        return readSmallDateTime(buf, offset, options.useUTC);
                    case 8:
                        return readDateTime(buf, offset, options.useUTC);
                    default:
                        throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');
                }
            }
        case 'Time':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readTime(buf, offset, dataLength, metadata.scale, options.useUTC);
            }
        case 'Date':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readDate(buf, offset, options.useUTC);
            }
        case 'DateTime2':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readDateTime2(buf, offset, dataLength, metadata.scale, options.useUTC);
            }
        case 'DateTimeOffset':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readDateTimeOffset(buf, offset, dataLength, metadata.scale);
            }
        case 'NumericN':
        case 'DecimalN':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readNumeric(buf, offset, dataLength, metadata.precision, metadata.scale);
            }
        case 'UniqueIdentifier':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt8)(buf, offset));
                switch(dataLength){
                    case 0:
                        return new _helpers.Result(null, offset);
                    case 0x10:
                        return readUniqueIdentifier(buf, offset, options);
                    default:
                        throw new Error((0, _sprintfJs.sprintf)('Unsupported guid size %d', dataLength - 1));
                }
            }
        case 'Variant':
            {
                let dataLength;
                ({ offset, value: dataLength } = (0, _helpers.readUInt32LE)(buf, offset));
                if (dataLength === 0) {
                    return new _helpers.Result(null, offset);
                }
                return readVariant(buf, offset, options, dataLength);
            }
        default:
            {
                throw new Error('Invalid type!');
            }
    }
}
function isPLPStream(metadata) {
    switch(metadata.type.name){
        case 'VarChar':
        case 'NVarChar':
        case 'VarBinary':
            {
                return metadata.dataLength === MAX;
            }
        case 'Xml':
            {
                return true;
            }
        case 'UDT':
            {
                return true;
            }
    }
}
function readUniqueIdentifier(buf, offset, options) {
    let data;
    ({ value: data, offset } = readBinary(buf, offset, 0x10));
    return new _helpers.Result(options.lowerCaseGuids ? (0, _guidParser.bufferToLowerCaseGuid)(data) : (0, _guidParser.bufferToUpperCaseGuid)(data), offset);
}
function readNumeric(buf, offset, dataLength, _precision, scale) {
    let sign;
    ({ offset, value: sign } = (0, _helpers.readUInt8)(buf, offset));
    sign = sign === 1 ? 1 : -1;
    let value;
    if (dataLength === 5) {
        ({ offset, value } = (0, _helpers.readUInt32LE)(buf, offset));
    } else if (dataLength === 9) {
        ({ offset, value } = (0, _helpers.readUNumeric64LE)(buf, offset));
    } else if (dataLength === 13) {
        ({ offset, value } = (0, _helpers.readUNumeric96LE)(buf, offset));
    } else if (dataLength === 17) {
        ({ offset, value } = (0, _helpers.readUNumeric128LE)(buf, offset));
    } else {
        throw new Error((0, _sprintfJs.sprintf)('Unsupported numeric dataLength %d', dataLength));
    }
    return new _helpers.Result(value * sign / Math.pow(10, scale), offset);
}
function readVariant(buf, offset, options, dataLength) {
    let baseType;
    ({ value: baseType, offset } = (0, _helpers.readUInt8)(buf, offset));
    const type = _dataType.TYPE[baseType];
    let propBytes;
    ({ value: propBytes, offset } = (0, _helpers.readUInt8)(buf, offset));
    dataLength = dataLength - propBytes - 2;
    switch(type.name){
        case 'UniqueIdentifier':
            return readUniqueIdentifier(buf, offset, options);
        case 'Bit':
            return readBit(buf, offset);
        case 'TinyInt':
            return readTinyInt(buf, offset);
        case 'SmallInt':
            return readSmallInt(buf, offset);
        case 'Int':
            return readInt(buf, offset);
        case 'BigInt':
            return readBigInt(buf, offset);
        case 'SmallDateTime':
            return readSmallDateTime(buf, offset, options.useUTC);
        case 'DateTime':
            return readDateTime(buf, offset, options.useUTC);
        case 'Real':
            return readReal(buf, offset);
        case 'Float':
            return readFloat(buf, offset);
        case 'SmallMoney':
            return readSmallMoney(buf, offset);
        case 'Money':
            return readMoney(buf, offset);
        case 'Date':
            return readDate(buf, offset, options.useUTC);
        case 'Time':
            {
                let scale;
                ({ value: scale, offset } = (0, _helpers.readUInt8)(buf, offset));
                return readTime(buf, offset, dataLength, scale, options.useUTC);
            }
        case 'DateTime2':
            {
                let scale;
                ({ value: scale, offset } = (0, _helpers.readUInt8)(buf, offset));
                return readDateTime2(buf, offset, dataLength, scale, options.useUTC);
            }
        case 'DateTimeOffset':
            {
                let scale;
                ({ value: scale, offset } = (0, _helpers.readUInt8)(buf, offset));
                return readDateTimeOffset(buf, offset, dataLength, scale);
            }
        case 'VarBinary':
        case 'Binary':
            {
                // maxLength (unused?)
                ({ offset } = (0, _helpers.readUInt16LE)(buf, offset));
                return readBinary(buf, offset, dataLength);
            }
        case 'NumericN':
        case 'DecimalN':
            {
                let precision;
                ({ value: precision, offset } = (0, _helpers.readUInt8)(buf, offset));
                let scale;
                ({ value: scale, offset } = (0, _helpers.readUInt8)(buf, offset));
                return readNumeric(buf, offset, dataLength, precision, scale);
            }
        case 'VarChar':
        case 'Char':
            {
                // maxLength (unused?)
                ({ offset } = (0, _helpers.readUInt16LE)(buf, offset));
                let collation;
                ({ value: collation, offset } = (0, _metadataParser.readCollation)(buf, offset));
                return readChars(buf, offset, dataLength, collation.codepage);
            }
        case 'NVarChar':
        case 'NChar':
            {
                // maxLength (unused?)
                ({ offset } = (0, _helpers.readUInt16LE)(buf, offset));
                // collation (unused?)
                ({ offset } = (0, _metadataParser.readCollation)(buf, offset));
                return readNChars(buf, offset, dataLength);
            }
        default:
            throw new Error('Invalid type!');
    }
}
function readBinary(buf, offset, dataLength) {
    if (buf.length < offset + dataLength) {
        throw new _helpers.NotEnoughDataError(offset + dataLength);
    }
    return new _helpers.Result(buf.slice(offset, offset + dataLength), offset + dataLength);
}
function readChars(buf, offset, dataLength, codepage) {
    if (buf.length < offset + dataLength) {
        throw new _helpers.NotEnoughDataError(offset + dataLength);
    }
    return new _helpers.Result(_iconvLite.default.decode(buf.slice(offset, offset + dataLength), codepage ?? DEFAULT_ENCODING), offset + dataLength);
}
function readNChars(buf, offset, dataLength) {
    if (buf.length < offset + dataLength) {
        throw new _helpers.NotEnoughDataError(offset + dataLength);
    }
    return new _helpers.Result(buf.toString('ucs2', offset, offset + dataLength), offset + dataLength);
}
async function readPLPStream(parser) {
    while(parser.buffer.length < parser.position + 8){
        await parser.waitForChunk();
    }
    const expectedLength = parser.buffer.readBigUInt64LE(parser.position);
    parser.position += 8;
    if (expectedLength === PLP_NULL) {
        return null;
    }
    const chunks = [];
    let currentLength = 0;
    while(true){
        while(parser.buffer.length < parser.position + 4){
            await parser.waitForChunk();
        }
        const chunkLength = parser.buffer.readUInt32LE(parser.position);
        parser.position += 4;
        if (!chunkLength) {
            break;
        }
        while(parser.buffer.length < parser.position + chunkLength){
            await parser.waitForChunk();
        }
        chunks.push(parser.buffer.slice(parser.position, parser.position + chunkLength));
        parser.position += chunkLength;
        currentLength += chunkLength;
    }
    if (expectedLength !== UNKNOWN_PLP_LEN) {
        if (currentLength !== Number(expectedLength)) {
            throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + expectedLength + ', but got ' + currentLength + ' bytes');
        }
    }
    return chunks;
}
function readSmallDateTime(buf, offset, useUTC) {
    let days;
    ({ offset, value: days } = (0, _helpers.readUInt16LE)(buf, offset));
    let minutes;
    ({ offset, value: minutes } = (0, _helpers.readUInt16LE)(buf, offset));
    let value;
    if (useUTC) {
        value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));
    } else {
        value = new Date(1900, 0, 1 + days, 0, minutes);
    }
    return new _helpers.Result(value, offset);
}
function readDateTime(buf, offset, useUTC) {
    let days;
    ({ offset, value: days } = (0, _helpers.readInt32LE)(buf, offset));
    let threeHundredthsOfSecond;
    ({ offset, value: threeHundredthsOfSecond } = (0, _helpers.readInt32LE)(buf, offset));
    const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);
    let value;
    if (useUTC) {
        value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));
    } else {
        value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);
    }
    return new _helpers.Result(value, offset);
}
function readTime(buf, offset, dataLength, scale, useUTC) {
    let value;
    switch(dataLength){
        case 3:
            {
                ({ value, offset } = (0, _helpers.readUInt24LE)(buf, offset));
                break;
            }
        case 4:
            {
                ({ value, offset } = (0, _helpers.readUInt32LE)(buf, offset));
                break;
            }
        case 5:
            {
                ({ value, offset } = (0, _helpers.readUInt40LE)(buf, offset));
                break;
            }
        default:
            {
                throw new Error('unreachable');
            }
    }
    if (scale < 7) {
        for(let i = scale; i < 7; i++){
            value *= 10;
        }
    }
    let date;
    if (useUTC) {
        date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000));
    } else {
        date = new Date(1970, 0, 1, 0, 0, 0, value / 10000);
    }
    Object.defineProperty(date, 'nanosecondsDelta', {
        enumerable: false,
        value: value % 10000 / Math.pow(10, 7)
    });
    return new _helpers.Result(date, offset);
}
function readDate(buf, offset, useUTC) {
    let days;
    ({ offset, value: days } = (0, _helpers.readUInt24LE)(buf, offset));
    if (useUTC) {
        return new _helpers.Result(new Date(Date.UTC(2000, 0, days - 730118)), offset);
    } else {
        return new _helpers.Result(new Date(2000, 0, days - 730118), offset);
    }
}
function readDateTime2(buf, offset, dataLength, scale, useUTC) {
    let time;
    ({ offset, value: time } = readTime(buf, offset, dataLength - 3, scale, useUTC));
    let days;
    ({ offset, value: days } = (0, _helpers.readUInt24LE)(buf, offset));
    let date;
    if (useUTC) {
        date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));
    } else {
        date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
    }
    Object.defineProperty(date, 'nanosecondsDelta', {
        enumerable: false,
        value: time.nanosecondsDelta
    });
    return new _helpers.Result(date, offset);
}
function readDateTimeOffset(buf, offset, dataLength, scale) {
    let time;
    ({ offset, value: time } = readTime(buf, offset, dataLength - 5, scale, true));
    let days;
    ({ offset, value: days } = (0, _helpers.readUInt24LE)(buf, offset));
    // time offset?
    ({ offset } = (0, _helpers.readUInt16LE)(buf, offset));
    const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time));
    Object.defineProperty(date, 'nanosecondsDelta', {
        enumerable: false,
        value: time.nanosecondsDelta
    });
    return new _helpers.Result(date, offset);
}
module.exports.readValue = readValue;
module.exports.isPLPStream = isPLPStream;
module.exports.readPLPStream = readPLPStream; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/token [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
__turbopack_context__.n(__import_unsupported(`stream`));
}}),
"[project]/node_modules/tedious/lib/transaction.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Transaction = exports.OPERATION_TYPE = exports.ISOLATION_LEVEL = void 0;
exports.assertValidIsolationLevel = assertValidIsolationLevel;
exports.isolationLevelByValue = void 0;
var _writableTrackingBuffer = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/tracking-buffer/writable-tracking-buffer.js [middleware-edge] (ecmascript)"));
var _allHeaders = __turbopack_context__.r("[project]/node_modules/tedious/lib/all-headers.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/*
  s2.2.6.8
 */ const OPERATION_TYPE = exports.OPERATION_TYPE = {
    TM_GET_DTC_ADDRESS: 0x00,
    TM_PROPAGATE_XACT: 0x01,
    TM_BEGIN_XACT: 0x05,
    TM_PROMOTE_XACT: 0x06,
    TM_COMMIT_XACT: 0x07,
    TM_ROLLBACK_XACT: 0x08,
    TM_SAVE_XACT: 0x09
};
const ISOLATION_LEVEL = exports.ISOLATION_LEVEL = {
    NO_CHANGE: 0x00,
    READ_UNCOMMITTED: 0x01,
    READ_COMMITTED: 0x02,
    REPEATABLE_READ: 0x03,
    SERIALIZABLE: 0x04,
    SNAPSHOT: 0x05
};
const isolationLevelByValue = exports.isolationLevelByValue = {};
for(const name in ISOLATION_LEVEL){
    const value = ISOLATION_LEVEL[name];
    isolationLevelByValue[value] = name;
}
function assertValidIsolationLevel(isolationLevel, name) {
    if (typeof isolationLevel !== 'number') {
        throw new TypeError(`The "${name}" ${name.includes('.') ? 'property' : 'argument'} must be of type number. Received type ${typeof isolationLevel} (${isolationLevel})`);
    }
    if (!Number.isInteger(isolationLevel)) {
        throw new RangeError(`The value of "${name}" is out of range. It must be an integer. Received: ${isolationLevel}`);
    }
    if (!(isolationLevel >= 0 && isolationLevel <= 5)) {
        throw new RangeError(`The value of "${name}" is out of range. It must be >= 0 && <= 5. Received: ${isolationLevel}`);
    }
}
class Transaction {
    constructor(name, isolationLevel = ISOLATION_LEVEL.NO_CHANGE){
        this.name = name;
        this.isolationLevel = isolationLevel;
        this.outstandingRequestCount = 1;
    }
    beginPayload(txnDescriptor) {
        const buffer = new _writableTrackingBuffer.default(100, 'ucs2');
        (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);
        buffer.writeUShort(OPERATION_TYPE.TM_BEGIN_XACT);
        buffer.writeUInt8(this.isolationLevel);
        buffer.writeUInt8(this.name.length * 2);
        buffer.writeString(this.name, 'ucs2');
        return {
            *[Symbol.iterator] () {
                yield buffer.data;
            },
            toString: ()=>{
                return 'Begin Transaction: name=' + this.name + ', isolationLevel=' + isolationLevelByValue[this.isolationLevel];
            }
        };
    }
    commitPayload(txnDescriptor) {
        const buffer = new _writableTrackingBuffer.default(100, 'ascii');
        (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);
        buffer.writeUShort(OPERATION_TYPE.TM_COMMIT_XACT);
        buffer.writeUInt8(this.name.length * 2);
        buffer.writeString(this.name, 'ucs2');
        // No fBeginXact flag, so no new transaction is started.
        buffer.writeUInt8(0);
        return {
            *[Symbol.iterator] () {
                yield buffer.data;
            },
            toString: ()=>{
                return 'Commit Transaction: name=' + this.name;
            }
        };
    }
    rollbackPayload(txnDescriptor) {
        const buffer = new _writableTrackingBuffer.default(100, 'ascii');
        (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);
        buffer.writeUShort(OPERATION_TYPE.TM_ROLLBACK_XACT);
        buffer.writeUInt8(this.name.length * 2);
        buffer.writeString(this.name, 'ucs2');
        // No fBeginXact flag, so no new transaction is started.
        buffer.writeUInt8(0);
        return {
            *[Symbol.iterator] () {
                yield buffer.data;
            },
            toString: ()=>{
                return 'Rollback Transaction: name=' + this.name;
            }
        };
    }
    savePayload(txnDescriptor) {
        const buffer = new _writableTrackingBuffer.default(100, 'ascii');
        (0, _allHeaders.writeToTrackingBuffer)(buffer, txnDescriptor, this.outstandingRequestCount);
        buffer.writeUShort(OPERATION_TYPE.TM_SAVE_XACT);
        buffer.writeUInt8(this.name.length * 2);
        buffer.writeString(this.name, 'ucs2');
        return {
            *[Symbol.iterator] () {
                yield buffer.data;
            },
            toString: ()=>{
                return 'Save Transaction: name=' + this.name;
            }
        };
    }
    isolationLevelToTSQL() {
        switch(this.isolationLevel){
            case ISOLATION_LEVEL.READ_UNCOMMITTED:
                return 'READ UNCOMMITTED';
            case ISOLATION_LEVEL.READ_COMMITTED:
                return 'READ COMMITTED';
            case ISOLATION_LEVEL.REPEATABLE_READ:
                return 'REPEATABLE READ';
            case ISOLATION_LEVEL.SERIALIZABLE:
                return 'SERIALIZABLE';
            case ISOLATION_LEVEL.SNAPSHOT:
                return 'SNAPSHOT';
        }
        return '';
    }
}
exports.Transaction = Transaction; //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/connector.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connectInParallel = connectInParallel;
exports.connectInSequence = connectInSequence;
exports.lookupAllAddresses = lookupAllAddresses;
var _net = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib [middleware-edge] (ecmascript)"));
var _nodeUrl = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/next/dist/compiled/native-url/index.js [middleware-edge] (ecmascript)"));
var _abortError = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/errors/abort-error.js [middleware-edge] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function connectInParallel(options, lookup, signal) {
    if (signal.aborted) {
        throw new _abortError.default();
    }
    const addresses = await lookupAllAddresses(options.host, lookup, signal);
    return await new Promise((resolve, reject)=>{
        const sockets = new Array(addresses.length);
        const errors = [];
        function onError(err) {
            errors.push(err);
            this.removeListener('error', onError);
            this.removeListener('connect', onConnect);
            this.destroy();
            if (errors.length === addresses.length) {
                signal.removeEventListener('abort', onAbort);
                reject(new AggregateError(errors, 'Could not connect (parallel)'));
            }
        }
        function onConnect() {
            signal.removeEventListener('abort', onAbort);
            for(let j = 0; j < sockets.length; j++){
                const socket = sockets[j];
                if (this === socket) {
                    continue;
                }
                socket.removeListener('error', onError);
                socket.removeListener('connect', onConnect);
                socket.destroy();
            }
            resolve(this);
        }
        const onAbort = ()=>{
            for(let j = 0; j < sockets.length; j++){
                const socket = sockets[j];
                socket.removeListener('error', onError);
                socket.removeListener('connect', onConnect);
                socket.destroy();
            }
            reject(new _abortError.default());
        };
        for(let i = 0, len = addresses.length; i < len; i++){
            const socket = sockets[i] = _net.default.connect({
                ...options,
                host: addresses[i].address,
                family: addresses[i].family
            });
            socket.on('error', onError);
            socket.on('connect', onConnect);
        }
        signal.addEventListener('abort', onAbort, {
            once: true
        });
    });
}
async function connectInSequence(options, lookup, signal) {
    if (signal.aborted) {
        throw new _abortError.default();
    }
    const errors = [];
    const addresses = await lookupAllAddresses(options.host, lookup, signal);
    for (const address of addresses){
        try {
            return await new Promise((resolve, reject)=>{
                const socket = _net.default.connect({
                    ...options,
                    host: address.address,
                    family: address.family
                });
                const onAbort = ()=>{
                    socket.removeListener('error', onError);
                    socket.removeListener('connect', onConnect);
                    socket.destroy();
                    reject(new _abortError.default());
                };
                const onError = (err)=>{
                    signal.removeEventListener('abort', onAbort);
                    socket.removeListener('error', onError);
                    socket.removeListener('connect', onConnect);
                    socket.destroy();
                    reject(err);
                };
                const onConnect = ()=>{
                    signal.removeEventListener('abort', onAbort);
                    socket.removeListener('error', onError);
                    socket.removeListener('connect', onConnect);
                    resolve(socket);
                };
                signal.addEventListener('abort', onAbort, {
                    once: true
                });
                socket.on('error', onError);
                socket.on('connect', onConnect);
            });
        } catch (err) {
            if (err instanceof Error && err.name === 'AbortError') {
                throw err;
            }
            errors.push(err);
            continue;
        }
    }
    throw new AggregateError(errors, 'Could not connect (sequence)');
}
/**
 * Look up all addresses for the given hostname.
 */ async function lookupAllAddresses(host, lookup, signal) {
    if (signal.aborted) {
        throw new _abortError.default();
    }
    if (_net.default.isIPv6(host)) {
        return [
            {
                address: host,
                family: 6
            }
        ];
    } else if (_net.default.isIPv4(host)) {
        return [
            {
                address: host,
                family: 4
            }
        ];
    } else {
        return await new Promise((resolve, reject)=>{
            const onAbort = ()=>{
                reject(new _abortError.default());
            };
            signal.addEventListener('abort', onAbort);
            const domainInASCII = _nodeUrl.default.domainToASCII(host);
            lookup(domainInASCII === '' ? host : domainInASCII, {
                all: true
            }, (err, addresses)=>{
                signal.removeEventListener('abort', onAbort);
                err ? reject(err) : resolve(addresses);
            });
        });
    }
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/library.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.name = void 0;
const name = exports.name = 'Tedious'; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJuYW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uL3NyYy9saWJyYXJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBuYW1lID0gJ1RlZGlvdXMnO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxJQUFJLEdBQUFDLE9BQUEsQ0FBQUQsSUFBQSxHQUFHLFNBQVMifQ==
}}),
"[project]/node_modules/tedious/lib/ntlm.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/node:buffer [external] (node:buffer, cjs)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createNTLMRequest = createNTLMRequest;
const NTLMFlags = {
    NTLM_NegotiateUnicode: 0x00000001,
    NTLM_NegotiateOEM: 0x00000002,
    NTLM_RequestTarget: 0x00000004,
    NTLM_Unknown9: 0x00000008,
    NTLM_NegotiateSign: 0x00000010,
    NTLM_NegotiateSeal: 0x00000020,
    NTLM_NegotiateDatagram: 0x00000040,
    NTLM_NegotiateLanManagerKey: 0x00000080,
    NTLM_Unknown8: 0x00000100,
    NTLM_NegotiateNTLM: 0x00000200,
    NTLM_NegotiateNTOnly: 0x00000400,
    NTLM_Anonymous: 0x00000800,
    NTLM_NegotiateOemDomainSupplied: 0x00001000,
    NTLM_NegotiateOemWorkstationSupplied: 0x00002000,
    NTLM_Unknown6: 0x00004000,
    NTLM_NegotiateAlwaysSign: 0x00008000,
    NTLM_TargetTypeDomain: 0x00010000,
    NTLM_TargetTypeServer: 0x00020000,
    NTLM_TargetTypeShare: 0x00040000,
    NTLM_NegotiateExtendedSecurity: 0x00080000,
    NTLM_NegotiateIdentify: 0x00100000,
    NTLM_Unknown5: 0x00200000,
    NTLM_RequestNonNTSessionKey: 0x00400000,
    NTLM_NegotiateTargetInfo: 0x00800000,
    NTLM_Unknown4: 0x01000000,
    NTLM_NegotiateVersion: 0x02000000,
    NTLM_Unknown3: 0x04000000,
    NTLM_Unknown2: 0x08000000,
    NTLM_Unknown1: 0x10000000,
    NTLM_Negotiate128: 0x20000000,
    NTLM_NegotiateKeyExchange: 0x40000000,
    NTLM_Negotiate56: 0x80000000
};
function createNTLMRequest(options) {
    const domain = escape(options.domain.toUpperCase());
    const workstation = options.workstation ? escape(options.workstation.toUpperCase()) : '';
    let type1flags = NTLMFlags.NTLM_NegotiateUnicode + NTLMFlags.NTLM_NegotiateOEM + NTLMFlags.NTLM_RequestTarget + NTLMFlags.NTLM_NegotiateNTLM + NTLMFlags.NTLM_NegotiateOemDomainSupplied + NTLMFlags.NTLM_NegotiateOemWorkstationSupplied + NTLMFlags.NTLM_NegotiateAlwaysSign + NTLMFlags.NTLM_NegotiateVersion + NTLMFlags.NTLM_NegotiateExtendedSecurity + NTLMFlags.NTLM_Negotiate128 + NTLMFlags.NTLM_Negotiate56;
    if (workstation === '') {
        type1flags -= NTLMFlags.NTLM_NegotiateOemWorkstationSupplied;
    }
    const fixedData = __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].alloc(40);
    const buffers = [
        fixedData
    ];
    let offset = 0;
    offset += fixedData.write('NTLMSSP', offset, 7, 'ascii');
    offset = fixedData.writeUInt8(0, offset);
    offset = fixedData.writeUInt32LE(1, offset);
    offset = fixedData.writeUInt32LE(type1flags, offset);
    offset = fixedData.writeUInt16LE(domain.length, offset);
    offset = fixedData.writeUInt16LE(domain.length, offset);
    offset = fixedData.writeUInt32LE(fixedData.length + workstation.length, offset);
    offset = fixedData.writeUInt16LE(workstation.length, offset);
    offset = fixedData.writeUInt16LE(workstation.length, offset);
    offset = fixedData.writeUInt32LE(fixedData.length, offset);
    offset = fixedData.writeUInt8(5, offset);
    offset = fixedData.writeUInt8(0, offset);
    offset = fixedData.writeUInt16LE(2195, offset);
    offset = fixedData.writeUInt8(0, offset);
    offset = fixedData.writeUInt8(0, offset);
    offset = fixedData.writeUInt8(0, offset);
    fixedData.writeUInt8(15, offset);
    buffers.push(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(workstation, 'ascii'));
    buffers.push(__TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].from(domain, 'ascii'));
    return __TURBOPACK__imported__module__$5b$externals$5d2f$node$3a$buffer__$5b$external$5d$__$28$node$3a$buffer$2c$__cjs$29$__["Buffer"].concat(buffers);
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,
}}),
"[project]/node_modules/tedious/lib/bulk-load-payload.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BulkLoadPayload = void 0;
class BulkLoadPayload {
    constructor(bulkLoad){
        this.bulkLoad = bulkLoad;
        // We need to grab the iterator here so that `error` event handlers are set up
        // as early as possible (and are not potentially lost).
        this.iterator = this.bulkLoad.rowToPacketTransform[Symbol.asyncIterator]();
    }
    [Symbol.asyncIterator]() {
        return this.iterator;
    }
    toString(indent = '') {
        return indent + 'BulkLoad';
    }
}
exports.BulkLoadPayload = BulkLoadPayload; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCdWxrTG9hZFBheWxvYWQiLCJjb25zdHJ1Y3RvciIsImJ1bGtMb2FkIiwiaXRlcmF0b3IiLCJyb3dUb1BhY2tldFRyYW5zZm9ybSIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZyIsImluZGVudCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi9zcmMvYnVsay1sb2FkLXBheWxvYWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJ1bGtMb2FkIGZyb20gJy4vYnVsay1sb2FkJztcblxuZXhwb3J0IGNsYXNzIEJ1bGtMb2FkUGF5bG9hZCBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8QnVmZmVyPiB7XG4gIGRlY2xhcmUgYnVsa0xvYWQ6IEJ1bGtMb2FkO1xuICBkZWNsYXJlIGl0ZXJhdG9yOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8QnVmZmVyPjtcblxuICBjb25zdHJ1Y3RvcihidWxrTG9hZDogQnVsa0xvYWQpIHtcbiAgICB0aGlzLmJ1bGtMb2FkID0gYnVsa0xvYWQ7XG5cbiAgICAvLyBXZSBuZWVkIHRvIGdyYWIgdGhlIGl0ZXJhdG9yIGhlcmUgc28gdGhhdCBgZXJyb3JgIGV2ZW50IGhhbmRsZXJzIGFyZSBzZXQgdXBcbiAgICAvLyBhcyBlYXJseSBhcyBwb3NzaWJsZSAoYW5kIGFyZSBub3QgcG90ZW50aWFsbHkgbG9zdCkuXG4gICAgdGhpcy5pdGVyYXRvciA9IHRoaXMuYnVsa0xvYWQucm93VG9QYWNrZXRUcmFuc2Zvcm1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cblxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLml0ZXJhdG9yO1xuICB9XG5cbiAgdG9TdHJpbmcoaW5kZW50ID0gJycpIHtcbiAgICByZXR1cm4gaW5kZW50ICsgKCdCdWxrTG9hZCcpO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVPLE1BQU1BLGVBQWUsQ0FBa0M7RUFJNURDLFdBQVdBLENBQUNDLFFBQWtCLEVBQUU7SUFDOUIsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7O0lBRXhCO0lBQ0E7SUFDQSxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJLENBQUNELFFBQVEsQ0FBQ0Usb0JBQW9CLENBQUNDLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDLENBQUMsQ0FBQztFQUM1RTtFQUVBLENBQUNELE1BQU0sQ0FBQ0MsYUFBYSxJQUFJO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDSCxRQUFRO0VBQ3RCO0VBRUFJLFFBQVFBLENBQUNDLE1BQU0sR0FBRyxFQUFFLEVBQUU7SUFDcEIsT0FBT0EsTUFBTSxHQUFJLFVBQVc7RUFDOUI7QUFDRjtBQUFDQyxPQUFBLENBQUFULGVBQUEsR0FBQUEsZUFBQSJ9
}}),
"[project]/node_modules/tedious/lib/special-stored-procedure.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
const procedures = {
    Sp_Cursor: 1,
    Sp_CursorOpen: 2,
    Sp_CursorPrepare: 3,
    Sp_CursorExecute: 4,
    Sp_CursorPrepExec: 5,
    Sp_CursorUnprepare: 6,
    Sp_CursorFetch: 7,
    Sp_CursorOption: 8,
    Sp_CursorClose: 9,
    Sp_ExecuteSql: 10,
    Sp_Prepare: 11,
    Sp_Execute: 12,
    Sp_PrepExec: 13,
    Sp_PrepExecRpc: 14,
    Sp_Unprepare: 15
};
var _default = exports.default = procedures;
module.exports = procedures; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm9jZWR1cmVzIiwiU3BfQ3Vyc29yIiwiU3BfQ3Vyc29yT3BlbiIsIlNwX0N1cnNvclByZXBhcmUiLCJTcF9DdXJzb3JFeGVjdXRlIiwiU3BfQ3Vyc29yUHJlcEV4ZWMiLCJTcF9DdXJzb3JVbnByZXBhcmUiLCJTcF9DdXJzb3JGZXRjaCIsIlNwX0N1cnNvck9wdGlvbiIsIlNwX0N1cnNvckNsb3NlIiwiU3BfRXhlY3V0ZVNxbCIsIlNwX1ByZXBhcmUiLCJTcF9FeGVjdXRlIiwiU3BfUHJlcEV4ZWMiLCJTcF9QcmVwRXhlY1JwYyIsIlNwX1VucHJlcGFyZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi9zcmMvc3BlY2lhbC1zdG9yZWQtcHJvY2VkdXJlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHByb2NlZHVyZXMgPSB7XG4gIFNwX0N1cnNvcjogMSxcbiAgU3BfQ3Vyc29yT3BlbjogMixcbiAgU3BfQ3Vyc29yUHJlcGFyZTogMyxcbiAgU3BfQ3Vyc29yRXhlY3V0ZTogNCxcbiAgU3BfQ3Vyc29yUHJlcEV4ZWM6IDUsXG4gIFNwX0N1cnNvclVucHJlcGFyZTogNixcbiAgU3BfQ3Vyc29yRmV0Y2g6IDcsXG4gIFNwX0N1cnNvck9wdGlvbjogOCxcbiAgU3BfQ3Vyc29yQ2xvc2U6IDksXG4gIFNwX0V4ZWN1dGVTcWw6IDEwLFxuICBTcF9QcmVwYXJlOiAxMSxcbiAgU3BfRXhlY3V0ZTogMTIsXG4gIFNwX1ByZXBFeGVjOiAxMyxcbiAgU3BfUHJlcEV4ZWNScGM6IDE0LFxuICBTcF9VbnByZXBhcmU6IDE1XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwcm9jZWR1cmVzO1xubW9kdWxlLmV4cG9ydHMgPSBwcm9jZWR1cmVzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxNQUFNQSxVQUFVLEdBQUc7RUFDakJDLFNBQVMsRUFBRSxDQUFDO0VBQ1pDLGFBQWEsRUFBRSxDQUFDO0VBQ2hCQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ25CQyxnQkFBZ0IsRUFBRSxDQUFDO0VBQ25CQyxpQkFBaUIsRUFBRSxDQUFDO0VBQ3BCQyxrQkFBa0IsRUFBRSxDQUFDO0VBQ3JCQyxjQUFjLEVBQUUsQ0FBQztFQUNqQkMsZUFBZSxFQUFFLENBQUM7RUFDbEJDLGNBQWMsRUFBRSxDQUFDO0VBQ2pCQyxhQUFhLEVBQUUsRUFBRTtFQUNqQkMsVUFBVSxFQUFFLEVBQUU7RUFDZEMsVUFBVSxFQUFFLEVBQUU7RUFDZEMsV0FBVyxFQUFFLEVBQUU7RUFDZkMsY0FBYyxFQUFFLEVBQUU7RUFDbEJDLFlBQVksRUFBRTtBQUNoQixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFYWxCLFVBQVU7QUFDekJtQixNQUFNLENBQUNGLE9BQU8sR0FBR2pCLFVBQVUifQ==
}}),
"[project]/node_modules/tedious/lib/tedious.js [middleware-edge] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "BulkLoad", {
    enumerable: true,
    get: function() {
        return _bulkLoad.default;
    }
});
Object.defineProperty(exports, "Connection", {
    enumerable: true,
    get: function() {
        return _connection.default;
    }
});
Object.defineProperty(exports, "ConnectionError", {
    enumerable: true,
    get: function() {
        return _errors.ConnectionError;
    }
});
Object.defineProperty(exports, "ISOLATION_LEVEL", {
    enumerable: true,
    get: function() {
        return _transaction.ISOLATION_LEVEL;
    }
});
Object.defineProperty(exports, "Request", {
    enumerable: true,
    get: function() {
        return _request.default;
    }
});
Object.defineProperty(exports, "RequestError", {
    enumerable: true,
    get: function() {
        return _errors.RequestError;
    }
});
Object.defineProperty(exports, "TDS_VERSION", {
    enumerable: true,
    get: function() {
        return _tdsVersions.versions;
    }
});
Object.defineProperty(exports, "TYPES", {
    enumerable: true,
    get: function() {
        return _dataType.TYPES;
    }
});
exports.connect = connect;
exports.library = void 0;
var _bulkLoad = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/bulk-load.js [middleware-edge] (ecmascript)"));
var _connection = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/connection.js [middleware-edge] (ecmascript)"));
var _request = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/tedious/lib/request.js [middleware-edge] (ecmascript)"));
var _library = __turbopack_context__.r("[project]/node_modules/tedious/lib/library.js [middleware-edge] (ecmascript)");
var _errors = __turbopack_context__.r("[project]/node_modules/tedious/lib/errors.js [middleware-edge] (ecmascript)");
var _dataType = __turbopack_context__.r("[project]/node_modules/tedious/lib/data-type.js [middleware-edge] (ecmascript)");
var _transaction = __turbopack_context__.r("[project]/node_modules/tedious/lib/transaction.js [middleware-edge] (ecmascript)");
var _tdsVersions = __turbopack_context__.r("[project]/node_modules/tedious/lib/tds-versions.js [middleware-edge] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const library = exports.library = {
    name: _library.name
};
function connect(config, connectListener) {
    const connection = new _connection.default(config);
    connection.connect(connectListener);
    return connection;
} //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYnVsa0xvYWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb25uZWN0aW9uIiwiX3JlcXVlc3QiLCJfbGlicmFyeSIsIl9lcnJvcnMiLCJfZGF0YVR5cGUiLCJfdHJhbnNhY3Rpb24iLCJfdGRzVmVyc2lvbnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImxpYnJhcnkiLCJleHBvcnRzIiwibmFtZSIsImNvbm5lY3QiLCJjb25maWciLCJjb25uZWN0TGlzdGVuZXIiLCJjb25uZWN0aW9uIiwiQ29ubmVjdGlvbiJdLCJzb3VyY2VzIjpbIi4uL3NyYy90ZWRpb3VzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCdWxrTG9hZCBmcm9tICcuL2J1bGstbG9hZCc7XG5pbXBvcnQgQ29ubmVjdGlvbiwgeyB0eXBlIENvbm5lY3Rpb25BdXRoZW50aWNhdGlvbiwgdHlwZSBDb25uZWN0aW9uQ29uZmlndXJhdGlvbiwgdHlwZSBDb25uZWN0aW9uT3B0aW9ucyB9IGZyb20gJy4vY29ubmVjdGlvbic7XG5pbXBvcnQgUmVxdWVzdCBmcm9tICcuL3JlcXVlc3QnO1xuaW1wb3J0IHsgbmFtZSB9IGZyb20gJy4vbGlicmFyeSc7XG5cbmltcG9ydCB7IENvbm5lY3Rpb25FcnJvciwgUmVxdWVzdEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5pbXBvcnQgeyBUWVBFUyB9IGZyb20gJy4vZGF0YS10eXBlJztcbmltcG9ydCB7IElTT0xBVElPTl9MRVZFTCB9IGZyb20gJy4vdHJhbnNhY3Rpb24nO1xuaW1wb3J0IHsgdmVyc2lvbnMgYXMgVERTX1ZFUlNJT04gfSBmcm9tICcuL3Rkcy12ZXJzaW9ucyc7XG5cbmNvbnN0IGxpYnJhcnkgPSB7IG5hbWU6IG5hbWUgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3QoY29uZmlnOiBDb25uZWN0aW9uQ29uZmlndXJhdGlvbiwgY29ubmVjdExpc3RlbmVyPzogKGVycj86IEVycm9yKSA9PiB2b2lkKSB7XG4gIGNvbnN0IGNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbihjb25maWcpO1xuICBjb25uZWN0aW9uLmNvbm5lY3QoY29ubmVjdExpc3RlbmVyKTtcbiAgcmV0dXJuIGNvbm5lY3Rpb247XG59XG5cbmV4cG9ydCB7XG4gIEJ1bGtMb2FkLFxuICBDb25uZWN0aW9uLFxuICBSZXF1ZXN0LFxuICBsaWJyYXJ5LFxuICBDb25uZWN0aW9uRXJyb3IsXG4gIFJlcXVlc3RFcnJvcixcbiAgVFlQRVMsXG4gIElTT0xBVElPTl9MRVZFTCxcbiAgVERTX1ZFUlNJT05cbn07XG5cbmV4cG9ydCB0eXBlIHtcbiAgQ29ubmVjdGlvbkF1dGhlbnRpY2F0aW9uLFxuICBDb25uZWN0aW9uQ29uZmlndXJhdGlvbixcbiAgQ29ubmVjdGlvbk9wdGlvbnNcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxTQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxZQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxZQUFBLEdBQUFQLE9BQUE7QUFBeUQsU0FBQUQsdUJBQUFTLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFekQsTUFBTUcsT0FBTyxHQUFBQyxPQUFBLENBQUFELE9BQUEsR0FBRztFQUFFRSxJQUFJLEVBQUVBO0FBQUssQ0FBQztBQUV2QixTQUFTQyxPQUFPQSxDQUFDQyxNQUErQixFQUFFQyxlQUF1QyxFQUFFO0VBQ2hHLE1BQU1DLFVBQVUsR0FBRyxJQUFJQyxtQkFBVSxDQUFDSCxNQUFNLENBQUM7RUFDekNFLFVBQVUsQ0FBQ0gsT0FBTyxDQUFDRSxlQUFlLENBQUM7RUFDbkMsT0FBT0MsVUFBVTtBQUNuQiJ9
}}),
}]);

//# sourceMappingURL=node_modules_tedious_lib_9b3a369f._.js.map