{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/utils.js"],"sourcesContent":["const IDS = new WeakMap()\nconst INCREMENT = {\n  Connection: 1,\n  ConnectionPool: 1,\n  Request: 1,\n  Transaction: 1,\n  PreparedStatement: 1\n}\n\nmodule.exports = {\n  objectHasProperty: (object, property) => Object.prototype.hasOwnProperty.call(object, property),\n  INCREMENT,\n  IDS: {\n    get: IDS.get.bind(IDS),\n    add: (object, type, id) => {\n      if (id) return IDS.set(object, id)\n      IDS.set(object, INCREMENT[type]++)\n    }\n  }\n}\n"],"names":[],"mappings":"AAAA,MAAM,MAAM,IAAI;AAChB,MAAM,YAAY;IAChB,YAAY;IACZ,gBAAgB;IAChB,SAAS;IACT,aAAa;IACb,mBAAmB;AACrB;AAEA,OAAO,OAAO,GAAG;IACf,mBAAmB,CAAC,QAAQ,WAAa,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ;IACtF;IACA,KAAK;QACH,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC;QAClB,KAAK,CAAC,QAAQ,MAAM;YAClB,IAAI,IAAI,OAAO,IAAI,GAAG,CAAC,QAAQ;YAC/B,IAAI,GAAG,CAAC,QAAQ,SAAS,CAAC,KAAK;QACjC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/mssql-error.js"],"sourcesContent":["'use strict'\n\nclass MSSQLError extends Error {\n  /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    if (message instanceof Error) {\n      super(message.message)\n      this.code = message.code || code\n\n      Error.captureStackTrace(this, this.constructor)\n      Object.defineProperty(this, 'originalError', { enumerable: true, value: message })\n    } else {\n      super(message)\n      this.code = code\n    }\n\n    this.name = 'MSSQLError'\n  }\n}\n\nmodule.exports = MSSQLError\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,mBAAmB;IACvB;;;;;GAKC,GAED,YAAa,OAAO,EAAE,IAAI,CAAE;QAC1B,IAAI,mBAAmB,OAAO;YAC5B,KAAK,CAAC,QAAQ,OAAO;YACrB,IAAI,CAAC,IAAI,GAAG,QAAQ,IAAI,IAAI;YAE5B,MAAM,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW;YAC9C,OAAO,cAAc,CAAC,IAAI,EAAE,iBAAiB;gBAAE,YAAY;gBAAM,OAAO;YAAQ;QAClF,OAAO;YACL,KAAK,CAAC;YACN,IAAI,CAAC,IAAI,GAAG;QACd;QAEA,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/connection-error.js"],"sourcesContent":["'use strict'\n\nconst MSSQLError = require('./mssql-error')\n\n/**\n * Class ConnectionError.\n */\n\nclass ConnectionError extends MSSQLError {\n  /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'ConnectionError'\n  }\n}\n\nmodule.exports = ConnectionError\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AAEN;;CAEC,GAED,MAAM,wBAAwB;IAC5B;;;;;GAKC,GAED,YAAa,OAAO,EAAE,IAAI,CAAE;QAC1B,KAAK,CAAC,SAAS;QAEf,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/datatypes.js"],"sourcesContent":["'use strict'\nconst objectHasProperty = require('./utils').objectHasProperty\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst TYPES = {\n  VarChar (length) {\n    return { type: TYPES.VarChar, length }\n  },\n  NVarChar (length) {\n    return { type: TYPES.NVarChar, length }\n  },\n  Text () {\n    return { type: TYPES.Text }\n  },\n  Int () {\n    return { type: TYPES.Int }\n  },\n  BigInt () {\n    return { type: TYPES.BigInt }\n  },\n  TinyInt () {\n    return { type: TYPES.TinyInt }\n  },\n  SmallInt () {\n    return { type: TYPES.SmallInt }\n  },\n  Bit () {\n    return { type: TYPES.Bit }\n  },\n  Float () {\n    return { type: TYPES.Float }\n  },\n  Numeric (precision, scale) {\n    return { type: TYPES.Numeric, precision, scale }\n  },\n  Decimal (precision, scale) {\n    return { type: TYPES.Decimal, precision, scale }\n  },\n  Real () {\n    return { type: TYPES.Real }\n  },\n  Date () {\n    return { type: TYPES.Date }\n  },\n  DateTime () {\n    return { type: TYPES.DateTime }\n  },\n  DateTime2 (scale) {\n    return { type: TYPES.DateTime2, scale }\n  },\n  DateTimeOffset (scale) {\n    return { type: TYPES.DateTimeOffset, scale }\n  },\n  SmallDateTime () {\n    return { type: TYPES.SmallDateTime }\n  },\n  Time (scale) {\n    return { type: TYPES.Time, scale }\n  },\n  UniqueIdentifier () {\n    return { type: TYPES.UniqueIdentifier }\n  },\n  SmallMoney () {\n    return { type: TYPES.SmallMoney }\n  },\n  Money () {\n    return { type: TYPES.Money }\n  },\n  Binary (length) {\n    return { type: TYPES.Binary, length }\n  },\n  VarBinary (length) {\n    return { type: TYPES.VarBinary, length }\n  },\n  Image () {\n    return { type: TYPES.Image }\n  },\n  Xml () {\n    return { type: TYPES.Xml }\n  },\n  Char (length) {\n    return { type: TYPES.Char, length }\n  },\n  NChar (length) {\n    return { type: TYPES.NChar, length }\n  },\n  NText () {\n    return { type: TYPES.NText }\n  },\n  TVP (tvpType) {\n    return { type: TYPES.TVP, tvpType }\n  },\n  UDT () {\n    return { type: TYPES.UDT }\n  },\n  Geography () {\n    return { type: TYPES.Geography }\n  },\n  Geometry () {\n    return { type: TYPES.Geometry }\n  },\n  Variant () {\n    return { type: TYPES.Variant }\n  }\n}\n\nmodule.exports.TYPES = TYPES\nmodule.exports.DECLARATIONS = {}\n\nconst zero = function (value, length) {\n  if (length == null) length = 2\n\n  value = String(value)\n  if (value.length < length) {\n    for (let i = 1; i <= length - value.length; i++) {\n      value = `0${value}`\n    }\n  }\n  return value\n}\n\nfor (const key in TYPES) {\n  if (objectHasProperty(TYPES, key)) {\n    const value = TYPES[key]\n    value.declaration = key.toLowerCase()\n    module.exports.DECLARATIONS[value.declaration] = value;\n\n    ((key, value) => {\n      value[inspect] = () => `[sql.${key}]`\n    })(key, value)\n  }\n}\n\nmodule.exports.declare = (type, options) => {\n  switch (type) {\n    case TYPES.VarChar: case TYPES.VarBinary:\n      return `${type.declaration} (${options.length > 8000 ? 'MAX' : (options.length == null ? 'MAX' : options.length)})`\n    case TYPES.NVarChar:\n      return `${type.declaration} (${options.length > 4000 ? 'MAX' : (options.length == null ? 'MAX' : options.length)})`\n    case TYPES.Char: case TYPES.NChar: case TYPES.Binary:\n      return `${type.declaration} (${options.length == null ? 1 : options.length})`\n    case TYPES.Decimal: case TYPES.Numeric:\n      return `${type.declaration} (${options.precision == null ? 18 : options.precision}, ${options.scale == null ? 0 : options.scale})`\n    case TYPES.Time: case TYPES.DateTime2: case TYPES.DateTimeOffset:\n      return `${type.declaration} (${options.scale == null ? 7 : options.scale})`\n    case TYPES.TVP:\n      return `${options.tvpType} readonly`\n    default:\n      return type.declaration\n  }\n}\n\nmodule.exports.cast = (value, type, options) => {\n  if (value == null) {\n    return null\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return `N'${value.replace(/'/g, '\\'\\'')}'`\n\n    case 'number':\n    case 'bigint':\n      return value\n\n    case 'boolean':\n      return value ? 1 : 0\n\n    case 'object':\n      if (value instanceof Date) {\n        let ns = value.getUTCMilliseconds() / 1000\n        if (value.nanosecondDelta != null) {\n          ns += value.nanosecondDelta\n        }\n        const scale = options.scale == null ? 7 : options.scale\n\n        if (scale > 0) {\n          ns = String(ns).substr(1, scale + 1)\n        } else {\n          ns = ''\n        }\n\n        return `N'${value.getUTCFullYear()}-${zero(value.getUTCMonth() + 1)}-${zero(value.getUTCDate())} ${zero(value.getUTCHours())}:${zero(value.getUTCMinutes())}:${zero(value.getUTCSeconds())}${ns}'`\n      } else if (Buffer.isBuffer(value)) {\n        return `0x${value.toString('hex')}`\n      }\n\n      return null\n\n    default:\n      return null\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/table.js"],"sourcesContent":["'use strict'\n\nconst TYPES = require('./datatypes').TYPES\nconst declareType = require('./datatypes').declare\nconst objectHasProperty = require('./utils').objectHasProperty\n\nconst MAX = 65535 // (1 << 16) - 1\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B'\n\nfunction Table (name) {\n  if (name) {\n    const parsed = Table.parseName(name)\n    this.name = parsed.name\n    this.schema = parsed.schema\n    this.database = parsed.database\n    this.path = (this.database ? `[${this.database}].` : '') + (this.schema ? `[${this.schema}].` : '') + `[${this.name}]`\n    this.temporary = this.name.charAt(0) === '#'\n  }\n\n  this.columns = []\n  this.rows = []\n\n  Object.defineProperty(this.columns, 'add', {\n    value (name, column, options) {\n      if (column == null) {\n        throw new Error('Column data type is not defined.')\n      }\n      if (column instanceof Function) {\n        column = column()\n      }\n\n      options = options || {}\n      column.name = name;\n\n      ['nullable', 'primary', 'identity', 'readOnly', 'length'].forEach(prop => {\n        if (objectHasProperty(options, prop)) {\n          column[prop] = options[prop]\n        }\n      })\n\n      return this.push(column)\n    }\n  })\n\n  Object.defineProperty(this.rows, 'add', {\n    value () {\n      return this.push(Array.prototype.slice.call(arguments))\n    }\n  }\n  )\n\n  Object.defineProperty(this.rows, 'clear', {\n    value () {\n      return this.splice(0, this.length)\n    }\n  }\n  )\n}\n\n/*\n@private\n*/\n\nTable.prototype._makeBulk = function _makeBulk () {\n  for (let i = 0; i < this.columns.length; i++) {\n    const col = this.columns[i]\n    switch (col.type) {\n      case TYPES.Date:\n      case TYPES.DateTime:\n      case TYPES.DateTime2:\n        for (let j = 0; j < this.rows.length; j++) {\n          const dateValue = this.rows[j][i]\n          if (typeof dateValue === 'string' || typeof dateValue === 'number') {\n            const date = new Date(dateValue)\n            if (isNaN(date.getDate())) {\n              throw new TypeError('Invalid date value passed to bulk rows')\n            }\n            this.rows[j][i] = date\n          }\n        }\n        break\n\n      case TYPES.Xml:\n        col.type = TYPES.NVarChar(MAX).type\n        break\n\n      case TYPES.UDT:\n      case TYPES.Geography:\n      case TYPES.Geometry:\n        col.type = TYPES.VarBinary(MAX).type\n        break\n\n      default:\n        break\n    }\n  }\n\n  return this\n}\n\nTable.prototype.declare = function declare () {\n  const pkey = this.columns.filter(col => col.primary === true).map(col => `[${col.name}]`)\n  const cols = this.columns.map(col => {\n    const def = [`[${col.name}] ${declareType(col.type, col)}`]\n\n    if (col.nullable === true) {\n      def.push('null')\n    } else if (col.nullable === false) {\n      def.push('not null')\n    }\n\n    if (col.primary === true && pkey.length === 1) {\n      def.push('primary key')\n    }\n\n    return def.join(' ')\n  })\n\n  const constraint = pkey.length > 1 ? `, constraint [PK_${this.temporary ? this.name.substr(1) : this.name}] primary key (${pkey.join(', ')})` : ''\n  return `create table ${this.path} (${cols.join(', ')}${constraint})`\n}\n\nTable.fromRecordset = function fromRecordset (recordset, name) {\n  const t = new this(name)\n\n  for (const colName in recordset.columns) {\n    if (objectHasProperty(recordset.columns, colName)) {\n      const col = recordset.columns[colName]\n\n      t.columns.add(colName, {\n        type: col.type,\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      }, {\n        nullable: col.nullable,\n        identity: col.identity,\n        readOnly: col.readOnly\n      })\n    }\n  }\n\n  if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add(JSON.stringify(recordset[i]))\n    }\n  } else {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add.apply(t.rows, t.columns.map(col => recordset[i][col.name]))\n    }\n  }\n\n  return t\n}\n\nTable.parseName = function parseName (name) {\n  const length = name.length\n  let cursor = -1\n  let buffer = ''\n  let escaped = false\n  const path = []\n\n  while (++cursor < length) {\n    const char = name.charAt(cursor)\n    if (char === '[') {\n      if (escaped) {\n        buffer += char\n      } else {\n        escaped = true\n      }\n    } else if (char === ']') {\n      if (escaped) {\n        escaped = false\n      } else {\n        throw new Error('Invalid table name.')\n      }\n    } else if (char === '.') {\n      if (escaped) {\n        buffer += char\n      } else {\n        path.push(buffer)\n        buffer = ''\n      }\n    } else {\n      buffer += char\n    }\n  }\n\n  if (buffer) {\n    path.push(buffer)\n  }\n\n  switch (path.length) {\n    case 1:\n      return {\n        name: path[0],\n        schema: null,\n        database: null\n      }\n\n    case 2:\n      return {\n        name: path[1],\n        schema: path[0],\n        database: null\n      }\n\n    case 3:\n      return {\n        name: path[2],\n        schema: path[1],\n        database: path[0]\n      }\n\n    default:\n      throw new Error('Invalid table name.')\n  }\n}\n\nmodule.exports = Table\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/shared.js"],"sourcesContent":["'use strict'\n\nconst TYPES = require('./datatypes').TYPES\nconst Table = require('./table')\n\nlet PromiseLibrary = Promise\nconst driver = {}\nconst map = []\n\n/**\n * Register you own type map.\n *\n * @path module.exports.map\n * @param {*} jstype JS data type.\n * @param {*} sqltype SQL data type.\n */\n\nmap.register = function (jstype, sqltype) {\n  for (let index = 0; index < this.length; index++) {\n    const item = this[index]\n    if (item.js === jstype) {\n      this.splice(index, 1)\n      break\n    }\n  }\n\n  this.push({\n    js: jstype,\n    sql: sqltype\n  })\n\n  return null\n}\n\nmap.register(String, TYPES.NVarChar)\nmap.register(Number, TYPES.Int)\nmap.register(Boolean, TYPES.Bit)\nmap.register(Date, TYPES.DateTime)\nmap.register(Buffer, TYPES.VarBinary)\nmap.register(Table, TYPES.TVP)\n\n/**\n * @ignore\n */\n\nconst getTypeByValue = function (value) {\n  if ((value === null) || (value === undefined)) { return TYPES.NVarChar }\n\n  switch (typeof value) {\n    case 'string':\n      for (const item of Array.from(map)) {\n        if (item.js === String) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    case 'number':\n      if (value % 1 === 0) {\n        if (value < -2147483648 || value > 2147483647) {\n          return TYPES.BigInt\n        } else {\n          return TYPES.Int\n        }\n      } else {\n        return TYPES.Float\n      }\n\n    case 'bigint':\n      if (value < -2147483648n || value > 2147483647n) {\n        return TYPES.BigInt\n      } else {\n        return TYPES.Int\n      }\n\n    case 'boolean':\n      for (const item of Array.from(map)) {\n        if (item.js === Boolean) {\n          return item.sql\n        }\n      }\n\n      return TYPES.Bit\n\n    case 'object':\n      for (const item of Array.from(map)) {\n        if (value instanceof item.js) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    default:\n      return TYPES.NVarChar\n  }\n}\n\nmodule.exports = {\n  driver,\n  getTypeByValue,\n  map\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  get: () => {\n    return PromiseLibrary\n  },\n  set: (value) => {\n    PromiseLibrary = value\n  }\n})\n\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: new Map(),\n  writable: false,\n  configurable: false\n})\n"],"names":[],"mappings":"AAsCa;AAtCb;AAEA,MAAM,QAAQ,wGAAuB,KAAK;AAC1C,MAAM;AAEN,IAAI,iBAAiB;AACrB,MAAM,SAAS,CAAC;AAChB,MAAM,MAAM,EAAE;AAEd;;;;;;CAMC,GAED,IAAI,QAAQ,GAAG,SAAU,MAAM,EAAE,OAAO;IACtC,IAAK,IAAI,QAAQ,GAAG,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAS;QAChD,MAAM,OAAO,IAAI,CAAC,MAAM;QACxB,IAAI,KAAK,EAAE,KAAK,QAAQ;YACtB,IAAI,CAAC,MAAM,CAAC,OAAO;YACnB;QACF;IACF;IAEA,IAAI,CAAC,IAAI,CAAC;QACR,IAAI;QACJ,KAAK;IACP;IAEA,OAAO;AACT;AAEA,IAAI,QAAQ,CAAC,QAAQ,MAAM,QAAQ;AACnC,IAAI,QAAQ,CAAC,QAAQ,MAAM,GAAG;AAC9B,IAAI,QAAQ,CAAC,SAAS,MAAM,GAAG;AAC/B,IAAI,QAAQ,CAAC,MAAM,MAAM,QAAQ;AACjC,IAAI,QAAQ,CAAC,qHAAA,CAAA,SAAM,EAAE,MAAM,SAAS;AACpC,IAAI,QAAQ,CAAC,OAAO,MAAM,GAAG;AAE7B;;CAEC,GAED,MAAM,iBAAiB,SAAU,KAAK;IACpC,IAAI,AAAC,UAAU,QAAU,UAAU,WAAY;QAAE,OAAO,MAAM,QAAQ;IAAC;IAEvE,OAAQ,OAAO;QACb,KAAK;YACH,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC,KAAM;gBAClC,IAAI,KAAK,EAAE,KAAK,QAAQ;oBACtB,OAAO,KAAK,GAAG;gBACjB;YACF;YAEA,OAAO,MAAM,QAAQ;QAEvB,KAAK;YACH,IAAI,QAAQ,MAAM,GAAG;gBACnB,IAAI,QAAQ,CAAC,cAAc,QAAQ,YAAY;oBAC7C,OAAO,MAAM,MAAM;gBACrB,OAAO;oBACL,OAAO,MAAM,GAAG;gBAClB;YACF,OAAO;gBACL,OAAO,MAAM,KAAK;YACpB;QAEF,KAAK;YACH,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,WAAW,EAAE;gBAC/C,OAAO,MAAM,MAAM;YACrB,OAAO;gBACL,OAAO,MAAM,GAAG;YAClB;QAEF,KAAK;YACH,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC,KAAM;gBAClC,IAAI,KAAK,EAAE,KAAK,SAAS;oBACvB,OAAO,KAAK,GAAG;gBACjB;YACF;YAEA,OAAO,MAAM,GAAG;QAElB,KAAK;YACH,KAAK,MAAM,QAAQ,MAAM,IAAI,CAAC,KAAM;gBAClC,IAAI,iBAAiB,KAAK,EAAE,EAAE;oBAC5B,OAAO,KAAK,GAAG;gBACjB;YACF;YAEA,OAAO,MAAM,QAAQ;QAEvB;YACE,OAAO,MAAM,QAAQ;IACzB;AACF;AAEA,OAAO,OAAO,GAAG;IACf;IACA;IACA;AACF;AAEA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,WAAW;IAC/C,KAAK;QACH,OAAO;IACT;IACA,KAAK,CAAC;QACJ,iBAAiB;IACnB;AACF;AAEA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,gBAAgB;IACpD,YAAY;IACZ,OAAO,IAAI;IACX,UAAU;IACV,cAAc;AAChB","ignoreList":[0]}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/prepared-statement-error.js"],"sourcesContent":["'use strict'\n\nconst MSSQLError = require('./mssql-error')\n\n/**\n * Class PreparedStatementError.\n */\n\nclass PreparedStatementError extends MSSQLError {\n  /**\n   * Creates a new PreparedStatementError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'PreparedStatementError'\n  }\n}\n\nmodule.exports = PreparedStatementError\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AAEN;;CAEC,GAED,MAAM,+BAA+B;IACnC;;;;;GAKC,GAED,YAAa,OAAO,EAAE,IAAI,CAAE;QAC1B,KAAK,CAAC,SAAS;QAEf,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/request-error.js"],"sourcesContent":["'use strict'\n\nconst MSSQLError = require('./mssql-error')\n\n/**\n * Class RequestError.\n *\n * @property {String} number Error number.\n * @property {Number} lineNumber Line number.\n * @property {String} state Error state.\n * @property {String} class Error class.\n * @property {String} serverName Server name.\n * @property {String} procName Procedure name.\n */\n\nclass RequestError extends MSSQLError {\n  /**\n   * Creates a new RequestError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n    if (message instanceof Error) {\n      if (message.info) {\n        this.number = message.info.number || message.code // err.code is returned by msnodesql driver\n        this.lineNumber = message.info.lineNumber\n        this.state = message.info.state || message.sqlstate // err.sqlstate is returned by msnodesql driver\n        this.class = message.info.class\n        this.serverName = message.info.serverName\n        this.procName = message.info.procName\n      } else {\n        // Use err attributes returned by msnodesql driver\n        this.number = message.code\n        this.lineNumber = message.lineNumber\n        this.state = message.sqlstate\n        this.class = message.severity\n        this.serverName = message.serverName\n        this.procName = message.procName\n      }\n    }\n\n    this.name = 'RequestError'\n    const parsedMessage = (/^\\[Microsoft\\]\\[SQL Server Native Client 11\\.0\\](?:\\[SQL Server\\])?([\\s\\S]*)$/).exec(this.message)\n    if (parsedMessage) {\n      this.message = parsedMessage[1]\n    }\n  }\n}\n\nmodule.exports = RequestError\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AAEN;;;;;;;;;CASC,GAED,MAAM,qBAAqB;IACzB;;;;;GAKC,GAED,YAAa,OAAO,EAAE,IAAI,CAAE;QAC1B,KAAK,CAAC,SAAS;QACf,IAAI,mBAAmB,OAAO;YAC5B,IAAI,QAAQ,IAAI,EAAE;gBAChB,IAAI,CAAC,MAAM,GAAG,QAAQ,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,2CAA2C;;gBAC7F,IAAI,CAAC,UAAU,GAAG,QAAQ,IAAI,CAAC,UAAU;gBACzC,IAAI,CAAC,KAAK,GAAG,QAAQ,IAAI,CAAC,KAAK,IAAI,QAAQ,QAAQ,CAAC,+CAA+C;;gBACnG,IAAI,CAAC,KAAK,GAAG,QAAQ,IAAI,CAAC,KAAK;gBAC/B,IAAI,CAAC,UAAU,GAAG,QAAQ,IAAI,CAAC,UAAU;gBACzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,QAAQ;YACvC,OAAO;gBACL,kDAAkD;gBAClD,IAAI,CAAC,MAAM,GAAG,QAAQ,IAAI;gBAC1B,IAAI,CAAC,UAAU,GAAG,QAAQ,UAAU;gBACpC,IAAI,CAAC,KAAK,GAAG,QAAQ,QAAQ;gBAC7B,IAAI,CAAC,KAAK,GAAG,QAAQ,QAAQ;gBAC7B,IAAI,CAAC,UAAU,GAAG,QAAQ,UAAU;gBACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,QAAQ;YAClC;QACF;QAEA,IAAI,CAAC,IAAI,GAAG;QACZ,MAAM,gBAAgB,AAAC,gFAAiF,IAAI,CAAC,IAAI,CAAC,OAAO;QACzH,IAAI,eAAe;YACjB,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,EAAE;QACjC;IACF;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 724, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/transaction-error.js"],"sourcesContent":["'use strict'\n\nconst MSSQLError = require('./mssql-error')\n\n/**\n * Class TransactionError.\n */\n\nclass TransactionError extends MSSQLError {\n  /**\n   * Creates a new TransactionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'TransactionError'\n  }\n}\n\nmodule.exports = TransactionError\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AAEN;;CAEC,GAED,MAAM,yBAAyB;IAC7B;;;;;GAKC,GAED,YAAa,OAAO,EAAE,IAAI,CAAE;QAC1B,KAAK,CAAC,SAAS;QAEf,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 745, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/error/index.js"],"sourcesContent":["'use strict'\n\nconst ConnectionError = require('./connection-error')\nconst MSSQLError = require('./mssql-error')\nconst PreparedStatementError = require('./prepared-statement-error')\nconst RequestError = require('./request-error')\nconst TransactionError = require('./transaction-error')\n\nmodule.exports = {\n  ConnectionError,\n  MSSQLError,\n  PreparedStatementError,\n  RequestError,\n  TransactionError\n}\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AAEN,OAAO,OAAO,GAAG;IACf;IACA;IACA;IACA;IACA;AACF","ignoreList":[0]}},
    {"offset": {"line": 763, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/base/connection-pool.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('node:events')\nconst debug = require('debug')('mssql:base')\nconst { parseSqlConnectionString } = require('@tediousjs/connection-string')\nconst tarn = require('tarn')\nconst { IDS } = require('../utils')\nconst ConnectionError = require('../error/connection-error')\nconst shared = require('../shared')\nconst clone = require('rfdc/default')\nconst { MSSQLError } = require('../error')\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor (config, callback) {\n    super()\n\n    IDS.add(this, 'ConnectionPool')\n    debug('pool(%d): created', IDS.get(this))\n\n    this._connectStack = []\n    this._closeStack = []\n\n    this._connected = false\n    this._connecting = false\n    this._healthy = false\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.constructor.parseConnectionString(config)\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex)\n        }\n        throw ex\n      }\n    } else {\n      this.config = clone(config)\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433\n    this.config.options = this.config.options || {}\n    this.config.stream = this.config.stream || false\n    this.config.parseJSON = this.config.parseJSON || false\n    this.config.arrayRowMode = this.config.arrayRowMode || false\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\n\n    const namedServer = /^(.*)\\\\(.*)$/.exec(this.config.server)\n    if (namedServer) {\n      this.config.server = namedServer[1]\n      this.config.options.instanceName = namedServer[2]\n    }\n\n    if (typeof this.config.options.useColumnNames !== 'undefined' && this.config.options.useColumnNames !== true) {\n      const ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead')\n      if (typeof callback === 'function') {\n        return setImmediate(callback, ex)\n      }\n      throw ex\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback)\n    }\n  }\n\n  get connected () {\n    return this._connected\n  }\n\n  get connecting () {\n    return this._connecting\n  }\n\n  get healthy () {\n    return this._healthy\n  }\n\n  static parseConnectionString (connectionString) {\n    return this._parseConnectionString(connectionString)\n  }\n\n  static _parseAuthenticationType (type, entries) {\n    switch (type.toLowerCase()) {\n      case 'active directory integrated':\n        if (entries.includes('token')) {\n          return 'azure-active-directory-access-token'\n        } else if (['client id', 'client secret', 'tenant id'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-service-principal-secret'\n        } else if (['client id', 'msi endpoint', 'msi secret'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-msi-app-service'\n        } else if (['client id', 'msi endpoint'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-msi-vm'\n        }\n        return 'azure-active-directory-default'\n      case 'active directory password':\n        return 'azure-active-directory-password'\n      case 'ntlm':\n        return 'ntlm'\n      default:\n        return 'default'\n    }\n  }\n\n  static _parseConnectionString (connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true)\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          })\n          break\n        case 'asynchronous processing':\n          break\n        case 'attachdbfilename':\n          break\n        case 'authentication':\n          Object.assign(config, {\n            authentication_type: this._parseAuthenticationType(value, Object.keys(parsed))\n          })\n          break\n        case 'column encryption setting':\n          break\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          })\n          break\n        case 'connection lifetime':\n          break\n        case 'connectretrycount':\n          break\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          })\n          break\n        case 'context connection':\n          break\n        case 'client id':\n          Object.assign(config, {\n            clientId: value\n          })\n          break\n        case 'client secret':\n          Object.assign(config, {\n            clientSecret: value\n          })\n          break\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          })\n          break\n        case 'data source':\n        {\n          let server = value\n          let instanceName\n          let port = 1433\n          if (/^np:/i.test(server)) {\n            throw new Error('Connection via Named Pipes is not supported.')\n          }\n          if (/^tcp:/i.test(server)) {\n            server = server.substr(4)\n          }\n          const namedServerParts = /^(.*)\\\\(.*)$/.exec(server)\n          if (namedServerParts) {\n            server = namedServerParts[1].trim()\n            instanceName = namedServerParts[2].trim()\n          }\n          const serverParts = /^(.*),(.*)$/.exec(server)\n          if (serverParts) {\n            server = serverParts[1].trim()\n            port = parseInt(serverParts[2].trim(), 10)\n          } else {\n            const instanceParts = /^(.*),(.*)$/.exec(instanceName)\n            if (instanceParts) {\n              instanceName = instanceParts[1].trim()\n              port = parseInt(instanceParts[2].trim(), 10)\n            }\n          }\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n            server = 'localhost'\n          }\n          Object.assign(config, {\n            port,\n            server\n          })\n          if (instanceName) {\n            Object.assign(config.options, {\n              instanceName\n            })\n          }\n          break\n        }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          })\n          break\n        case 'enlist':\n          break\n        case 'failover partner':\n          break\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          })\n          break\n        case 'integrated security':\n          break\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          })\n          break\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          })\n          break\n        case 'msi endpoint':\n          Object.assign(config, {\n            msiEndpoint: value\n          })\n          break\n        case 'msi secret':\n          Object.assign(config, {\n            msiSecret: value\n          })\n          break\n        case 'multipleactiveresultsets':\n          break\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          })\n          break\n        case 'network library':\n          break\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          })\n          break\n        case 'password':\n          Object.assign(config, {\n            password: value\n          })\n          break\n        case 'persist security info':\n          break\n        case 'poolblockingperiod':\n          break\n        case 'pooling':\n          break\n        case 'replication':\n          break\n        case 'tenant id':\n          Object.assign(config, {\n            tenantId: value\n          })\n          break\n        case 'token':\n          Object.assign(config, {\n            token: value\n          })\n          break\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          })\n          break\n        case 'transparentnetworkipresolution':\n          break\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          })\n          break\n        case 'type system version':\n          break\n        case 'user id': {\n          let user = value\n          let domain\n          const domainUser = /^(.*)\\\\(.*)$/.exec(user)\n          if (domainUser) {\n            domain = domainUser[1]\n            user = domainUser[2]\n          }\n          if (domain) {\n            Object.assign(config, {\n              domain\n            })\n          }\n          if (user) {\n            Object.assign(config, {\n              user\n            })\n          }\n          break\n        }\n        case 'user instance':\n          break\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          })\n          break\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          })\n          break\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          })\n          break\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          })\n          break\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          })\n          break\n      }\n      return config\n    }, { options: {}, pool: {} })\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire (requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire()).catch(err => {\n      this.emit('error', err)\n      throw err\n    })\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\n      return this\n    }\n\n    return acquirePromise\n  }\n\n  _acquire () {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\n    }\n\n    return this.pool.acquire().promise\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release (connection) {\n    debug('connection(%d): released', IDS.get(connection))\n\n    if (this.pool) {\n      this.pool.release(connection)\n    }\n    return this\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect (callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect (callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\n      return setImmediate(callback, null, this)\n    }\n\n    this._connectStack.push(callback)\n\n    if (this._connecting) {\n      return\n    }\n\n    this._connecting = true\n    debug('pool(%d): connecting', IDS.get(this))\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then((connection) => {\n      debug('pool(%d): connected', IDS.get(this))\n      this._healthy = true\n\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(\n          Object.assign({\n            create: () => this._poolCreate()\n              .then(connection => {\n                this._healthy = true\n                return connection\n              })\n              .catch(err => {\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                  this._healthy = false\n                }\n                throw err\n              }),\n            validate: this._poolValidate.bind(this),\n            destroy: this._poolDestroy.bind(this),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, this.config.pool)\n        )\n\n        this._connecting = false\n        this._connected = true\n      })\n    }).then(() => {\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, null, this)\n      })\n    }).catch(err => {\n      this._connecting = false\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._connectStack = []\n    })\n  }\n\n  get size () {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\n  }\n\n  get available () {\n    return this.pool.numFree()\n  }\n\n  get pending () {\n    return this.pool.numPendingAcquires()\n  }\n\n  get borrowed () {\n    return this.pool.numUsed()\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close (callback) {\n    if (typeof callback === 'function') {\n      this._close(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close (callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this))\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\n      return setImmediate(callback, null)\n    }\n\n    this._closeStack.push(callback)\n\n    if (this.pool.destroyed) return\n\n    this._connecting = this._connected = this._healthy = false\n\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null)\n      })\n    }).catch(err => {\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._closeStack = []\n    })\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction () {\n    return new shared.driver.Transaction(this)\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'query')\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\n  }\n}\n\nmodule.exports = ConnectionPool\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,EAAE,YAAY,EAAE;AACtB,MAAM,QAAQ,sGAAiB;AAC/B,MAAM,EAAE,wBAAwB,EAAE;AAClC,MAAM;AACN,MAAM,EAAE,GAAG,EAAE;AACb,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,EAAE,UAAU,EAAE;AAEpB;;;;;;;;;;CAUC,GAED,MAAM,uBAAuB;IAC3B;;;;;GAKC,GAED,YAAa,MAAM,EAAE,QAAQ,CAAE;QAC7B,KAAK;QAEL,IAAI,GAAG,CAAC,IAAI,EAAE;QACd,MAAM,qBAAqB,IAAI,GAAG,CAAC,IAAI;QAEvC,IAAI,CAAC,aAAa,GAAG,EAAE;QACvB,IAAI,CAAC,WAAW,GAAG,EAAE;QAErB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,QAAQ,GAAG;QAEhB,IAAI,OAAO,WAAW,UAAU;YAC9B,IAAI;gBACF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC;YACvD,EAAE,OAAO,IAAI;gBACX,IAAI,OAAO,aAAa,YAAY;oBAClC,OAAO,aAAa,UAAU;gBAChC;gBACA,MAAM;YACR;QACF,OAAO;YACL,IAAI,CAAC,MAAM,GAAG,MAAM;QACtB;QAEA,eAAe;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI;QACvC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI;QAC3C,IAAI,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI;QACjD,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI;QACvD,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG,wBAAwB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG;QAExG,MAAM,cAAc,eAAe,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM;QAC1D,IAAI,aAAa;YACf,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,YAAY,GAAG,WAAW,CAAC,EAAE;QACnD;QAEA,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,KAAK,eAAe,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,KAAK,MAAM;YAC5G,MAAM,KAAK,IAAI,WAAW;YAC1B,IAAI,OAAO,aAAa,YAAY;gBAClC,OAAO,aAAa,UAAU;YAChC;YACA,MAAM;QACR;QAEA,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,OAAO,CAAC;QACf;IACF;IAEA,IAAI,YAAa;QACf,OAAO,IAAI,CAAC,UAAU;IACxB;IAEA,IAAI,aAAc;QAChB,OAAO,IAAI,CAAC,WAAW;IACzB;IAEA,IAAI,UAAW;QACb,OAAO,IAAI,CAAC,QAAQ;IACtB;IAEA,OAAO,sBAAuB,gBAAgB,EAAE;QAC9C,OAAO,IAAI,CAAC,sBAAsB,CAAC;IACrC;IAEA,OAAO,yBAA0B,IAAI,EAAE,OAAO,EAAE;QAC9C,OAAQ,KAAK,WAAW;YACtB,KAAK;gBACH,IAAI,QAAQ,QAAQ,CAAC,UAAU;oBAC7B,OAAO;gBACT,OAAO,IAAI;oBAAC;oBAAa;oBAAiB;iBAAY,CAAC,KAAK,CAAC,CAAA,QAAS,QAAQ,QAAQ,CAAC,SAAS;oBAC9F,OAAO;gBACT,OAAO,IAAI;oBAAC;oBAAa;oBAAgB;iBAAa,CAAC,KAAK,CAAC,CAAA,QAAS,QAAQ,QAAQ,CAAC,SAAS;oBAC9F,OAAO;gBACT,OAAO,IAAI;oBAAC;oBAAa;iBAAe,CAAC,KAAK,CAAC,CAAA,QAAS,QAAQ,QAAQ,CAAC,SAAS;oBAChF,OAAO;gBACT;gBACA,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,OAAO,uBAAwB,gBAAgB,EAAE;QAC/C,MAAM,SAAS,yBAAyB,kBAAkB,MAAM;QAChE,OAAO,OAAO,OAAO,CAAC,QAAQ,MAAM,CAAC,CAAC,QAAQ,CAAC,KAAK,MAAM;YACxD,OAAQ;gBACN,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,gBAAgB,UAAU;oBAC5B;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,qBAAqB,IAAI,CAAC,wBAAwB,CAAC,OAAO,OAAO,IAAI,CAAC;oBACxE;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,mBAAmB,QAAQ;oBAC7B;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,yBAAyB,QAAQ;oBACnC;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,UAAU;oBACZ;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,cAAc;oBAChB;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,UAAU;oBACZ;oBACA;gBACF,KAAK;oBACL;wBACE,IAAI,SAAS;wBACb,IAAI;wBACJ,IAAI,OAAO;wBACX,IAAI,QAAQ,IAAI,CAAC,SAAS;4BACxB,MAAM,IAAI,MAAM;wBAClB;wBACA,IAAI,SAAS,IAAI,CAAC,SAAS;4BACzB,SAAS,OAAO,MAAM,CAAC;wBACzB;wBACA,MAAM,mBAAmB,eAAe,IAAI,CAAC;wBAC7C,IAAI,kBAAkB;4BACpB,SAAS,gBAAgB,CAAC,EAAE,CAAC,IAAI;4BACjC,eAAe,gBAAgB,CAAC,EAAE,CAAC,IAAI;wBACzC;wBACA,MAAM,cAAc,cAAc,IAAI,CAAC;wBACvC,IAAI,aAAa;4BACf,SAAS,WAAW,CAAC,EAAE,CAAC,IAAI;4BAC5B,OAAO,SAAS,WAAW,CAAC,EAAE,CAAC,IAAI,IAAI;wBACzC,OAAO;4BACL,MAAM,gBAAgB,cAAc,IAAI,CAAC;4BACzC,IAAI,eAAe;gCACjB,eAAe,aAAa,CAAC,EAAE,CAAC,IAAI;gCACpC,OAAO,SAAS,aAAa,CAAC,EAAE,CAAC,IAAI,IAAI;4BAC3C;wBACF;wBACA,IAAI,WAAW,OAAO,WAAW,SAAS,OAAO,WAAW,OAAO,eAAe,OAAO,WAAW,OAAO,WAAW;4BACpH,SAAS;wBACX;wBACA,OAAO,MAAM,CAAC,QAAQ;4BACpB;4BACA;wBACF;wBACA,IAAI,cAAc;4BAChB,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;gCAC5B;4BACF;wBACF;wBACA;oBACF;gBACA,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,SAAS,CAAC,CAAC;oBACb;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,UAAU;oBACZ;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,IAAI,EAAE;wBACzB,KAAK;oBACP;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,IAAI,EAAE;wBACzB,KAAK;oBACP;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,aAAa;oBACf;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,WAAW;oBACb;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,qBAAqB;oBACvB;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,YAAY;oBACd;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,UAAU;oBACZ;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,UAAU;oBACZ;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,OAAO;oBACT;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,4BAA4B,MAAM,WAAW,OAAO;oBACtD;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,wBAAwB;oBAC1B;oBACA;gBACF,KAAK;oBACH;gBACF,KAAK;oBAAW;wBACd,IAAI,OAAO;wBACX,IAAI;wBACJ,MAAM,aAAa,eAAe,IAAI,CAAC;wBACvC,IAAI,YAAY;4BACd,SAAS,UAAU,CAAC,EAAE;4BACtB,OAAO,UAAU,CAAC,EAAE;wBACtB;wBACA,IAAI,QAAQ;4BACV,OAAO,MAAM,CAAC,QAAQ;gCACpB;4BACF;wBACF;wBACA,IAAI,MAAM;4BACR,OAAO,MAAM,CAAC,QAAQ;gCACpB;4BACF;wBACF;wBACA;oBACF;gBACA,KAAK;oBACH;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,eAAe;oBACjB;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,gBAAgB,SAAS,OAAO;oBAClC;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,QAAQ,CAAC,CAAC;oBACZ;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,OAAO,OAAO,EAAE;wBAC5B,QAAQ,CAAC,CAAC;oBACZ;oBACA;gBACF,KAAK;oBACH,OAAO,MAAM,CAAC,QAAQ;wBACpB,WAAW,CAAC,CAAC;oBACf;oBACA;YACJ;YACA,OAAO;QACT,GAAG;YAAE,SAAS,CAAC;YAAG,MAAM,CAAC;QAAE;IAC7B;IAEA;;;;;;GAMC,GAED,QAAS,SAAS,EAAE,QAAQ,EAAE;QAC5B,MAAM,iBAAiB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAA;YACnE,IAAI,CAAC,IAAI,CAAC,SAAS;YACnB,MAAM;QACR;QACA,IAAI,OAAO,aAAa,YAAY;YAClC,eAAe,IAAI,CAAC,CAAA,aAAc,SAAS,MAAM,YAAY,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACjF,OAAO,IAAI;QACb;QAEA,OAAO;IACT;IAEA,WAAY;QACV,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,gBAAgB,4BAA4B;QAC/E,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAC9B,OAAO,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,gBAAgB,yBAAyB;QAC5E;QAEA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO;IACpC;IAEA;;;;;GAKC,GAED,QAAS,UAAU,EAAE;QACnB,MAAM,4BAA4B,IAAI,GAAG,CAAC;QAE1C,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;QACpB;QACA,OAAO,IAAI;IACb;IAEA;;;;;GAKC,GAED,QAAS,QAAQ,EAAE;QACjB,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,QAAQ,CAAC;YACd,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,OAAO,OAAO,CAAC,CAAC,SAAS;YAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAA;gBACnB,IAAI,KAAK,OAAO,OAAO;gBACvB,QAAQ,IAAI;YACd;QACF;IACF;IAEA;;;GAGC,GAED,SAAU,QAAQ,EAAE;QAClB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,MAAM,uEAAuE,IAAI,GAAG,CAAC,IAAI;YACzF,OAAO,aAAa,UAAU,MAAM,IAAI;QAC1C;QAEA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;QAExB,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB;QACF;QAEA,IAAI,CAAC,WAAW,GAAG;QACnB,MAAM,wBAAwB,IAAI,GAAG,CAAC,IAAI;QAE1C,0DAA0D;QAC1D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;YACvB,MAAM,uBAAuB,IAAI,GAAG,CAAC,IAAI;YACzC,IAAI,CAAC,QAAQ,GAAG;YAEhB,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,CAAC;gBACxC,eAAe;gBACf,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,IAAI,CACvB,OAAO,MAAM,CAAC;oBACZ,QAAQ,IAAM,IAAI,CAAC,WAAW,GAC3B,IAAI,CAAC,CAAA;4BACJ,IAAI,CAAC,QAAQ,GAAG;4BAChB,OAAO;wBACT,GACC,KAAK,CAAC,CAAA;4BACL,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,MAAM,GAAG;gCAClD,IAAI,CAAC,QAAQ,GAAG;4BAClB;4BACA,MAAM;wBACR;oBACF,UAAU,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI;oBACtC,SAAS,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI;oBACpC,KAAK;oBACL,KAAK;oBACL,mBAAmB;oBACnB,sBAAsB;gBACxB,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;gBAGrB,IAAI,CAAC,WAAW,GAAG;gBACnB,IAAI,CAAC,UAAU,GAAG;YACpB;QACF,GAAG,IAAI,CAAC;YACN,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC1B,aAAa,IAAI,MAAM,IAAI;YAC7B;QACF,GAAG,KAAK,CAAC,CAAA;YACP,IAAI,CAAC,WAAW,GAAG;YACnB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC1B,aAAa,IAAI;YACnB;QACF,GAAG,IAAI,CAAC;YACN,IAAI,CAAC,aAAa,GAAG,EAAE;QACzB;IACF;IAEA,IAAI,OAAQ;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,iBAAiB;IAChF;IAEA,IAAI,YAAa;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO;IAC1B;IAEA,IAAI,UAAW;QACb,OAAO,IAAI,CAAC,IAAI,CAAC,kBAAkB;IACrC;IAEA,IAAI,WAAY;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO;IAC1B;IAEA;;;;;GAKC,GAED,MAAO,QAAQ,EAAE;QACf,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,MAAM,CAAC;YACZ,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,OAAO,OAAO,CAAC,CAAC,SAAS;YAClC,IAAI,CAAC,MAAM,CAAC,CAAA;gBACV,IAAI,KAAK,OAAO,OAAO;gBACvB,QAAQ,IAAI;YACd;QACF;IACF;IAEA;;;GAGC,GAED,OAAQ,QAAQ,EAAE;QAChB,kGAAkG;QAClG,0BAA0B;QAC1B,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,2CAA2C,IAAI,GAAG,CAAC,IAAI;YAC7D,aAAa,UAAU,IAAI,gBAAgB;QAC7C;QAEA,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACd,MAAM,kEAAkE,IAAI,GAAG,CAAC,IAAI;YACpF,OAAO,aAAa,UAAU;QAChC;QAEA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAEtB,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAEzB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAG;QAErD,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACvB,MAAM,gFAAgF,IAAI,GAAG,CAAC,IAAI;YAClG,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;gBACvB,aAAa,IAAI;YACnB;QACF,GAAG,KAAK,CAAC,CAAA;YACP,IAAI,CAAC,IAAI,GAAG;YACZ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;gBACvB,aAAa,IAAI;YACnB;QACF,GAAG,IAAI,CAAC;YACN,IAAI,CAAC,WAAW,GAAG,EAAE;QACvB;IACF;IAEA;;;;GAIC,GAED,UAAW;QACT,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI;IACvC;IAEA;;;;GAIC,GAED,cAAe;QACb,OAAO,IAAI,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI;IAC3C;IAEA;;;;;;;GAOC,GAED;;;;;;;GAOC,GAED,QAAS;QACP,IAAI,OAAO,SAAS,CAAC,EAAE,KAAK,UAAU;YAAE,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,EAAE;QAAE;QAEjH,MAAM,SAAS,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,MAAM,UAAU,OAAO,KAAK;QAE5B,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,QAAQ;IACpE;IAEA;;;;;;;GAOC,GAED;;;;;;;GAOC,GAED,QAAS;QACP,IAAI,OAAO,SAAS,CAAC,EAAE,KAAK,UAAU;YAAE,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,EAAE;QAAE;QAEjH,MAAM,SAAS,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;QAC1C,MAAM,UAAU,OAAO,KAAK;QAE5B,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,QAAQ;IACpE;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 1346, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/global-connection.js"],"sourcesContent":["'use strict'\n\nconst shared = require('./shared')\n\nlet globalConnection = null\nconst globalConnectionHandlers = {}\n\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */\n\nfunction connect (config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config)\n\n    for (const event in globalConnectionHandlers) {\n      for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i])\n      }\n    }\n\n    const ogClose = globalConnection.close\n\n    const globalClose = function (callback) {\n      // remove event handlers from the global connection\n      for (const event in globalConnectionHandlers) {\n        for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n          this.removeListener(event, globalConnectionHandlers[event][i])\n        }\n      }\n\n      // attach error handler to prevent process crash in case of error\n      this.on('error', err => {\n        if (globalConnectionHandlers.error) {\n          for (let i = 0, l = globalConnectionHandlers.error.length; i < l; i++) {\n            globalConnectionHandlers.error[i].call(this, err)\n          }\n        }\n      })\n\n      globalConnection = null\n      return ogClose.call(this, callback)\n    }\n\n    globalConnection.close = globalClose.bind(globalConnection)\n  }\n  if (typeof callback === 'function') {\n    return globalConnection.connect((err, connection) => {\n      if (err) {\n        globalConnection = null\n      }\n      callback(err, connection)\n    })\n  }\n  return globalConnection.connect().catch((err) => {\n    globalConnection = null\n    return shared.Promise.reject(err)\n  })\n}\n\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */\n\nfunction close (callback) {\n  if (globalConnection) {\n    const gc = globalConnection\n    globalConnection = null\n    return gc.close(callback)\n  }\n\n  if (typeof callback === 'function') {\n    setImmediate(callback)\n    return null\n  }\n\n  return new shared.Promise((resolve) => {\n    resolve(globalConnection)\n  })\n}\n\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction on (event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = []\n  globalConnectionHandlers[event].push(handler)\n\n  if (globalConnection) globalConnection.on(event, handler)\n  return globalConnection\n}\n\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction removeListener (event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection\n  const index = globalConnectionHandlers[event].indexOf(handler)\n  if (index === -1) return globalConnection\n  globalConnectionHandlers[event].splice(index, 1)\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined\n\n  if (globalConnection) globalConnection.removeListener(event, handler)\n  return globalConnection\n}\n\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction query () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().query(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'query')\n}\n\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction batch () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().batch(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'batch')\n}\n\nmodule.exports = {\n  batch,\n  close,\n  connect,\n  off: removeListener,\n  on,\n  query,\n  removeListener\n}\n\nObject.defineProperty(module.exports, 'pool', {\n  get: () => {\n    return globalConnection\n  },\n  set: () => {}\n})\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1508, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/base/prepared-statement.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:base')\nconst { EventEmitter } = require('node:events')\nconst { IDS, objectHasProperty } = require('../utils')\nconst globalConnection = require('../global-connection')\nconst { TransactionError, PreparedStatementError } = require('../error')\nconst shared = require('../shared')\nconst { TYPES, declare } = require('../datatypes')\n\n/**\n * Class PreparedStatement.\n *\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n *\n * @property {String} statement Prepared SQL statement.\n */\n\nclass PreparedStatement extends EventEmitter {\n  /**\n   * Creates a new Prepared Statement.\n   *\n   * @param {ConnectionPool|Transaction} [holder]\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'PreparedStatement')\n    debug('ps(%d): created', IDS.get(this))\n\n    this.parent = parent || globalConnection.pool\n    this._handle = 0\n    this.prepared = false\n    this.parameters = {}\n  }\n\n  get config () {\n    return this.parent.config\n  }\n\n  get connected () {\n    return this.parent.connected\n  }\n\n  /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  acquire (request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\n      return this\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\n      return this\n    }\n\n    this._activeRequest = request\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\n    return this\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {PreparedStatement}\n   */\n\n  release (connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null\n    }\n\n    return this\n  }\n\n  /**\n   * Add an input parameter to the prepared statement.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} type SQL data type of input parameter.\n   * @return {PreparedStatement}\n   */\n\n  input (name, type) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\n    }\n\n    if (type instanceof Function) {\n      type = type()\n    }\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the prepared statement.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */\n\n  output (name, type) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\n    }\n\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */\n\n  replaceOutput (name, type) {\n    delete this.parameters[name]\n\n    return this.output(name, type)\n  }\n\n  /**\n   * Prepare a statement.\n   *\n   * @param {String} statement SQL statement to prepare.\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  prepare (statement, callback) {\n    if (typeof callback === 'function') {\n      this._prepare(statement, callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._prepare(statement, err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} statement\n   * @param {basicCallback} callback\n   */\n\n  _prepare (statement, callback) {\n    debug('ps(%d): prepare', IDS.get(this))\n\n    if (typeof statement === 'function') {\n      callback = statement\n      statement = undefined\n    }\n\n    if (this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'))\n    }\n\n    this.statement = statement || this.statement\n\n    this.parent.acquire(this, (err, connection, config) => {\n      if (err) return callback(err)\n\n      this._acquiredConnection = connection\n      this._acquiredConfig = config\n\n      const req = new shared.driver.Request(this)\n      req.stream = false\n      req.output('handle', TYPES.Int)\n      req.input('params', TYPES.NVarChar, ((() => {\n        const result = []\n        for (const name in this.parameters) {\n          if (!objectHasProperty(this.parameters, name)) {\n            continue\n          }\n          const param = this.parameters[name]\n          result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? ' output' : ''}`)\n        }\n        return result\n      })()).join(','))\n      req.input('stmt', TYPES.NVarChar, this.statement)\n      req.execute('sp_prepare', (err, result) => {\n        if (err) {\n          this.parent.release(this._acquiredConnection)\n          this._acquiredConnection = null\n          this._acquiredConfig = null\n\n          return callback(err)\n        }\n\n        debug('ps(%d): prepared', IDS.get(this))\n\n        this._handle = result.output.handle\n        this.prepared = true\n\n        callback(null)\n      })\n    })\n  }\n\n  /**\n   * Execute a prepared statement.\n   *\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (values, callback) {\n    if (this.stream || (typeof callback === 'function')) {\n      return this._execute(values, callback)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(values, (err, recordset) => {\n        if (err) return reject(err)\n        resolve(recordset)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Object} values\n   * @param {basicCallback} callback\n   */\n\n  _execute (values, callback) {\n    const req = new shared.driver.Request(this)\n    req.stream = this.stream\n    req.arrayRowMode = this.arrayRowMode\n    req.input('handle', TYPES.Int, this._handle)\n\n    // copy parameters with new values\n    for (const name in this.parameters) {\n      if (!objectHasProperty(this.parameters, name)) {\n        continue\n      }\n      const param = this.parameters[name]\n      req.parameters[name] = {\n        name,\n        type: param.type,\n        io: param.io,\n        value: values[name],\n        length: param.length,\n        scale: param.scale,\n        precision: param.precision\n      }\n    }\n\n    req.execute('sp_execute', (err, result) => {\n      if (err) return callback(err)\n\n      callback(null, result)\n    })\n\n    return req\n  }\n\n  /**\n   * Unprepare a prepared statement.\n   *\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  unprepare (callback) {\n    if (typeof callback === 'function') {\n      this._unprepare(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._unprepare(err => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _unprepare (callback) {\n    debug('ps(%d): unprepare', IDS.get(this))\n\n    if (!this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    const req = new shared.driver.Request(this)\n    req.stream = false\n    req.input('handle', TYPES.Int, this._handle)\n    req.execute('sp_unprepare', err => {\n      if (err) return callback(err)\n\n      this.parent.release(this._acquiredConnection)\n      this._acquiredConnection = null\n      this._acquiredConfig = null\n      this._handle = 0\n      this.prepared = false\n\n      debug('ps(%d): unprepared', IDS.get(this))\n\n      return callback(null)\n    })\n  }\n}\n\nmodule.exports = PreparedStatement\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,QAAQ,sGAAiB;AAC/B,MAAM,EAAE,YAAY,EAAE;AACtB,MAAM,EAAE,GAAG,EAAE,iBAAiB,EAAE;AAChC,MAAM;AACN,MAAM,EAAE,gBAAgB,EAAE,sBAAsB,EAAE;AAClD,MAAM;AACN,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE;AAExB;;;;;;CAMC,GAED,MAAM,0BAA0B;IAC9B;;;;GAIC,GAED,YAAa,MAAM,CAAE;QACnB,KAAK;QAEL,IAAI,GAAG,CAAC,IAAI,EAAE;QACd,MAAM,mBAAmB,IAAI,GAAG,CAAC,IAAI;QAErC,IAAI,CAAC,MAAM,GAAG,UAAU,iBAAiB,IAAI;QAC7C,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,UAAU,GAAG,CAAC;IACrB;IAEA,IAAI,SAAU;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;IAEA,IAAI,YAAa;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS;IAC9B;IAEA;;;;;;GAMC,GAED,QAAS,OAAO,EAAE,QAAQ,EAAE;QAC1B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,aAAa,UAAU,IAAI,uBAAuB,oDAAoD;YACtG,OAAO,IAAI;QACb;QAEA,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,aAAa,UAAU,IAAI,iBAAiB,mFAAmF;YAC/H,OAAO,IAAI;QACb;QAEA,IAAI,CAAC,cAAc,GAAG;QACtB,aAAa,UAAU,MAAM,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,eAAe;QAC3E,OAAO,IAAI;IACb;IAEA;;;;;GAKC,GAED,QAAS,UAAU,EAAE;QACnB,IAAI,eAAe,IAAI,CAAC,mBAAmB,EAAE;YAC3C,IAAI,CAAC,cAAc,GAAG;QACxB;QAEA,OAAO,IAAI;IACb;IAEA;;;;;;GAMC,GAED,MAAO,IAAI,EAAE,IAAI,EAAE;QACjB,IAAI,mBAAmB,IAAI,CAAC,OAAO;YACjC,MAAM,IAAI,uBAAuB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC,EAAE;QAChF;QAEA,IAAI,UAAU,MAAM,GAAG,GAAG;YACxB,MAAM,IAAI,uBAAuB,sDAAsD;QACzF;QAEA,IAAI,gBAAgB,UAAU;YAC5B,OAAO;QACT;QAEA,IAAI,kBAAkB,IAAI,CAAC,UAAU,EAAE,OAAO;YAC5C,MAAM,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,KAAK,0DAA0D,CAAC,EAAE;QAC3H;QAEA,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG;YACtB;YACA,MAAM,KAAK,IAAI;YACf,IAAI;YACJ,QAAQ,KAAK,MAAM;YACnB,OAAO,KAAK,KAAK;YACjB,WAAW,KAAK,SAAS;YACzB,SAAS,KAAK,OAAO;QACvB;QAEA,OAAO,IAAI;IACb;IAEA;;;;;;;GAOC,GAED,aAAc,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK;QAE5B,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,MAAM;IAChC;IAEA;;;;;;GAMC,GAED,OAAQ,IAAI,EAAE,IAAI,EAAE;QAClB,IAAI,mBAAmB,IAAI,CAAC,OAAO;YACjC,MAAM,IAAI,uBAAuB,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC,EAAE;QAChF;QAEA,IAAI,UAAU,MAAM,GAAG,GAAG;YACxB,MAAM,IAAI,uBAAuB,sDAAsD;QACzF;QAEA,IAAI,gBAAgB,UAAU,OAAO;QAErC,IAAI,kBAAkB,IAAI,CAAC,UAAU,EAAE,OAAO;YAC5C,MAAM,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,KAAK,0DAA0D,CAAC,EAAE;QAC3H;QAEA,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG;YACtB;YACA,MAAM,KAAK,IAAI;YACf,IAAI;YACJ,QAAQ,KAAK,MAAM;YACnB,OAAO,KAAK,KAAK;YACjB,WAAW,KAAK,SAAS;QAC3B;QAEA,OAAO,IAAI;IACb;IAEA;;;;;;GAMC,GAED,cAAe,IAAI,EAAE,IAAI,EAAE;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK;QAE5B,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;IAEA;;;;;;GAMC,GAED,QAAS,SAAS,EAAE,QAAQ,EAAE;QAC5B,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,QAAQ,CAAC,WAAW;YACzB,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,OAAO,OAAO,CAAC,CAAC,SAAS;YAClC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAA;gBACvB,IAAI,KAAK,OAAO,OAAO;gBACvB,QAAQ,IAAI;YACd;QACF;IACF;IAEA;;;;GAIC,GAED,SAAU,SAAS,EAAE,QAAQ,EAAE;QAC7B,MAAM,mBAAmB,IAAI,GAAG,CAAC,IAAI;QAErC,IAAI,OAAO,cAAc,YAAY;YACnC,WAAW;YACX,YAAY;QACd;QAEA,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,aAAa,UAAU,IAAI,uBAAuB,kCAAkC;QAC7F;QAEA,IAAI,CAAC,SAAS,GAAG,aAAa,IAAI,CAAC,SAAS;QAE5C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,YAAY;YAC1C,IAAI,KAAK,OAAO,SAAS;YAEzB,IAAI,CAAC,mBAAmB,GAAG;YAC3B,IAAI,CAAC,eAAe,GAAG;YAEvB,MAAM,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI;YAC1C,IAAI,MAAM,GAAG;YACb,IAAI,MAAM,CAAC,UAAU,MAAM,GAAG;YAC9B,IAAI,KAAK,CAAC,UAAU,MAAM,QAAQ,EAAE,AAAC,CAAC;gBACpC,MAAM,SAAS,EAAE;gBACjB,IAAK,MAAM,QAAQ,IAAI,CAAC,UAAU,CAAE;oBAClC,IAAI,CAAC,kBAAkB,IAAI,CAAC,UAAU,EAAE,OAAO;wBAC7C;oBACF;oBACA,MAAM,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK;oBACnC,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,QAAQ,MAAM,IAAI,EAAE,SAAS,MAAM,EAAE,KAAK,IAAI,YAAY,IAAI;gBACxF;gBACA,OAAO;YACT,CAAC,IAAK,IAAI,CAAC;YACX,IAAI,KAAK,CAAC,QAAQ,MAAM,QAAQ,EAAE,IAAI,CAAC,SAAS;YAChD,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK;gBAC9B,IAAI,KAAK;oBACP,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB;oBAC5C,IAAI,CAAC,mBAAmB,GAAG;oBAC3B,IAAI,CAAC,eAAe,GAAG;oBAEvB,OAAO,SAAS;gBAClB;gBAEA,MAAM,oBAAoB,IAAI,GAAG,CAAC,IAAI;gBAEtC,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,CAAC,MAAM;gBACnC,IAAI,CAAC,QAAQ,GAAG;gBAEhB,SAAS;YACX;QACF;IACF;IAEA;;;;;;GAMC,GAED,QAAS,MAAM,EAAE,QAAQ,EAAE;QACzB,IAAI,IAAI,CAAC,MAAM,IAAK,OAAO,aAAa,YAAa;YACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ;QAC/B;QAEA,OAAO,IAAI,OAAO,OAAO,CAAC,CAAC,SAAS;YAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK;gBAC1B,IAAI,KAAK,OAAO,OAAO;gBACvB,QAAQ;YACV;QACF;IACF;IAEA;;;;GAIC,GAED,SAAU,MAAM,EAAE,QAAQ,EAAE;QAC1B,MAAM,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI;QAC1C,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM;QACxB,IAAI,YAAY,GAAG,IAAI,CAAC,YAAY;QACpC,IAAI,KAAK,CAAC,UAAU,MAAM,GAAG,EAAE,IAAI,CAAC,OAAO;QAE3C,kCAAkC;QAClC,IAAK,MAAM,QAAQ,IAAI,CAAC,UAAU,CAAE;YAClC,IAAI,CAAC,kBAAkB,IAAI,CAAC,UAAU,EAAE,OAAO;gBAC7C;YACF;YACA,MAAM,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK;YACnC,IAAI,UAAU,CAAC,KAAK,GAAG;gBACrB;gBACA,MAAM,MAAM,IAAI;gBAChB,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,CAAC,KAAK;gBACnB,QAAQ,MAAM,MAAM;gBACpB,OAAO,MAAM,KAAK;gBAClB,WAAW,MAAM,SAAS;YAC5B;QACF;QAEA,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK;YAC9B,IAAI,KAAK,OAAO,SAAS;YAEzB,SAAS,MAAM;QACjB;QAEA,OAAO;IACT;IAEA;;;;;GAKC,GAED,UAAW,QAAQ,EAAE;QACnB,IAAI,OAAO,aAAa,YAAY;YAClC,IAAI,CAAC,UAAU,CAAC;YAChB,OAAO,IAAI;QACb;QAEA,OAAO,IAAI,OAAO,OAAO,CAAC,CAAC,SAAS;YAClC,IAAI,CAAC,UAAU,CAAC,CAAA;gBACd,IAAI,KAAK,OAAO,OAAO;gBACvB;YACF;QACF;IACF;IAEA;;;GAGC,GAED,WAAY,QAAQ,EAAE;QACpB,MAAM,qBAAqB,IAAI,GAAG,CAAC,IAAI;QAEvC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,aAAa,UAAU,IAAI,uBAAuB,oDAAoD;QAC/G;QAEA,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,OAAO,aAAa,UAAU,IAAI,iBAAiB,kEAAkE;QACvH;QAEA,MAAM,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI;QAC1C,IAAI,MAAM,GAAG;QACb,IAAI,KAAK,CAAC,UAAU,MAAM,GAAG,EAAE,IAAI,CAAC,OAAO;QAC3C,IAAI,OAAO,CAAC,gBAAgB,CAAA;YAC1B,IAAI,KAAK,OAAO,SAAS;YAEzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB;YAC5C,IAAI,CAAC,mBAAmB,GAAG;YAC3B,IAAI,CAAC,eAAe,GAAG;YACvB,IAAI,CAAC,OAAO,GAAG;YACf,IAAI,CAAC,QAAQ,GAAG;YAEhB,MAAM,sBAAsB,IAAI,GAAG,CAAC,IAAI;YAExC,OAAO,SAAS;QAClB;IACF;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 1812, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/base/request.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:base')\nconst { EventEmitter } = require('node:events')\nconst { Readable } = require('node:stream')\nconst { IDS, objectHasProperty } = require('../utils')\nconst globalConnection = require('../global-connection')\nconst { RequestError, ConnectionError } = require('../error')\nconst { TYPES } = require('../datatypes')\nconst shared = require('../shared')\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\n\nclass Request extends EventEmitter {\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Request')\n    debug('request(%d): created', IDS.get(this))\n\n    this.canceled = false\n    this._paused = false\n    this.parent = parent || globalConnection.pool\n    this.parameters = {}\n    this.stream = null\n    this.arrayRowMode = null\n  }\n\n  get paused () {\n    return this._paused\n  }\n\n  /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */\n  template () {\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n    return this._template(strings, values)\n  }\n\n  /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */\n\n  _template (strings, values, method) {\n    const command = [strings[0]]\n\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index]\n      // if value is an array, prepare each items as it's own comma separated parameter\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\n          command.push(`@param${index + 1}_${parameterIndex}`)\n          if (parameterIndex < value.length - 1) {\n            command.push(', ')\n          }\n        }\n        command.push(strings[index + 1])\n      } else {\n        this.input(`param${index + 1}`, value)\n        command.push(`@param${index + 1}`, strings[index + 1])\n      }\n    }\n\n    if (method) {\n      return this[method](command.join(''))\n    } else {\n      return command.join('')\n    }\n  }\n\n  /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  input (name, type, value) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\n    } else if (arguments.length === 2) {\n      value = type\n      type = shared.getTypeByValue(value)\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  output (name, type, value) {\n    if (!type) { type = TYPES.NVarChar }\n\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  replaceOutput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.output(name, type, value)\n  }\n\n  /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch (batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      batch = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */\n\n  _batch (batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  bulk (table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    } else if (typeof options === 'undefined') {\n      options = {}\n    }\n\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          return this.emit('done', {\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err)\n        resolve({\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */\n\n  _bulk (table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */\n  toReadableStream (streamOptions = {}) {\n    this.stream = true\n    this.pause()\n    const readableStream = new Readable({\n      ...streamOptions,\n      objectMode: true,\n      read: (/* size */) => {\n        this.resume()\n      }\n    })\n    this.on('row', (row) => {\n      if (!readableStream.push(row)) {\n        this.pause()\n      }\n    })\n    this.on('error', (error) => {\n      readableStream.emit('error', error)\n    })\n    this.on('done', () => {\n      readableStream.push(null)\n    })\n    return readableStream\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */\n  pipe (writableStream) {\n    const readableStream = this.toReadableStream()\n    return readableStream.pipe(writableStream)\n  }\n\n  /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      command = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */\n\n  _query (command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */\n\n  _execute (procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */\n\n  cancel () {\n    this._cancel()\n    return true\n  }\n\n  /**\n   * @private\n   */\n\n  _cancel () {\n    this.canceled = true\n  }\n\n  pause () {\n    if (this.stream) {\n      this._pause()\n      return true\n    }\n    return false\n  }\n\n  _pause () {\n    this._paused = true\n  }\n\n  resume () {\n    if (this.stream) {\n      this._resume()\n      return true\n    }\n    return false\n  }\n\n  _resume () {\n    this._paused = false\n  }\n\n  _setCurrentRequest (request) {\n    this._currentRequest = request\n    if (this._paused) {\n      this.pause()\n    }\n    return this\n  }\n}\n\nmodule.exports = Request\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2356, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/isolationlevel.js"],"sourcesContent":["'use strict'\n\nmodule.exports = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n}\n"],"names":[],"mappings":"AAAA;AAEA,OAAO,OAAO,GAAG;IACf,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;IACjB,cAAc;IACd,UAAU;AACZ","ignoreList":[0]}},
    {"offset": {"line": 2369, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/base/transaction.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:base')\nconst { EventEmitter } = require('node:events')\nconst { IDS } = require('../utils')\nconst globalConnection = require('../global-connection')\nconst { TransactionError } = require('../error')\nconst shared = require('../shared')\nconst ISOLATION_LEVEL = require('../isolationlevel')\n\n/**\n * Class Transaction.\n *\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\n * @property {String} name Transaction name. Empty string by default.\n *\n * @fires Transaction#begin\n * @fires Transaction#commit\n * @fires Transaction#rollback\n */\n\nclass Transaction extends EventEmitter {\n  /**\n   * Create new Transaction.\n   *\n   * @param {Connection} [parent] If ommited, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Transaction')\n    debug('transaction(%d): created', IDS.get(this))\n\n    this.parent = parent || globalConnection.pool\n    this.isolationLevel = Transaction.defaultIsolationLevel\n    this.name = ''\n  }\n\n  get config () {\n    return this.parent.config\n  }\n\n  get connected () {\n    return this.parent.connected\n  }\n\n  /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  acquire (request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n      return this\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\n      return this\n    }\n\n    this._activeRequest = request\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\n    return this\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {Transaction}\n   */\n\n  release (connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null\n    }\n\n    return this\n  }\n\n  /**\n   * Begin a transaction.\n   *\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  begin (isolationLevel, callback) {\n    if (isolationLevel instanceof Function) {\n      callback = isolationLevel\n      isolationLevel = undefined\n    }\n\n    if (typeof callback === 'function') {\n      this._begin(isolationLevel, err => {\n        if (!err) {\n          this.emit('begin')\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._begin(isolationLevel, err => {\n        if (err) return reject(err)\n        this.emit('begin')\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Number} [isolationLevel]\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _begin (isolationLevel, callback) {\n    if (this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'))\n    }\n\n    this._aborted = false\n    this._rollbackRequested = false\n    if (isolationLevel) {\n      if (Object.keys(ISOLATION_LEVEL).some(key => {\n        return ISOLATION_LEVEL[key] === isolationLevel\n      })) {\n        this.isolationLevel = isolationLevel\n      } else {\n        throw new TransactionError('Invalid isolation level.')\n      }\n    }\n\n    setImmediate(callback)\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  commit (callback) {\n    if (typeof callback === 'function') {\n      this._commit(err => {\n        if (!err) {\n          this.emit('commit')\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._commit(err => {\n        if (err) return reject(err)\n        this.emit('commit')\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _commit (callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    setImmediate(callback)\n  }\n\n  /**\n   * Returns new request using this transaction.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  rollback (callback) {\n    if (typeof callback === 'function') {\n      this._rollback(err => {\n        if (!err) {\n          this.emit('rollback', this._aborted)\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._rollback(err => {\n        if (err) return reject(err)\n        this.emit('rollback', this._aborted)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _rollback (callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    this._rollbackRequested = true\n\n    setImmediate(callback)\n  }\n}\n\n/**\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\n *\n * @type {number}\n */\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED\n\nmodule.exports = Transaction\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2583, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/base/index.js"],"sourcesContent":["'use strict'\n\nconst ConnectionPool = require('./connection-pool')\nconst PreparedStatement = require('./prepared-statement')\nconst Request = require('./request')\nconst Transaction = require('./transaction')\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = require('../error')\nconst shared = require('../shared')\nconst Table = require('../table')\nconst ISOLATION_LEVEL = require('../isolationlevel')\nconst { TYPES } = require('../datatypes')\nconst { connect, close, on, off, removeListener, query, batch } = require('../global-connection')\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535, // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise\n  },\n  set: (value) => {\n    shared.Promise = value\n  }\n})\n\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n})\n\nfor (const key in TYPES) {\n  const value = TYPES[key]\n  module.exports.exports[key] = value\n  module.exports.exports[key.toUpperCase()] = value\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,YAAY,EAAE,sBAAsB,EAAE,UAAU,EAAE;AAC7F,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM,EAAE,KAAK,EAAE;AACf,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE;AAE/D,OAAO,OAAO,GAAG;IACf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,OAAO,MAAM;IACrB,SAAS;QACP;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,KAAK;QACL,KAAK,OAAO,GAAG;QACf,gBAAgB,OAAO,cAAc;QACrC;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;AAEA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,WAAW;IAC/C,YAAY;IACZ,KAAK;QACH,OAAO,OAAO,OAAO;IACvB;IACA,KAAK,CAAC;QACJ,OAAO,OAAO,GAAG;IACnB;AACF;AAEA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,gBAAgB;IACpD,YAAY;IACZ,OAAO,OAAO,YAAY;IAC1B,UAAU;IACV,cAAc;AAChB;AAEA,IAAK,MAAM,OAAO,MAAO;IACvB,MAAM,QAAQ,KAAK,CAAC,IAAI;IACxB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG;IAC9B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,WAAW,GAAG,GAAG;AAC9C,EAEA;;;;CAIC,IAED;;;;CAIC,IAED;;;;CAIC,IAED;;;;;CAKC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC,IAED;;;CAGC","ignoreList":[0]}},
    {"offset": {"line": 2695, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/tedious/connection-pool.js"],"sourcesContent":["'use strict'\n\nconst tds = require('tedious')\nconst debug = require('debug')('mssql:tedi')\nconst BaseConnectionPool = require('../base/connection-pool')\nconst { IDS } = require('../utils')\nconst shared = require('../shared')\nconst ConnectionError = require('../error/connection-error')\n\nclass ConnectionPool extends BaseConnectionPool {\n  _config () {\n    const cfg = {\n      server: this.config.server,\n      options: Object.assign({\n        encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\n        trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\n      }, this.config.options),\n      authentication: Object.assign({\n        type: this.config.domain !== undefined ? 'ntlm' : this.config.authentication_type !== undefined ? this.config.authentication_type : 'default',\n        options: Object.entries({\n          userName: this.config.user,\n          password: this.config.password,\n          domain: this.config.domain,\n          clientId: this.config.clientId,\n          clientSecret: this.config.clientSecret,\n          tenantId: this.config.tenantId,\n          token: this.config.token,\n          msiEndpoint: this.config.msiEndpoint,\n          msiSecret: this.config.msiSecret\n        }).reduce((acc, [key, val]) => {\n          if (typeof val !== 'undefined') {\n            return { ...acc, [key]: val }\n          }\n          return acc\n        }, {})\n      }, this.config.authentication)\n    }\n\n    cfg.options.database = cfg.options.database || this.config.database\n    cfg.options.port = cfg.options.port || this.config.port\n    cfg.options.connectTimeout = cfg.options.connectTimeout ?? this.config.connectionTimeout ?? this.config.timeout ?? 15000\n    cfg.options.requestTimeout = cfg.options.requestTimeout ?? this.config.requestTimeout ?? this.config.timeout ?? 15000\n    cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\n    cfg.options.rowCollectionOnDone = cfg.options.rowCollectionOnDone || false\n    cfg.options.rowCollectionOnRequestCompletion = cfg.options.rowCollectionOnRequestCompletion || false\n    cfg.options.useColumnNames = cfg.options.useColumnNames || false\n    cfg.options.appName = cfg.options.appName || 'node-mssql'\n\n    // tedious always connect via tcp when port is specified\n    if (cfg.options.instanceName) delete cfg.options.port\n\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\n    if (cfg.options.requestTimeout === Infinity || cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\n\n    if (!cfg.options.debug && this.config.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true\n      }\n    }\n    return cfg\n  }\n\n  _poolCreate () {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = (v) => {\n        resolve(v)\n        resolve = reject = () => {}\n      }\n      const rejectOnce = (e) => {\n        reject(e)\n        resolve = reject = () => {}\n      }\n      let tedious\n      try {\n        tedious = new tds.Connection(this._config())\n      } catch (err) {\n        rejectOnce(err)\n        return\n      }\n      tedious.connect(err => {\n        if (err) {\n          err = new ConnectionError(err)\n          return rejectOnce(err)\n        }\n\n        debug('connection(%d): established', IDS.get(tedious))\n        this.collation = tedious.databaseCollation\n        resolveOnce(tedious)\n      })\n      IDS.add(tedious, 'Connection')\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\n      debug('connection(%d): establishing', IDS.get(tedious))\n\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection')\n        rejectOnce(err)\n      })\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true\n        } else {\n          this.emit('error', err)\n        }\n        rejectOnce(err)\n      })\n\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\n      }\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious)\n      }\n    })\n  }\n\n  _poolValidate (tedious) {\n    if (tedious && !tedious.closed && !tedious.hasError) {\n      return !this.config.validateConnection || new shared.Promise((resolve) => {\n        const req = new tds.Request('SELECT 1;', (err) => {\n          resolve(!err)\n        })\n        tedious.execSql(req)\n      })\n    }\n    return false\n  }\n\n  _poolDestroy (tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve()\n        return\n      }\n      debug('connection(%d): destroying', IDS.get(tedious))\n\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious))\n        resolve()\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious))\n          resolve()\n        })\n\n        tedious.close()\n      }\n    })\n  }\n}\n\nmodule.exports = ConnectionPool\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2842, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/tedious/transaction.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:tedi')\nconst BaseTransaction = require('../base/transaction')\nconst { IDS } = require('../utils')\nconst TransactionError = require('../error/transaction-error')\n\nclass Transaction extends BaseTransaction {\n  constructor (parent) {\n    super(parent)\n\n    this._abort = () => {\n      if (!this._rollbackRequested) {\n        // transaction interrupted because of XACT_ABORT\n\n        const pc = this._acquiredConnection\n\n        // defer releasing so connection can switch from SentClientRequest to LoggedIn state\n        setImmediate(this.parent.release.bind(this.parent), pc)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n        this._aborted = true\n\n        this.emit('rollback', true)\n      }\n    }\n  }\n\n  _begin (isolationLevel, callback) {\n    super._begin(isolationLevel, err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): begin', IDS.get(this))\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        this._acquiredConnection = connection\n        this._acquiredConnection.on('rollbackTransaction', this._abort)\n        this._acquiredConfig = config\n\n        connection.beginTransaction(err => {\n          if (err) err = new TransactionError(err)\n\n          debug('transaction(%d): begun', IDS.get(this))\n\n          callback(err)\n        }, this.name, this.isolationLevel)\n      })\n    })\n  }\n\n  _commit (callback) {\n    super._commit(err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): commit', IDS.get(this))\n\n      this._acquiredConnection.commitTransaction(err => {\n        if (err) err = new TransactionError(err)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this.parent.release(this._acquiredConnection)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n\n        if (!err) debug('transaction(%d): commited', IDS.get(this))\n\n        callback(err)\n      })\n    })\n  }\n\n  _rollback (callback) {\n    super._rollback(err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): rollback', IDS.get(this))\n\n      this._acquiredConnection.rollbackTransaction(err => {\n        if (err) err = new TransactionError(err)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this.parent.release(this._acquiredConnection)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n\n        if (!err) debug('transaction(%d): rolled back', IDS.get(this))\n\n        callback(err)\n      })\n    })\n  }\n}\n\nmodule.exports = Transaction\n"],"names":[],"mappings":"AAAA;AAEA,MAAM,QAAQ,sGAAiB;AAC/B,MAAM;AACN,MAAM,EAAE,GAAG,EAAE;AACb,MAAM;AAEN,MAAM,oBAAoB;IACxB,YAAa,MAAM,CAAE;QACnB,KAAK,CAAC;QAEN,IAAI,CAAC,MAAM,GAAG;YACZ,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC5B,gDAAgD;gBAEhD,MAAM,KAAK,IAAI,CAAC,mBAAmB;gBAEnC,oFAAoF;gBACpF,aAAa,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG;gBAEpD,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,uBAAuB,IAAI,CAAC,MAAM;gBAC1E,IAAI,CAAC,mBAAmB,GAAG;gBAC3B,IAAI,CAAC,eAAe,GAAG;gBACvB,IAAI,CAAC,QAAQ,GAAG;gBAEhB,IAAI,CAAC,IAAI,CAAC,YAAY;YACxB;QACF;IACF;IAEA,OAAQ,cAAc,EAAE,QAAQ,EAAE;QAChC,KAAK,CAAC,OAAO,gBAAgB,CAAA;YAC3B,IAAI,KAAK,OAAO,SAAS;YAEzB,MAAM,0BAA0B,IAAI,GAAG,CAAC,IAAI;YAE5C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,YAAY;gBAC1C,IAAI,KAAK,OAAO,SAAS;gBAEzB,IAAI,CAAC,mBAAmB,GAAG;gBAC3B,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,uBAAuB,IAAI,CAAC,MAAM;gBAC9D,IAAI,CAAC,eAAe,GAAG;gBAEvB,WAAW,gBAAgB,CAAC,CAAA;oBAC1B,IAAI,KAAK,MAAM,IAAI,iBAAiB;oBAEpC,MAAM,0BAA0B,IAAI,GAAG,CAAC,IAAI;oBAE5C,SAAS;gBACX,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc;YACnC;QACF;IACF;IAEA,QAAS,QAAQ,EAAE;QACjB,KAAK,CAAC,QAAQ,CAAA;YACZ,IAAI,KAAK,OAAO,SAAS;YAEzB,MAAM,2BAA2B,IAAI,GAAG,CAAC,IAAI;YAE7C,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,CAAA;gBACzC,IAAI,KAAK,MAAM,IAAI,iBAAiB;gBAEpC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,uBAAuB,IAAI,CAAC,MAAM;gBAC1E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB;gBAC5C,IAAI,CAAC,mBAAmB,GAAG;gBAC3B,IAAI,CAAC,eAAe,GAAG;gBAEvB,IAAI,CAAC,KAAK,MAAM,6BAA6B,IAAI,GAAG,CAAC,IAAI;gBAEzD,SAAS;YACX;QACF;IACF;IAEA,UAAW,QAAQ,EAAE;QACnB,KAAK,CAAC,UAAU,CAAA;YACd,IAAI,KAAK,OAAO,SAAS;YAEzB,MAAM,6BAA6B,IAAI,GAAG,CAAC,IAAI;YAE/C,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAA;gBAC3C,IAAI,KAAK,MAAM,IAAI,iBAAiB;gBAEpC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,uBAAuB,IAAI,CAAC,MAAM;gBAC1E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB;gBAC5C,IAAI,CAAC,mBAAmB,GAAG;gBAC3B,IAAI,CAAC,eAAe,GAAG;gBAEvB,IAAI,CAAC,KAAK,MAAM,gCAAgC,IAAI,GAAG,CAAC,IAAI;gBAE5D,SAAS;YACX;QACF;IACF;AACF;AAEA,OAAO,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 2918, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/udt.js"],"sourcesContent":["'use strict'\n\n/* const FIGURE = {\n  INTERIOR_RING: 0x00,\n  STROKE: 0x01,\n  EXTERIOR_RING: 0x02\n};\n\nconst FIGURE_V2 = {\n  POINT: 0x00,\n  LINE: 0x01,\n  ARC: 0x02,\n  COMPOSITE_CURVE: 0x03\n};\n\nconst SHAPE = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07\n};\n\nconst SHAPE_V2 = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07,\n  CIRCULAR_STRING: 0x08,\n  COMPOUND_CURVE: 0x09,\n  CURVE_POLYGON: 0x0A,\n  FULL_GLOBE: 0x0B\n};\n\nconst SEGMENT = {\n  LINE: 0x00,\n  ARC: 0x01,\n  FIRST_LINE: 0x02,\n  FIRST_ARC: 0x03\n}; */\n\nclass Point {\n  constructor () {\n    this.x = 0\n    this.y = 0\n    this.z = null\n    this.m = null\n  }\n}\n\nconst parsePoints = (buffer, count, isGeometryPoint) => {\n  // s2.1.5 + s2.1.6\n  // The key distinction for parsing is that a GEOGRAPHY POINT is ordered Lat (y) then Long (x),\n  // while a GEOMETRY POINT is ordered x then y.\n  // Further, there are additional range constraints on GEOGRAPHY POINT that are useful for testing that the coordinate order has not been flipped, such as that Lat must be in the range [-90, +90].\n\n  const points = []\n  if (count < 1) {\n    return points\n  }\n\n  if (isGeometryPoint) {\n    // GEOMETRY POINT (s2.1.6): x then y.\n    for (let i = 1; i <= count; i++) {\n      const point = new Point()\n      points.push(point)\n      point.x = buffer.readDoubleLE(buffer.position)\n      point.y = buffer.readDoubleLE(buffer.position + 8)\n      buffer.position += 16\n    }\n  } else {\n    // GEOGRAPHY POINT (s2.1.5): Lat (y) then Long (x).\n    for (let i = 1; i <= count; i++) {\n      const point = new Point()\n      points.push(point)\n      point.lat = buffer.readDoubleLE(buffer.position)\n      point.lng = buffer.readDoubleLE(buffer.position + 8)\n\n      // For backwards compatibility, preserve the coordinate inversion in x and y.\n      // A future breaking change likely eliminate x and y for geography points in favor of just the lat and lng fields, as they've proven marvelously confusing.\n      // See discussion at: https://github.com/tediousjs/node-mssql/pull/1282#discussion_r677769531\n      point.x = point.lat\n      point.y = point.lng\n\n      buffer.position += 16\n    }\n  }\n\n  return points\n}\n\nconst parseZ = (buffer, points) => {\n  // s2.1.1 + s.2.1.2\n\n  if (points < 1) {\n    return\n  }\n\n  points.forEach(point => {\n    point.z = buffer.readDoubleLE(buffer.position)\n    buffer.position += 8\n  })\n}\n\nconst parseM = (buffer, points) => {\n  // s2.1.1 + s.2.1.2\n\n  if (points < 1) {\n    return\n  }\n\n  points.forEach(point => {\n    point.m = buffer.readDoubleLE(buffer.position)\n    buffer.position += 8\n  })\n}\n\nconst parseFigures = (buffer, count, properties) => {\n  // s2.1.3\n\n  const figures = []\n  if (count < 1) {\n    return figures\n  }\n\n  if (properties.P) {\n    figures.push({\n      attribute: 0x01,\n      pointOffset: 0\n    })\n  } else if (properties.L) {\n    figures.push({\n      attribute: 0x01,\n      pointOffset: 0\n    })\n  } else {\n    for (let i = 1; i <= count; i++) {\n      figures.push({\n        attribute: buffer.readUInt8(buffer.position),\n        pointOffset: buffer.readInt32LE(buffer.position + 1)\n      })\n\n      buffer.position += 5\n    }\n  }\n\n  return figures\n}\n\nconst parseShapes = (buffer, count, properties) => {\n  // s2.1.4\n\n  const shapes = []\n  if (count < 1) {\n    return shapes\n  }\n\n  if (properties.P) {\n    shapes.push({\n      parentOffset: -1,\n      figureOffset: 0,\n      type: 0x01\n    })\n  } else if (properties.L) {\n    shapes.push({\n      parentOffset: -1,\n      figureOffset: 0,\n      type: 0x02\n    })\n  } else {\n    for (let i = 1; i <= count; i++) {\n      shapes.push({\n        parentOffset: buffer.readInt32LE(buffer.position),\n        figureOffset: buffer.readInt32LE(buffer.position + 4),\n        type: buffer.readUInt8(buffer.position + 8)\n      })\n\n      buffer.position += 9\n    }\n  }\n\n  return shapes\n}\n\nconst parseSegments = (buffer, count) => {\n  // s2.1.7\n\n  const segments = []\n  if (count < 1) {\n    return segments\n  }\n\n  for (let i = 1; i <= count; i++) {\n    segments.push({ type: buffer.readUInt8(buffer.position) })\n\n    buffer.position++\n  }\n\n  return segments\n}\n\nconst parseGeography = (buffer, isUsingGeometryPoints) => {\n  // s2.1.1 + s.2.1.2\n\n  const srid = buffer.readInt32LE(0)\n  if (srid === -1) {\n    return null\n  }\n\n  const value = {\n    srid,\n    version: buffer.readUInt8(4)\n  }\n\n  const flags = buffer.readUInt8(5)\n  buffer.position = 6\n\n  // console.log(\"srid\", srid)\n  // console.log(\"version\", version)\n\n  const properties = {\n    Z: (flags & (1 << 0)) > 0,\n    M: (flags & (1 << 1)) > 0,\n    V: (flags & (1 << 2)) > 0,\n    P: (flags & (1 << 3)) > 0,\n    L: (flags & (1 << 4)) > 0\n  }\n\n  if (value.version === 2) {\n    properties.H = (flags & (1 << 3)) > 0\n  }\n\n  // console.log(\"properties\", properties);\n\n  let numberOfPoints\n  if (properties.P) {\n    numberOfPoints = 1\n  } else if (properties.L) {\n    numberOfPoints = 2\n  } else {\n    numberOfPoints = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfPoints\", numberOfPoints)\n\n  value.points = parsePoints(buffer, numberOfPoints, isUsingGeometryPoints)\n\n  if (properties.Z) {\n    parseZ(buffer, value.points)\n  }\n\n  if (properties.M) {\n    parseM(buffer, value.points)\n  }\n\n  // console.log(\"points\", points)\n\n  let numberOfFigures\n  if (properties.P) {\n    numberOfFigures = 1\n  } else if (properties.L) {\n    numberOfFigures = 1\n  } else {\n    numberOfFigures = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfFigures\", numberOfFigures)\n\n  value.figures = parseFigures(buffer, numberOfFigures, properties)\n\n  // console.log(\"figures\", figures)\n\n  let numberOfShapes\n  if (properties.P) {\n    numberOfShapes = 1\n  } else if (properties.L) {\n    numberOfShapes = 1\n  } else {\n    numberOfShapes = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfShapes\", numberOfShapes)\n\n  value.shapes = parseShapes(buffer, numberOfShapes, properties)\n\n  // console.log( \"shapes\", shapes)\n\n  if (value.version === 2 && buffer.position < buffer.length) {\n    const numberOfSegments = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n\n    // console.log(\"numberOfSegments\", numberOfSegments)\n\n    value.segments = parseSegments(buffer, numberOfSegments)\n\n    // console.log(\"segments\", segments)\n  } else {\n    value.segments = []\n  }\n\n  return value\n}\n\nmodule.exports.PARSERS = {\n  geography (buffer) {\n    return parseGeography(buffer, /* isUsingGeometryPoints: */false)\n  },\n\n  geometry (buffer) {\n    return parseGeography(buffer, /* isUsingGeometryPoints: */true)\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3186, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/tedious/request.js"],"sourcesContent":["'use strict'\n\nconst tds = require('tedious')\nconst debug = require('debug')('mssql:tedi')\nconst BaseRequest = require('../base/request')\nconst RequestError = require('../error/request-error')\nconst { IDS, objectHasProperty } = require('../utils')\nconst { TYPES, DECLARATIONS, declare, cast } = require('../datatypes')\nconst Table = require('../table')\nconst { PARSERS: UDT } = require('../udt')\nconst { valueHandler } = require('../shared')\n\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B'\nconst XML_COLUMN_ID = 'XML_F52E2B61-18A1-11d1-B105-00805F49916B'\n\nconst N_TYPES = {\n  BitN: 0x68,\n  DateTimeN: 0x6F,\n  DecimalN: 0x6A,\n  FloatN: 0x6D,\n  IntN: 0x26,\n  MoneyN: 0x6E,\n  NumericN: 0x6C\n}\n\nconst getTediousType = function (type) {\n  switch (type) {\n    case TYPES.VarChar: return tds.TYPES.VarChar\n    case TYPES.NVarChar: return tds.TYPES.NVarChar\n    case TYPES.Text: return tds.TYPES.Text\n    case TYPES.Int: return tds.TYPES.Int\n    case TYPES.BigInt: return tds.TYPES.BigInt\n    case TYPES.TinyInt: return tds.TYPES.TinyInt\n    case TYPES.SmallInt: return tds.TYPES.SmallInt\n    case TYPES.Bit: return tds.TYPES.Bit\n    case TYPES.Float: return tds.TYPES.Float\n    case TYPES.Decimal: return tds.TYPES.Decimal\n    case TYPES.Numeric: return tds.TYPES.Numeric\n    case TYPES.Real: return tds.TYPES.Real\n    case TYPES.Money: return tds.TYPES.Money\n    case TYPES.SmallMoney: return tds.TYPES.SmallMoney\n    case TYPES.Time: return tds.TYPES.Time\n    case TYPES.Date: return tds.TYPES.Date\n    case TYPES.DateTime: return tds.TYPES.DateTime\n    case TYPES.DateTime2: return tds.TYPES.DateTime2\n    case TYPES.DateTimeOffset: return tds.TYPES.DateTimeOffset\n    case TYPES.SmallDateTime: return tds.TYPES.SmallDateTime\n    case TYPES.UniqueIdentifier: return tds.TYPES.UniqueIdentifier\n    case TYPES.Xml: return tds.TYPES.NVarChar\n    case TYPES.Char: return tds.TYPES.Char\n    case TYPES.NChar: return tds.TYPES.NChar\n    case TYPES.NText: return tds.TYPES.NVarChar\n    case TYPES.Image: return tds.TYPES.Image\n    case TYPES.Binary: return tds.TYPES.Binary\n    case TYPES.VarBinary: return tds.TYPES.VarBinary\n    case TYPES.UDT: case TYPES.Geography: case TYPES.Geometry: return tds.TYPES.UDT\n    case TYPES.TVP: return tds.TYPES.TVP\n    case TYPES.Variant: return tds.TYPES.Variant\n    default: return type\n  }\n}\n\nconst getMssqlType = function (type, length) {\n  if (typeof type !== 'object') return undefined\n\n  switch (type) {\n    case tds.TYPES.Char: return TYPES.Char\n    case tds.TYPES.NChar: return TYPES.NChar\n    case tds.TYPES.VarChar: return TYPES.VarChar\n    case tds.TYPES.NVarChar: return TYPES.NVarChar\n    case tds.TYPES.Text: return TYPES.Text\n    case tds.TYPES.NText: return TYPES.NText\n    case tds.TYPES.Int: return TYPES.Int\n    case tds.TYPES.BigInt: return TYPES.BigInt\n    case tds.TYPES.TinyInt: return TYPES.TinyInt\n    case tds.TYPES.SmallInt: return TYPES.SmallInt\n    case tds.TYPES.Bit: return TYPES.Bit\n    case tds.TYPES.Float: return TYPES.Float\n    case tds.TYPES.Real: return TYPES.Real\n    case tds.TYPES.Money: return TYPES.Money\n    case tds.TYPES.SmallMoney: return TYPES.SmallMoney\n    case tds.TYPES.Numeric: return TYPES.Numeric\n    case tds.TYPES.Decimal: return TYPES.Decimal\n    case tds.TYPES.DateTime: return TYPES.DateTime\n    case tds.TYPES.Time: return TYPES.Time\n    case tds.TYPES.Date: return TYPES.Date\n    case tds.TYPES.DateTime2: return TYPES.DateTime2\n    case tds.TYPES.DateTimeOffset: return TYPES.DateTimeOffset\n    case tds.TYPES.SmallDateTime: return TYPES.SmallDateTime\n    case tds.TYPES.UniqueIdentifier: return TYPES.UniqueIdentifier\n    case tds.TYPES.Image: return TYPES.Image\n    case tds.TYPES.Binary: return TYPES.Binary\n    case tds.TYPES.VarBinary: return TYPES.VarBinary\n    case tds.TYPES.Xml: return TYPES.Xml\n    case tds.TYPES.UDT: return TYPES.UDT\n    case tds.TYPES.TVP: return TYPES.TVP\n    case tds.TYPES.Variant: return TYPES.Variant\n    default:\n      switch (type.id) {\n        case N_TYPES.BitN: return TYPES.Bit\n        case N_TYPES.NumericN: return TYPES.Numeric\n        case N_TYPES.DecimalN: return TYPES.Decimal\n        case N_TYPES.IntN:\n          if (length === 8) return TYPES.BigInt\n          if (length === 4) return TYPES.Int\n          if (length === 2) return TYPES.SmallInt\n          return TYPES.TinyInt\n        case N_TYPES.FloatN:\n          if (length === 8) return TYPES.Float\n          return TYPES.Real\n        case N_TYPES.MoneyN:\n          if (length === 8) return TYPES.Money\n          return TYPES.SmallMoney\n        case N_TYPES.DateTimeN:\n          if (length === 8) return TYPES.DateTime\n          return TYPES.SmallDateTime\n      }\n  }\n}\n\nconst createColumns = function (metadata, arrayRowMode) {\n  let out = {}\n  if (arrayRowMode) out = []\n  for (let index = 0, length = metadata.length; index < length; index++) {\n    const column = metadata[index]\n    const outColumn = {\n      index,\n      name: column.colName,\n      length: column.dataLength,\n      type: getMssqlType(column.type, column.dataLength),\n      scale: column.scale,\n      precision: column.precision,\n      nullable: !!(column.flags & 0x01),\n      caseSensitive: !!(column.flags & 0x02),\n      identity: !!(column.flags & 0x10),\n      readOnly: !(column.flags & 0x0C)\n    }\n\n    if (column.udtInfo) {\n      outColumn.udt = {\n        name: column.udtInfo.typeName,\n        database: column.udtInfo.dbname,\n        schema: column.udtInfo.owningSchema,\n        assembly: column.udtInfo.assemblyName\n      }\n\n      if (DECLARATIONS[column.udtInfo.typeName]) {\n        outColumn.type = DECLARATIONS[column.udtInfo.typeName]\n      }\n    }\n\n    if (arrayRowMode) {\n      out.push(outColumn)\n    } else {\n      out[column.colName] = outColumn\n    }\n  }\n\n  return out\n}\n\nconst valueCorrection = function (value, metadata) {\n  const type = getMssqlType(metadata.type)\n  if (valueHandler.has(type)) {\n    return valueHandler.get(type)(value)\n  } else if ((metadata.type === tds.TYPES.UDT) && (value != null)) {\n    if (UDT[metadata.udtInfo.typeName]) {\n      return UDT[metadata.udtInfo.typeName](value)\n    } else {\n      return value\n    }\n  } else {\n    return value\n  }\n}\n\nconst parameterCorrection = function (value) {\n  if (value instanceof Table) {\n    const tvp = {\n      name: value.name,\n      schema: value.schema,\n      columns: [],\n      rows: value.rows\n    }\n\n    for (const col of value.columns) {\n      tvp.columns.push({\n        name: col.name,\n        type: getTediousType(col.type),\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      })\n    }\n\n    return tvp\n  } else {\n    return value\n  }\n}\n\nclass Request extends BaseRequest {\n  /*\n  Execute specified sql batch.\n  */\n\n  _batch (batch, callback) {\n    this._isBatch = true\n    this._query(batch, callback)\n  }\n\n  /*\n  Bulk load.\n  */\n\n  _bulk (table, options, callback) {\n    super._bulk(table, options, err => {\n      if (err) return callback(err)\n\n      try {\n        table._makeBulk()\n      } catch (e) {\n        return callback(new RequestError(e, 'EREQUEST'))\n      }\n\n      if (!table.name) {\n        return callback(new RequestError('Table name must be specified for bulk insert.', 'ENAME'))\n      }\n\n      if (table.name.charAt(0) === '@') {\n        return callback(new RequestError(\"You can't use table variables for bulk insert.\", 'ENAME'))\n      }\n\n      const errors = []\n      const errorHandlers = {}\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection) => {\n        const callbackWithRelease = (err, ...args) => {\n          try {\n            this.parent.release(connection)\n          } catch (e) {\n            // noop\n          }\n          callback(err, ...args)\n        }\n        if (err) return callbackWithRelease(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          return callbackWithRelease(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        const done = (err, rowCount) => {\n          // to make sure we handle no-sql errors as well\n          if (err && (!errors.length || (errors.length && err.message !== errors[errors.length - 1].message))) {\n            err = new RequestError(err, 'EREQUEST')\n            if (this.stream) this.emit('error', err)\n            errors.push(err)\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            hasReturned = true\n\n            if (this.stream) {\n              callbackWithRelease(null, rowCount)\n            } else {\n              callbackWithRelease(error, rowCount)\n            }\n          }\n        }\n\n        const bulk = connection.newBulkLoad(table.path, options, done)\n\n        for (const col of table.columns) {\n          bulk.addColumn(col.name, getTediousType(col.type), { nullable: col.nullable, length: col.length, scale: col.scale, precision: col.precision })\n        }\n\n        if (table.create) {\n          const objectid = table.temporary ? `tempdb..[${table.name}]` : table.path\n          const req = new tds.Request(`if object_id('${objectid.replace(/'/g, '\\'\\'')}') is null ${table.declare()}`, err => {\n            if (err) return done(err)\n\n            connection.execBulkLoad(bulk, table.rows)\n          })\n          this._setCurrentRequest(req)\n\n          connection.execSqlBatch(req)\n        } else {\n          connection.execBulkLoad(bulk, table.rows)\n        }\n      })\n    })\n  }\n\n  /*\n  Execute specified sql command.\n  */\n\n  _query (command, callback) {\n    super._query(command, err => {\n      if (err) return callback(err)\n\n      const recordsets = []\n      const recordsetcolumns = []\n      const errors = []\n      const errorHandlers = {}\n      const output = {}\n      const rowsAffected = []\n\n      let columns = {}\n      let recordset = []\n      let batchLastRow = null\n      let batchHasOutput = false\n      let isChunkedRecordset = false\n      let chunksBuffer = null\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        let row\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          this.parent.release(connection)\n          return callback(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        debug('request(%d): query', IDS.get(this), command)\n\n        const req = new tds.Request(command, err => {\n          // tedious v15 has started using AggregateErrors to wrap multiple errors into single error objects\n          (err?.errors ? err.errors : [err]).forEach((e, i, { length }) => {\n            // to make sure we handle no-sql errors as well\n            if (e && (!errors.length || (errors.length && errors.length >= length && e.message !== errors[errors.length - length + i].message))) {\n              e = new RequestError(e, 'EREQUEST')\n              if (this.stream) this.emit('error', e)\n              errors.push(e)\n            }\n          })\n\n          // process batch outputs\n          if (batchHasOutput) {\n            if (!this.stream) batchLastRow = recordsets.pop()[0]\n\n            for (const name in batchLastRow) {\n              const value = batchLastRow[name]\n              if (name !== '___return___') {\n                output[name] = value\n              }\n            }\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            this.parent.release(connection)\n            hasReturned = true\n\n            if (error) {\n              debug('request(%d): failed', IDS.get(this), error)\n            } else {\n              debug('request(%d): completed', IDS.get(this))\n            }\n\n            if (this.stream) {\n              callback(null, null, output, rowsAffected, recordsetcolumns)\n            } else {\n              callback(error, recordsets, output, rowsAffected, recordsetcolumns)\n            }\n          }\n        })\n\n        this._setCurrentRequest(req)\n\n        req.on('columnMetadata', metadata => {\n          columns = createColumns(metadata, this.arrayRowMode)\n\n          isChunkedRecordset = false\n          if (metadata.length === 1 && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n            isChunkedRecordset = true\n            chunksBuffer = []\n          }\n\n          if (this.stream) {\n            if (this._isBatch) {\n              // don't stream recordset with output values in batches\n              if (!columns.___return___) {\n                this.emit('recordset', columns)\n              }\n            } else {\n              this.emit('recordset', columns)\n            }\n          }\n          if (this.arrayRowMode) recordsetcolumns.push(columns)\n        })\n\n        const doneHandler = (rowCount, more) => {\n          if (rowCount != null) {\n            rowsAffected.push(rowCount)\n            if (this.stream) {\n              this.emit('rowsaffected', rowCount)\n            }\n          }\n          // this function is called even when select only set variables so we should skip adding a new recordset\n          if (Object.keys(columns).length === 0) return\n\n          if (isChunkedRecordset) {\n            const concatenatedChunks = chunksBuffer.join('')\n            if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n              try {\n                if (concatenatedChunks === '') {\n                  row = null\n                } else {\n                  row = JSON.parse(concatenatedChunks)\n                }\n              } catch (ex) {\n                row = null\n                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), 'EJSON')\n\n                if (this.stream) this.emit('error', ex2)\n\n                // we must collect errors even in stream mode\n                errors.push(ex2)\n              }\n            } else {\n              row = {}\n              row[Object.keys(columns)[0]] = concatenatedChunks\n            }\n\n            chunksBuffer = null\n\n            if (this.stream) {\n              this.emit('row', row)\n            } else {\n              recordset.push(row)\n            }\n          }\n\n          if (!this.stream) {\n            // all rows of current recordset loaded\n            Object.defineProperty(recordset, 'columns', {\n              enumerable: false,\n              configurable: true,\n              value: columns\n            })\n\n            Object.defineProperty(recordset, 'toTable', {\n              enumerable: false,\n              configurable: true,\n              value (name) { return Table.fromRecordset(this, name) }\n            })\n\n            recordsets.push(recordset)\n          }\n\n          recordset = []\n          columns = {}\n        }\n\n        req.on('doneInProc', doneHandler) // doneInProc handlers are used in both queries and batches\n        req.on('done', doneHandler) // done handlers are used in batches\n\n        req.on('returnValue', (parameterName, value, metadata) => {\n          output[parameterName] = value\n        })\n\n        req.on('row', columns => {\n          if (!recordset) recordset = []\n\n          if (isChunkedRecordset) {\n            return chunksBuffer.push(columns[0].value)\n          }\n\n          if (this.arrayRowMode) {\n            row = []\n          } else {\n            row = {}\n          }\n          for (const col of columns) {\n            col.value = valueCorrection(col.value, col.metadata)\n\n            if (this.arrayRowMode) {\n              row.push(col.value)\n            } else {\n              const exi = row[col.metadata.colName]\n              if (exi !== undefined) {\n                if (exi instanceof Array) {\n                  exi.push(col.value)\n                } else {\n                  row[col.metadata.colName] = [exi, col.value]\n                }\n              } else {\n                row[col.metadata.colName] = col.value\n              }\n            }\n          }\n\n          if (this.stream) {\n            if (this._isBatch) {\n              // dont stream recordset with output values in batches\n              if (row.___return___) {\n                batchLastRow = row\n              } else {\n                this.emit('row', row)\n              }\n            } else {\n              this.emit('row', row)\n            }\n          } else {\n            recordset.push(row)\n          }\n        })\n\n        if (this._isBatch) {\n          if (Object.keys(this.parameters).length) {\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n\n              try {\n                param.value = getTediousType(param.type).validate(param.value, this.parent.collation)\n              } catch (e) {\n                e.message = `Validation failed for parameter '${name}'. ${e.message}`\n                const err = new RequestError(e, 'EPARAM')\n\n                this.parent.release(connection)\n                return callback(err)\n              }\n            }\n\n            const declarations = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              declarations.push(`@${name} ${declare(param.type, param)}`)\n            }\n\n            const assigns = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              assigns.push(`@${name} = ${cast(param.value, param.type, param)}`)\n            }\n\n            const selects = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              if (param.io === 2) {\n                selects.push(`@${name} as [${name}]`)\n              }\n            }\n\n            batchHasOutput = selects.length > 0\n\n            req.sqlTextOrProcedure = `declare ${declarations.join(', ')};select ${assigns.join(', ')};${req.sqlTextOrProcedure};${batchHasOutput ? (`select 1 as [___return___], ${selects.join(', ')}`) : ''}`\n          }\n        } else {\n          for (const name in this.parameters) {\n            if (!objectHasProperty(this.parameters, name)) {\n              continue\n            }\n            const param = this.parameters[name]\n            if (param.io === 1) {\n              req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n            } else {\n              req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n            }\n          }\n        }\n\n        try {\n          connection[this._isBatch ? 'execSqlBatch' : 'execSql'](req)\n        } catch (error) {\n          handleError(true, connection, error)\n        }\n      })\n    })\n  }\n\n  /*\n  Execute stored procedure with specified parameters.\n  */\n\n  _execute (procedure, callback) {\n    super._execute(procedure, err => {\n      if (err) return callback(err)\n\n      const recordsets = []\n      const recordsetcolumns = []\n      const errors = []\n      const errorHandlers = {}\n      const output = {}\n      const rowsAffected = []\n\n      let columns = {}\n      let recordset = []\n      let returnValue = 0\n      let isChunkedRecordset = false\n      let chunksBuffer = null\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        let row\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          this.parent.release(connection)\n          return callback(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        if (debug.enabled) {\n          // log stored procedure executions and provided parameters\n          const params = Object.keys(this.parameters).map(k => this.parameters[k])\n          // cut long string parameters short to keep log somewhat clean\n          const logValue = s => typeof s === 'string' && s.length > 50 ? s.substring(0, 47) + '...' : s\n          // format parameter names as 'my_parameter [sql.Int]'\n          const logName = param => param.name + ' [sql.' + param.type.name + ']'\n          const logParams = {}\n          params.forEach(p => { logParams[logName(p)] = logValue(p.value) })\n          debug('request(%d): execute %s %O', IDS.get(this), procedure, logParams)\n        }\n\n        const req = new tds.Request(procedure, err => {\n          // to make sure we handle no-sql errors as well\n          if (err && (!errors.length || (errors.length && err.message !== errors[errors.length - 1].message))) {\n            err = new RequestError(err, 'EREQUEST')\n            if (this.stream) this.emit('error', err)\n            errors.push(err)\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            this.parent.release(connection)\n            hasReturned = true\n\n            if (error) {\n              debug('request(%d): failed', IDS.get(this), error)\n            } else {\n              debug('request(%d): complete', IDS.get(this))\n            }\n\n            if (this.stream) {\n              callback(null, null, output, returnValue, rowsAffected, recordsetcolumns)\n            } else {\n              callback(error, recordsets, output, returnValue, rowsAffected, recordsetcolumns)\n            }\n          }\n        })\n\n        this._setCurrentRequest(req)\n\n        req.on('columnMetadata', metadata => {\n          columns = createColumns(metadata, this.arrayRowMode)\n\n          isChunkedRecordset = false\n          if ((metadata.length === 1) && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n            isChunkedRecordset = true\n            chunksBuffer = []\n          }\n\n          if (this.stream) this.emit('recordset', columns)\n          if (this.arrayRowMode) recordsetcolumns.push(columns)\n        })\n\n        req.on('row', columns => {\n          if (!recordset) recordset = []\n\n          if (isChunkedRecordset) {\n            return chunksBuffer.push(columns[0].value)\n          }\n\n          if (this.arrayRowMode) {\n            row = []\n          } else {\n            row = {}\n          }\n          for (const col of columns) {\n            col.value = valueCorrection(col.value, col.metadata)\n\n            if (this.arrayRowMode) {\n              row.push(col.value)\n            } else {\n              const exi = row[col.metadata.colName]\n              if (exi != null) {\n                if (exi instanceof Array) {\n                  exi.push(col.value)\n                } else {\n                  row[col.metadata.colName] = [exi, col.value]\n                }\n              } else {\n                row[col.metadata.colName] = col.value\n              }\n            }\n          }\n\n          if (this.stream) {\n            this.emit('row', row)\n          } else {\n            recordset.push(row)\n          }\n        })\n\n        req.on('doneInProc', (rowCount, more) => {\n          if (rowCount != null) {\n            rowsAffected.push(rowCount)\n            if (this.stream) {\n              this.emit('rowsaffected', rowCount)\n            }\n          }\n\n          // filter empty recordsets when NOCOUNT is OFF\n          if (Object.keys(columns).length === 0) return\n\n          if (isChunkedRecordset) {\n            if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n              try {\n                if (chunksBuffer.length === 0) {\n                  row = null\n                } else {\n                  row = JSON.parse(chunksBuffer.join(''))\n                }\n              } catch (ex) {\n                row = null\n                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), 'EJSON')\n\n                if (this.stream) this.emit('error', ex2)\n\n                // we must collect errors even in stream mode\n                errors.push(ex2)\n              }\n            } else {\n              row = {}\n              row[Object.keys(columns)[0]] = chunksBuffer.join('')\n            }\n\n            chunksBuffer = null\n\n            if (this.stream) {\n              this.emit('row', row)\n            } else {\n              recordset.push(row)\n            }\n          }\n\n          if (!this.stream) {\n            // all rows of current recordset loaded\n            Object.defineProperty(recordset, 'columns', {\n              enumerable: false,\n              configurable: true,\n              value: columns\n            })\n\n            Object.defineProperty(recordset, 'toTable', {\n              enumerable: false,\n              configurable: true,\n              value (name) { return Table.fromRecordset(this, name) }\n            })\n\n            recordsets.push(recordset)\n          }\n\n          recordset = []\n          columns = {}\n        })\n\n        req.on('doneProc', (rowCount, more, returnStatus) => {\n          returnValue = returnStatus\n        })\n\n        req.on('returnValue', (parameterName, value, metadata) => {\n          output[parameterName] = value\n        })\n\n        for (const name in this.parameters) {\n          if (!objectHasProperty(this.parameters, name)) {\n            continue\n          }\n          const param = this.parameters[name]\n          if (param.io === 1) {\n            req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n          } else {\n            req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n          }\n        }\n\n        connection.callProcedure(req)\n      })\n    })\n  }\n\n  _pause () {\n    super._pause()\n    if (this._currentRequest) {\n      this._currentRequest.pause()\n    }\n  }\n\n  _resume () {\n    super._resume()\n    if (this._currentRequest) {\n      this._currentRequest.resume()\n    }\n  }\n}\n\nmodule.exports = Request\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 4142, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/lib/tedious/index.js"],"sourcesContent":["'use strict'\n\nconst base = require('../base')\nconst ConnectionPool = require('./connection-pool')\nconst Transaction = require('./transaction')\nconst Request = require('./request')\n\nmodule.exports = Object.assign({\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement: base.PreparedStatement\n}, base.exports)\n\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return base.Promise\n  },\n  set: (value) => {\n    base.Promise = value\n  }\n})\n\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: base.valueHandler,\n  writable: false,\n  configurable: false\n})\n\nbase.driver.name = 'tedious'\nbase.driver.ConnectionPool = ConnectionPool\nbase.driver.Transaction = Transaction\nbase.driver.Request = Request\n"],"names":[],"mappings":"AAAA;AAEA,MAAM;AACN,MAAM;AACN,MAAM;AACN,MAAM;AAEN,OAAO,OAAO,GAAG,OAAO,MAAM,CAAC;IAC7B;IACA;IACA;IACA,mBAAmB,KAAK,iBAAiB;AAC3C,GAAG,KAAK,OAAO;AAEf,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,WAAW;IAC/C,YAAY;IACZ,KAAK;QACH,OAAO,KAAK,OAAO;IACrB;IACA,KAAK,CAAC;QACJ,KAAK,OAAO,GAAG;IACjB;AACF;AAEA,OAAO,cAAc,CAAC,OAAO,OAAO,EAAE,gBAAgB;IACpD,YAAY;IACZ,OAAO,KAAK,YAAY;IACxB,UAAU;IACV,cAAc;AAChB;AAEA,KAAK,MAAM,CAAC,IAAI,GAAG;AACnB,KAAK,MAAM,CAAC,cAAc,GAAG;AAC7B,KAAK,MAAM,CAAC,WAAW,GAAG;AAC1B,KAAK,MAAM,CAAC,OAAO,GAAG","ignoreList":[0]}},
    {"offset": {"line": 4177, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/mssql/index.js"],"sourcesContent":["module.exports = require('./lib/tedious')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0]}}]
}